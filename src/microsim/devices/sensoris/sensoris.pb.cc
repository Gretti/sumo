// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensoris.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* KeyValuePairString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValuePairString_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3D_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleMetaData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleMetaData_VehicleTypeGenericEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleMetaData_FuelTypeEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionEstimate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionEstimate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PositionEstimate_PositionTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PositionEstimate_SpeedDetectionEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PositionEstimate_HeadingDetectionEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PathSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathSegment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleStatus_TransmissionModeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleStatus_LightStateBitfield_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleStatus_WiperStateEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleStatus_MaintenanceLightStateBitfield_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VehicleDynamics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleDynamics_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionOffset_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PositionOffset_LateralOffsetSimpleEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PositionOffset_LongitudinalOffsetSimpleEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PositionOffset_VerticalOffsetSimpleEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RoadSignRestriction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadSignRestriction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoadSignRestriction_RestrictionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SignRecognition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignRecognition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SignRecognition_RoadSignTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SignRecognition_RoadSignPermanencyEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SignRecognition_RoadSignDependenciesEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SignRecognition_RoadSignValidityEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SignRecognition_RoadSignRecognitionTypeEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LinePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinePoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LinePoint_LinePointTypeEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LaneBoundaryRecognition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneBoundaryRecognition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LaneBoundaryRecognition_LaneBoundaryTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LaneBoundaryRecognition_LaneBoundaryColorEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TireSlippageEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TireSlippageEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrashDetectedEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrashDetectedEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmergencyBrakingEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmergencyBrakingEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynamicStabilityControlEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynamicStabilityControlEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* AntiLockBrakingSystemEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AntiLockBrakingSystemEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElectronicStabilityControlEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElectronicStabilityControlEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExceptionalVehicleState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExceptionalVehicleState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProprietaryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProprietaryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnvironmentStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnvironmentStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EnvironmentStatus_LightConditionsEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnvironmentStatus_PrecipitationEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnvironmentStatus_RoadSurfaceTypeEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TrafficLightStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLightStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TrafficLightStatus_LightStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ObjectDetection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDetection_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjectDetection_ObjectTypeEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ADServiceAndSensorState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADServiceAndSensorState_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgoMotion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgoMotion_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawGNSSSatData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawGNSSSatData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RawGNSSSatData_RawGNSSSatDataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PathEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathEvents_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaContainer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MediaContainer_MediaTypeEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PathMedia_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathMedia_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WheelReferenceBitfield_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sensoris_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_sensoris_2eproto() {
  protobuf_AddDesc_sensoris_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sensoris.proto");
  GOOGLE_CHECK(file != NULL);
  KeyValuePairString_descriptor_ = file->message_type(0);
  static const int KeyValuePairString_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePairString, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePairString, value_),
  };
  KeyValuePairString_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyValuePairString_descriptor_,
      KeyValuePairString::default_instance_,
      KeyValuePairString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePairString, _has_bits_[0]),
      -1,
      -1,
      sizeof(KeyValuePairString),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePairString, _internal_metadata_),
      -1);
  Vector3D_descriptor_ = file->message_type(1);
  static const int Vector3D_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, longitudinalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, lateralvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, verticalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, longitudinalaccuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, lateralaccuary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, verticalaccuracy_),
  };
  Vector3D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3D_descriptor_,
      Vector3D::default_instance_,
      Vector3D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, _has_bits_[0]),
      -1,
      -1,
      sizeof(Vector3D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, _internal_metadata_),
      -1);
  VehicleMetaData_descriptor_ = file->message_type(2);
  static const int VehicleMetaData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, vehicletypegeneric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, vehiclespecificmetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, vehiclereferencepointdeltaaboveground_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, curvatureaccuracy_1pm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, slopeaccuracy_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, vehiclelength_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, vehiclewidth_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, vehicleheight_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, primaryfueltankvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, primaryfueltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, secondaryfueltankvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, secondaryfueltype_),
  };
  VehicleMetaData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleMetaData_descriptor_,
      VehicleMetaData::default_instance_,
      VehicleMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleMetaData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMetaData, _internal_metadata_),
      -1);
  VehicleMetaData_VehicleTypeGenericEnum_descriptor_ = VehicleMetaData_descriptor_->enum_type(0);
  VehicleMetaData_FuelTypeEnum_descriptor_ = VehicleMetaData_descriptor_->enum_type(1);
  Envelope_descriptor_ = file->message_type(3);
  static const int Envelope_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, submitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, vehiclemetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, transientvehicleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, vehicleprofileid_),
  };
  Envelope_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::default_instance_,
      Envelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _has_bits_[0]),
      -1,
      -1,
      sizeof(Envelope),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _internal_metadata_),
      -1);
  PositionEstimate_descriptor_ = file->message_type(4);
  static const int PositionEstimate_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, positiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, interpolatedpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, longitude_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, latitude_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, horizontalaccuracy_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, altitude_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, heading_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, speed_mps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, altitudeaccuracy_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, headingaccuracy_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, speedaccuracy_mps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, speeddetectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, headingdetectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, vehiclereferencedorientationvector_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, currentlaneestimate_),
  };
  PositionEstimate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PositionEstimate_descriptor_,
      PositionEstimate::default_instance_,
      PositionEstimate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, _has_bits_[0]),
      -1,
      -1,
      sizeof(PositionEstimate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimate, _internal_metadata_),
      -1);
  PositionEstimate_PositionTypeEnum_descriptor_ = PositionEstimate_descriptor_->enum_type(0);
  PositionEstimate_SpeedDetectionEnum_descriptor_ = PositionEstimate_descriptor_->enum_type(1);
  PositionEstimate_HeadingDetectionEnum_descriptor_ = PositionEstimate_descriptor_->enum_type(2);
  PathSegment_descriptor_ = file->message_type(5);
  static const int PathSegment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSegment, positionestimate_),
  };
  PathSegment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathSegment_descriptor_,
      PathSegment::default_instance_,
      PathSegment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSegment, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathSegment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSegment, _internal_metadata_),
      -1);
  Path_descriptor_ = file->message_type(6);
  static const int Path_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, positionestimate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, positionsegments_),
  };
  Path_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Path_descriptor_,
      Path::default_instance_,
      Path_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _has_bits_[0]),
      -1,
      -1,
      sizeof(Path),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _internal_metadata_),
      -1);
  VehicleStatus_descriptor_ = file->message_type(7);
  static const int VehicleStatus_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, transmissionmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, lightstatebitfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, wiperstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, temperatureexternal_cel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, wiperspeed_wpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, drivewheelreference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, chassisclearance_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, mileage_km_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, primaryfuelstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, primaryfuelstateaccuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, estimatedprimaryrange_km_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, secondaryfuelstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, secondaryfuelstateaccuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, estimatedsecondaryrange_km_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, maintenancelightstate_),
  };
  VehicleStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleStatus_descriptor_,
      VehicleStatus::default_instance_,
      VehicleStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, _internal_metadata_),
      -1);
  VehicleStatus_TransmissionModeEnum_descriptor_ = VehicleStatus_descriptor_->enum_type(0);
  VehicleStatus_LightStateBitfield_descriptor_ = VehicleStatus_descriptor_->enum_type(1);
  VehicleStatus_WiperStateEnum_descriptor_ = VehicleStatus_descriptor_->enum_type(2);
  VehicleStatus_MaintenanceLightStateBitfield_descriptor_ = VehicleStatus_descriptor_->enum_type(3);
  VehicleDynamics_descriptor_ = file->message_type(8);
  static const int VehicleDynamics_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDynamics, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDynamics, curvature_1pm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDynamics, slope_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDynamics, curvatureaccuracy_1pm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDynamics, slopeaccuracy_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDynamics, averagesuspensiontravel_mm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDynamics, averageaccelerationvector_mps2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDynamics, averagerotationratevector_omega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDynamics, averagespeedvector_mps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDynamics, relativepositionvector_m_),
  };
  VehicleDynamics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleDynamics_descriptor_,
      VehicleDynamics::default_instance_,
      VehicleDynamics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDynamics, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleDynamics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDynamics, _internal_metadata_),
      -1);
  PositionOffset_descriptor_ = file->message_type(9);
  static const int PositionOffset_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOffset, lateraloffset_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOffset, lateraloffsetsimple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOffset, longitudinaloffset_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOffset, longitudinaloffsetsimple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOffset, verticaloffset_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOffset, verticaloffsetsimple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOffset, lateraloffsetaccuracy_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOffset, longitudinaloffsetaccuracy_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOffset, verticaloffsetaccuracy_m_),
  };
  PositionOffset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PositionOffset_descriptor_,
      PositionOffset::default_instance_,
      PositionOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOffset, _has_bits_[0]),
      -1,
      -1,
      sizeof(PositionOffset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionOffset, _internal_metadata_),
      -1);
  PositionOffset_LateralOffsetSimpleEnum_descriptor_ = PositionOffset_descriptor_->enum_type(0);
  PositionOffset_LongitudinalOffsetSimpleEnum_descriptor_ = PositionOffset_descriptor_->enum_type(1);
  PositionOffset_VerticalOffsetSimpleEnum_descriptor_ = PositionOffset_descriptor_->enum_type(2);
  RoadSignRestriction_descriptor_ = file->message_type(10);
  static const int RoadSignRestriction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSignRestriction, restrictiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSignRestriction, restrictionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSignRestriction, restrictionconfidence_percent_),
  };
  RoadSignRestriction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoadSignRestriction_descriptor_,
      RoadSignRestriction::default_instance_,
      RoadSignRestriction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSignRestriction, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoadSignRestriction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSignRestriction, _internal_metadata_),
      -1);
  RoadSignRestriction_RestrictionType_descriptor_ = RoadSignRestriction_descriptor_->enum_type(0);
  SignRecognition_descriptor_ = file->message_type(11);
  static const int SignRecognition_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, positionoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, roadsigntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, roadsignpermanency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, roadsignvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, roadsigndependencies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, roadsignvalidity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, roadsignvalidityvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, roadsignrecognitiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, detectedobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, mediaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, roadsignrecognitionconfidence_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, roadsignrestrictions_),
  };
  SignRecognition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignRecognition_descriptor_,
      SignRecognition::default_instance_,
      SignRecognition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, _has_bits_[0]),
      -1,
      -1,
      sizeof(SignRecognition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRecognition, _internal_metadata_),
      -1);
  SignRecognition_RoadSignTypeEnum_descriptor_ = SignRecognition_descriptor_->enum_type(0);
  SignRecognition_RoadSignPermanencyEnum_descriptor_ = SignRecognition_descriptor_->enum_type(1);
  SignRecognition_RoadSignDependenciesEnum_descriptor_ = SignRecognition_descriptor_->enum_type(2);
  SignRecognition_RoadSignValidityEnum_descriptor_ = SignRecognition_descriptor_->enum_type(3);
  SignRecognition_RoadSignRecognitionTypeEnum_descriptor_ = SignRecognition_descriptor_->enum_type(4);
  LinePoint_descriptor_ = file->message_type(12);
  static const int LinePoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePoint, positionoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePoint, linepointtype_),
  };
  LinePoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LinePoint_descriptor_,
      LinePoint::default_instance_,
      LinePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(LinePoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePoint, _internal_metadata_),
      -1);
  LinePoint_LinePointTypeEnum_descriptor_ = LinePoint_descriptor_->enum_type(0);
  LaneBoundaryRecognition_descriptor_ = file->message_type(13);
  static const int LaneBoundaryRecognition_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, positionoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, laneboundarytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, laneboundarycolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, curvature_1pm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, lanemarkerwidth_mm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, lanemarkerwidthaccuracy_mm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, lanedeclination_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, lanedeclinationaccuracy_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, laneboundarytypeconfidence_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, linepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, lm_orientation_),
  };
  LaneBoundaryRecognition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LaneBoundaryRecognition_descriptor_,
      LaneBoundaryRecognition::default_instance_,
      LaneBoundaryRecognition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, _has_bits_[0]),
      -1,
      -1,
      sizeof(LaneBoundaryRecognition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryRecognition, _internal_metadata_),
      -1);
  LaneBoundaryRecognition_LaneBoundaryTypeEnum_descriptor_ = LaneBoundaryRecognition_descriptor_->enum_type(0);
  LaneBoundaryRecognition_LaneBoundaryColorEnum_descriptor_ = LaneBoundaryRecognition_descriptor_->enum_type(1);
  TireSlippageEvent_descriptor_ = file->message_type(14);
  static const int TireSlippageEvent_offsets_[1] = {
  };
  TireSlippageEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TireSlippageEvent_descriptor_,
      TireSlippageEvent::default_instance_,
      TireSlippageEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TireSlippageEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(TireSlippageEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TireSlippageEvent, _internal_metadata_),
      -1);
  CrashDetectedEvent_descriptor_ = file->message_type(15);
  static const int CrashDetectedEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashDetectedEvent, vehicleisdrivable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashDetectedEvent, airbagsdeployed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashDetectedEvent, ecallactivated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashDetectedEvent, vehicleisobstacleonroad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashDetectedEvent, maxaccelerationvector_mps2_),
  };
  CrashDetectedEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CrashDetectedEvent_descriptor_,
      CrashDetectedEvent::default_instance_,
      CrashDetectedEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashDetectedEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(CrashDetectedEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrashDetectedEvent, _internal_metadata_),
      -1);
  EmergencyBrakingEvent_descriptor_ = file->message_type(16);
  static const int EmergencyBrakingEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyBrakingEvent, maxaccelerationvector_mps2_),
  };
  EmergencyBrakingEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmergencyBrakingEvent_descriptor_,
      EmergencyBrakingEvent::default_instance_,
      EmergencyBrakingEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyBrakingEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(EmergencyBrakingEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyBrakingEvent, _internal_metadata_),
      -1);
  DynamicStabilityControlEvent_descriptor_ = file->message_type(17);
  static const int DynamicStabilityControlEvent_offsets_[1] = {
  };
  DynamicStabilityControlEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DynamicStabilityControlEvent_descriptor_,
      DynamicStabilityControlEvent::default_instance_,
      DynamicStabilityControlEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicStabilityControlEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(DynamicStabilityControlEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicStabilityControlEvent, _internal_metadata_),
      -1);
  AntiLockBrakingSystemEvent_descriptor_ = file->message_type(18);
  static const int AntiLockBrakingSystemEvent_offsets_[1] = {
  };
  AntiLockBrakingSystemEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AntiLockBrakingSystemEvent_descriptor_,
      AntiLockBrakingSystemEvent::default_instance_,
      AntiLockBrakingSystemEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntiLockBrakingSystemEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(AntiLockBrakingSystemEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntiLockBrakingSystemEvent, _internal_metadata_),
      -1);
  ElectronicStabilityControlEvent_descriptor_ = file->message_type(19);
  static const int ElectronicStabilityControlEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectronicStabilityControlEvent, antislipactionevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectronicStabilityControlEvent, antilockactionevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectronicStabilityControlEvent, electronicstabilitycontrolevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectronicStabilityControlEvent, requestedaccelerationvector_mps2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectronicStabilityControlEvent, requestedrotationratevector_omega_),
  };
  ElectronicStabilityControlEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ElectronicStabilityControlEvent_descriptor_,
      ElectronicStabilityControlEvent::default_instance_,
      ElectronicStabilityControlEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectronicStabilityControlEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(ElectronicStabilityControlEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectronicStabilityControlEvent, _internal_metadata_),
      -1);
  ExceptionalVehicleState_descriptor_ = file->message_type(20);
  static const int ExceptionalVehicleState_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionalVehicleState, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionalVehicleState, tireslippage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionalVehicleState, crashdetected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionalVehicleState, emergencybraking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionalVehicleState, dynamicstabilitycontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionalVehicleState, antilockbrakingsystem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionalVehicleState, electronicstabilitycontrol_),
  };
  ExceptionalVehicleState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExceptionalVehicleState_descriptor_,
      ExceptionalVehicleState::default_instance_,
      ExceptionalVehicleState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionalVehicleState, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExceptionalVehicleState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionalVehicleState, _internal_metadata_),
      -1);
  ProprietaryInfo_descriptor_ = file->message_type(21);
  static const int ProprietaryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProprietaryInfo, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProprietaryInfo, keyvaluepairs_),
  };
  ProprietaryInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProprietaryInfo_descriptor_,
      ProprietaryInfo::default_instance_,
      ProprietaryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProprietaryInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProprietaryInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProprietaryInfo, _internal_metadata_),
      -1);
  EnvironmentStatus_descriptor_ = file->message_type(22);
  static const int EnvironmentStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentStatus, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentStatus, lightconditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentStatus, externalairtemperature_degc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentStatus, externalairtemperatureaccuracy_degc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentStatus, precipitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentStatus, visibledistance_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentStatus, roadsurfacetemperature_degc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentStatus, roadsurfacetemperatureaccuracy_degc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentStatus, roadsurfacetype_),
  };
  EnvironmentStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnvironmentStatus_descriptor_,
      EnvironmentStatus::default_instance_,
      EnvironmentStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(EnvironmentStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentStatus, _internal_metadata_),
      -1);
  EnvironmentStatus_LightConditionsEnum_descriptor_ = EnvironmentStatus_descriptor_->enum_type(0);
  EnvironmentStatus_PrecipitationEnum_descriptor_ = EnvironmentStatus_descriptor_->enum_type(1);
  EnvironmentStatus_RoadSurfaceTypeEnum_descriptor_ = EnvironmentStatus_descriptor_->enum_type(2);
  TrafficLightStatus_descriptor_ = file->message_type(23);
  static const int TrafficLightStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightStatus, green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightStatus, yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightStatus, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightStatus, other_),
  };
  TrafficLightStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficLightStatus_descriptor_,
      TrafficLightStatus::default_instance_,
      TrafficLightStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrafficLightStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightStatus, _internal_metadata_),
      -1);
  TrafficLightStatus_LightStatus_descriptor_ = TrafficLightStatus_descriptor_->enum_type(0);
  ObjectDetection_descriptor_ = file->message_type(24);
  static const int ObjectDetection_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDetection, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDetection, detectedobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDetection, positionoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDetection, movingvector_mps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDetection, objecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDetection, objectsizevector_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDetection, objectsizeaccuracyvector_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDetection, mediaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDetection, trafficlightstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDetection, objectdetectionconfidence_percent_),
  };
  ObjectDetection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectDetection_descriptor_,
      ObjectDetection::default_instance_,
      ObjectDetection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDetection, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObjectDetection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDetection, _internal_metadata_),
      -1);
  ObjectDetection_ObjectTypeEnum_descriptor_ = ObjectDetection_descriptor_->enum_type(0);
  ADServiceAndSensorState_descriptor_ = file->message_type(25);
  static const int ADServiceAndSensorState_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADServiceAndSensorState, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADServiceAndSensorState, adspeedcontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADServiceAndSensorState, adbrakecontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADServiceAndSensorState, adsteeringcontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADServiceAndSensorState, adconnectionavailable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADServiceAndSensorState, sensorobjectrecognition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADServiceAndSensorState, sensorsignrecognition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADServiceAndSensorState, sensorlanerecognition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADServiceAndSensorState, sensorroadsurface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADServiceAndSensorState, sensorenvironment_),
  };
  ADServiceAndSensorState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADServiceAndSensorState_descriptor_,
      ADServiceAndSensorState::default_instance_,
      ADServiceAndSensorState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADServiceAndSensorState, _has_bits_[0]),
      -1,
      -1,
      sizeof(ADServiceAndSensorState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADServiceAndSensorState, _internal_metadata_),
      -1);
  EgoMotion_descriptor_ = file->message_type(26);
  static const int EgoMotion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgoMotion, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgoMotion, egomotionvariant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgoMotion, egoposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgoMotion, egoorientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgoMotion, mediaid_),
  };
  EgoMotion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgoMotion_descriptor_,
      EgoMotion::default_instance_,
      EgoMotion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgoMotion, _has_bits_[0]),
      -1,
      -1,
      sizeof(EgoMotion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgoMotion, _internal_metadata_),
      -1);
  RawGNSSSatData_descriptor_ = file->message_type(27);
  static const int RawGNSSSatData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGNSSSatData, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGNSSSatData, rawgnsssatdatatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGNSSSatData, rawdata_),
  };
  RawGNSSSatData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawGNSSSatData_descriptor_,
      RawGNSSSatData::default_instance_,
      RawGNSSSatData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGNSSSatData, _has_bits_[0]),
      -1,
      -1,
      sizeof(RawGNSSSatData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGNSSSatData, _internal_metadata_),
      -1);
  RawGNSSSatData_RawGNSSSatDataType_descriptor_ = RawGNSSSatData_descriptor_->enum_type(0);
  PathEvents_descriptor_ = file->message_type(28);
  static const int PathEvents_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, vehiclestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, vehicledynamics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, signrecognition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, laneboundaryrecognition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, exceptionalvehiclestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, proprietaryinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, environmentstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, objectdetection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, adserviceandsensorstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, egomotion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, rawgnsssatdata_),
  };
  PathEvents_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathEvents_descriptor_,
      PathEvents::default_instance_,
      PathEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathEvents),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathEvents, _internal_metadata_),
      -1);
  MediaContainer_descriptor_ = file->message_type(29);
  static const int MediaContainer_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContainer, timestamputc_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContainer, mediatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContainer, mediaformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContainer, mediacontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContainer, mediaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContainer, sensoroffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContainer, sensordirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContainer, duration_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContainer, verticalviewingangle_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContainer, horizontalviewingangle_deg_),
  };
  MediaContainer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MediaContainer_descriptor_,
      MediaContainer::default_instance_,
      MediaContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContainer, _has_bits_[0]),
      -1,
      -1,
      sizeof(MediaContainer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContainer, _internal_metadata_),
      -1);
  MediaContainer_MediaTypeEnum_descriptor_ = MediaContainer_descriptor_->enum_type(0);
  PathMedia_descriptor_ = file->message_type(30);
  static const int PathMedia_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathMedia, mediacontainer_),
  };
  PathMedia_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathMedia_descriptor_,
      PathMedia::default_instance_,
      PathMedia_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathMedia, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathMedia),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathMedia, _internal_metadata_),
      -1);
  Message_descriptor_ = file->message_type(31);
  static const int Message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, envelope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, pathevents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, pathmedia_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  WheelReferenceBitfield_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sensoris_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyValuePairString_descriptor_, &KeyValuePairString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3D_descriptor_, &Vector3D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleMetaData_descriptor_, &VehicleMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Envelope_descriptor_, &Envelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PositionEstimate_descriptor_, &PositionEstimate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathSegment_descriptor_, &PathSegment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Path_descriptor_, &Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleStatus_descriptor_, &VehicleStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleDynamics_descriptor_, &VehicleDynamics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PositionOffset_descriptor_, &PositionOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoadSignRestriction_descriptor_, &RoadSignRestriction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignRecognition_descriptor_, &SignRecognition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LinePoint_descriptor_, &LinePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LaneBoundaryRecognition_descriptor_, &LaneBoundaryRecognition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TireSlippageEvent_descriptor_, &TireSlippageEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CrashDetectedEvent_descriptor_, &CrashDetectedEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmergencyBrakingEvent_descriptor_, &EmergencyBrakingEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DynamicStabilityControlEvent_descriptor_, &DynamicStabilityControlEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AntiLockBrakingSystemEvent_descriptor_, &AntiLockBrakingSystemEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ElectronicStabilityControlEvent_descriptor_, &ElectronicStabilityControlEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExceptionalVehicleState_descriptor_, &ExceptionalVehicleState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProprietaryInfo_descriptor_, &ProprietaryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnvironmentStatus_descriptor_, &EnvironmentStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficLightStatus_descriptor_, &TrafficLightStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectDetection_descriptor_, &ObjectDetection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADServiceAndSensorState_descriptor_, &ADServiceAndSensorState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgoMotion_descriptor_, &EgoMotion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawGNSSSatData_descriptor_, &RawGNSSSatData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathEvents_descriptor_, &PathEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MediaContainer_descriptor_, &MediaContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathMedia_descriptor_, &PathMedia::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sensoris_2eproto() {
  delete KeyValuePairString::default_instance_;
  delete KeyValuePairString_reflection_;
  delete Vector3D::default_instance_;
  delete Vector3D_reflection_;
  delete VehicleMetaData::default_instance_;
  delete VehicleMetaData_reflection_;
  delete Envelope::default_instance_;
  delete Envelope_reflection_;
  delete PositionEstimate::default_instance_;
  delete PositionEstimate_reflection_;
  delete PathSegment::default_instance_;
  delete PathSegment_reflection_;
  delete Path::default_instance_;
  delete Path_reflection_;
  delete VehicleStatus::default_instance_;
  delete VehicleStatus_reflection_;
  delete VehicleDynamics::default_instance_;
  delete VehicleDynamics_reflection_;
  delete PositionOffset::default_instance_;
  delete PositionOffset_reflection_;
  delete RoadSignRestriction::default_instance_;
  delete RoadSignRestriction_reflection_;
  delete SignRecognition::default_instance_;
  delete SignRecognition_reflection_;
  delete LinePoint::default_instance_;
  delete LinePoint_reflection_;
  delete LaneBoundaryRecognition::default_instance_;
  delete LaneBoundaryRecognition_reflection_;
  delete TireSlippageEvent::default_instance_;
  delete TireSlippageEvent_reflection_;
  delete CrashDetectedEvent::default_instance_;
  delete CrashDetectedEvent_reflection_;
  delete EmergencyBrakingEvent::default_instance_;
  delete EmergencyBrakingEvent_reflection_;
  delete DynamicStabilityControlEvent::default_instance_;
  delete DynamicStabilityControlEvent_reflection_;
  delete AntiLockBrakingSystemEvent::default_instance_;
  delete AntiLockBrakingSystemEvent_reflection_;
  delete ElectronicStabilityControlEvent::default_instance_;
  delete ElectronicStabilityControlEvent_reflection_;
  delete ExceptionalVehicleState::default_instance_;
  delete ExceptionalVehicleState_reflection_;
  delete ProprietaryInfo::default_instance_;
  delete ProprietaryInfo_reflection_;
  delete EnvironmentStatus::default_instance_;
  delete EnvironmentStatus_reflection_;
  delete TrafficLightStatus::default_instance_;
  delete TrafficLightStatus_reflection_;
  delete ObjectDetection::default_instance_;
  delete ObjectDetection_reflection_;
  delete ADServiceAndSensorState::default_instance_;
  delete ADServiceAndSensorState_reflection_;
  delete EgoMotion::default_instance_;
  delete EgoMotion_reflection_;
  delete RawGNSSSatData::default_instance_;
  delete RawGNSSSatData_reflection_;
  delete PathEvents::default_instance_;
  delete PathEvents_reflection_;
  delete MediaContainer::default_instance_;
  delete MediaContainer_reflection_;
  delete PathMedia::default_instance_;
  delete PathMedia_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_sensoris_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_sensoris_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016sensoris.proto\"0\n\022KeyValuePairString\022\013"
    "\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\242\001\n\010Vector3D\022"
    "\031\n\021longitudinalValue\030\001 \002(\001\022\024\n\014lateralVal"
    "ue\030\002 \002(\001\022\025\n\rverticalValue\030\003 \002(\001\022\034\n\024longi"
    "tudinalAccuracy\030\004 \001(\001\022\026\n\016lateralAccuary\030"
    "\005 \001(\001\022\030\n\020verticalAccuracy\030\006 \001(\001\"\267\006\n\017Vehi"
    "cleMetaData\022C\n\022vehicleTypeGeneric\030\001 \001(\0162"
    "\'.VehicleMetaData.VehicleTypeGenericEnum"
    "\0224\n\027vehicleSpecificMetaData\030\002 \003(\0132\023.KeyV"
    "aluePairString\022/\n\'vehicleReferencePointD"
    "eltaAboveGround_m\030\003 \002(\001\022!\n\025curvatureAccu"
    "racy_1pm\030\004 \001(\001B\002\030\001\022!\n\025slopeAccuracy_perc"
    "ent\030\005 \001(\001B\002\030\001\022\027\n\017vehicleLength_m\030\006 \001(\001\022\026"
    "\n\016vehicleWidth_m\030\007 \001(\001\022\027\n\017vehicleHeight_"
    "m\030\010 \001(\001\022\035\n\025primaryFuelTankVolume\030\t \001(\001\0226"
    "\n\017primaryFuelType\030\n \001(\0162\035.VehicleMetaDat"
    "a.FuelTypeEnum\022\037\n\027secondaryFuelTankVolum"
    "e\030\013 \001(\001\0228\n\021secondaryFuelType\030\014 \001(\0162\035.Veh"
    "icleMetaData.FuelTypeEnum\"\216\001\n\026VehicleTyp"
    "eGenericEnum\022\007\n\003BUS\020\001\022\022\n\016DELIVERY_TRUCK\020"
    "\002\022\025\n\021EMERGENCY_VEHICLE\020\003\022\016\n\nMOTORCYCLE\020\004"
    "\022\021\n\rPASSENGER_CAR\020\005\022\010\n\004TAXI\020\006\022\023\n\017TRANSPO"
    "RT_TRUCK\020\007\"\244\001\n\014FuelTypeEnum\022\023\n\017FUEL_TYPE"
    "_OTHER\020\001\022\030\n\024FUEL_TYPE_GASOLINE_L\020\002\022\026\n\022FU"
    "EL_TYPE_DIESEL_L\020\003\022\030\n\024FUEL_TYPE_AUTOGAS_"
    "KG\020\004\022\030\n\024FUEL_TYPE_BATTERY_AH\020\005\022\031\n\025FUEL_T"
    "YPE_HYDROGEN_KG\020\006\"\217\001\n\010Envelope\022\017\n\007versio"
    "n\030\001 \002(\t\022\021\n\tsubmitter\030\002 \002(\t\022)\n\017vehicleMet"
    "aData\030\003 \002(\0132\020.VehicleMetaData\022\032\n\022transie"
    "ntVehicleID\030\004 \001(\003\022\030\n\020vehicleProfileID\030\005 "
    "\001(\003\"\222\007\n\020PositionEstimate\022\027\n\017timeStampUTC"
    "_ms\030\001 \002(\003\0228\n\014positionType\030\002 \002(\0162\".Positi"
    "onEstimate.PositionTypeEnum\022\031\n\021interpola"
    "tedPoint\030\003 \001(\010\022\025\n\rlongitude_deg\030\004 \002(\001\022\024\n"
    "\014latitude_deg\030\005 \002(\001\022\034\n\024horizontalAccurac"
    "y_m\030\006 \002(\001\022\022\n\naltitude_m\030\007 \001(\001\022\023\n\013heading"
    "_deg\030\010 \001(\001\022\021\n\tspeed_mps\030\t \001(\001\022\032\n\022altitud"
    "eAccuracy_m\030\n \001(\001\022\033\n\023headingAccuracy_deg"
    "\030\013 \001(\001\022\031\n\021speedAccuracy_mps\030\014 \001(\001\022@\n\022spe"
    "edDetectionType\030\r \001(\0162$.PositionEstimate"
    ".SpeedDetectionEnum\022D\n\024headingDetectionT"
    "ype\030\016 \001(\0162&.PositionEstimate.HeadingDete"
    "ctionEnum\0229\n&vehicleReferencedOrientatio"
    "nVector_deg\030\017 \001(\0132\t.Vector3D\022\033\n\023currentL"
    "aneEstimate\030\020 \001(\005\"\177\n\020PositionTypeEnum\022\013\n"
    "\007RAW_GPS\020\001\022\014\n\010FILTERED\020\002\022\033\n\027MAP_MATCHED_"
    "REGULAR_MAP\020\003\022\026\n\022MAP_MATCHED_HD_MAP\020\004\022\033\n"
    "\027MAP_MATCHED_HD_MAP_LANE\020\005\"U\n\022SpeedDetec"
    "tionEnum\022\021\n\rSPEED_RAW_GPS\020\001\022\025\n\021SPEED_WHE"
    "EL_TICKS\020\002\022\025\n\021SPEED_RADAR_SONAR\020\003\"}\n\024Hea"
    "dingDetectionEnum\022\023\n\017HEADING_RAW_GPS\020\001\022\033"
    "\n\027HEADING_MAGNETIC_SENSOR\020\002\022\037\n\033HEADING_M"
    "ULTI_SENSOR_FUSION\020\003\022\022\n\016HEADING_BY_MAP\020\004"
    "\":\n\013PathSegment\022+\n\020positionEstimate\030\001 \003("
    "\0132\021.PositionEstimate\"_\n\004Path\022+\n\020position"
    "Estimate\030\001 \003(\0132\021.PositionEstimate\022*\n\020pos"
    "itionSegments\030\002 \003(\0132\014.PathSegmentB\002\030\001\"\241\t"
    "\n\rVehicleStatus\022\027\n\017timeStampUTC_ms\030\001 \002(\003"
    "\022=\n\020transmissionMode\030\002 \001(\0162#.VehicleStat"
    "us.TransmissionModeEnum\022\032\n\022lightStateBit"
    "field\030\003 \001(\003\0221\n\nwiperState\030\004 \001(\0162\035.Vehicl"
    "eStatus.WiperStateEnum\022#\n\027temperatureExt"
    "ernal_cel\030\005 \001(\001B\002\030\001\022\026\n\016wiperSpeed_wpm\030\006 "
    "\001(\005\022\033\n\023driveWheelReference\030\007 \001(\003\022\032\n\022chas"
    "sisClearance_m\030\010 \001(\001\022\022\n\nmileage_km\030\t \001(\001"
    "\022\030\n\020primaryFuelState\030\n \001(\001\022 \n\030primaryFue"
    "lStateAccuracy\030\013 \001(\001\022 \n\030estimatedPrimary"
    "Range_km\030\014 \001(\001\022\032\n\022secondaryFuelState\030\r \001"
    "(\001\022\"\n\032secondaryFuelStateAccuracy\030\016 \001(\001\022\""
    "\n\032estimatedSecondaryRange_km\030\017 \001(\001\022K\n\025ma"
    "intenanceLightState\030\020 \001(\0162,.VehicleStatu"
    "s.MaintenanceLightStateBitfield\"F\n\024Trans"
    "missionModeEnum\022\010\n\004PARK\020\001\022\014\n\010COASTING\020\002\022"
    "\t\n\005DRIVE\020\003\022\013\n\007REVERSE\020\004\"\201\001\n\022LightStateBi"
    "tfield\022\014\n\010LOWBEAMS\020\001\022\r\n\tHIGHBEAMS\020\002\022\021\n\rF"
    "OGLAMP_FRONT\020\004\022\020\n\014FOGLAMP_REAR\020\010\022\n\n\006HAZA"
    "RD\020\020\022\r\n\tLEFT_TURN\020 \022\016\n\nRIGHT_TURN\020@\"k\n\016W"
    "iperStateEnum\022\016\n\nWIPING_OFF\020\001\022\017\n\013WIPING_"
    "SLOW\020\002\022\021\n\rWIPING_MEDIUM\020\003\022\017\n\013WIPING_FAST"
    "\020\004\022\024\n\020WIPING_INTERVALL\020\005\"\226\002\n\035Maintenance"
    "LightStateBitfield\022\032\n\026WARNING_ENGINE_CON"
    "TROL\020\001\022\030\n\024WARNING_OIL_PRESSURE\020\002\022\030\n\024WARN"
    "ING_COOLANT_TEMP\020\004\022\033\n\027WARNING_VEHICLE_SE"
    "RVICE\020\010\022\034\n\030WARNING_BATTERY_CHARGING\020\020\022\031\n"
    "\025WARNING_TIRE_PRESSURE\020 \022\024\n\020WARNING_LAMP"
    "_OUT\020@\022\034\n\027WARNING_OTHER_HIGH_PRIO\020\200\001\022\033\n\026"
    "WARNING_OTHER_LOW_PRIO\020\200\002\"\373\002\n\017VehicleDyn"
    "amics\022\027\n\017timeStampUTC_ms\030\001 \002(\003\022\025\n\rcurvat"
    "ure_1pm\030\002 \001(\001\022\025\n\rslope_percent\030\003 \001(\001\022\035\n\025"
    "curvatureAccuracy_1pm\030\004 \001(\001\022\035\n\025slopeAccu"
    "racy_percent\030\005 \001(\001\022\"\n\032averageSuspensionT"
    "ravel_mm\030\006 \001(\005\0221\n\036averageAccelerationVec"
    "tor_mps2\030\007 \001(\0132\t.Vector3D\0222\n\037averageRota"
    "tionRateVector_omega\030\010 \001(\0132\t.Vector3D\022*\n"
    "\026averageSpeedVector_mps\030\350\007 \001(\0132\t.Vector3"
    "D\022,\n\030relativePositionVector_m\030\351\007 \001(\0132\t.V"
    "ector3D\"\345\004\n\016PositionOffset\022\027\n\017lateralOff"
    "set_m\030\001 \001(\001\022D\n\023lateralOffsetSimple\030\002 \001(\016"
    "2\'.PositionOffset.LateralOffsetSimpleEnu"
    "m\022\034\n\024longitudinalOffset_m\030\003 \001(\001\022N\n\030longi"
    "tudinalOffsetSimple\030\004 \001(\0162,.PositionOffs"
    "et.LongitudinalOffsetSimpleEnum\022\030\n\020verti"
    "calOffset_m\030\005 \001(\001\022F\n\024verticalOffsetSimpl"
    "e\030\006 \001(\0162(.PositionOffset.VerticalOffsetS"
    "impleEnum\022\037\n\027lateralOffsetAccuracy_m\030\007 \001"
    "(\001\022$\n\034longitudinalOffsetAccuracy_m\030\010 \001(\001"
    "\022 \n\030verticalOffsetAccuracy_m\030\t \001(\001\":\n\027La"
    "teralOffsetSimpleEnum\022\010\n\004LEFT\020\001\022\n\n\006MIDDL"
    "E\020\002\022\t\n\005RIGHT\020\003\"\?\n\034LongitudinalOffsetSimp"
    "leEnum\022\t\n\005FRONT\020\001\022\n\n\006CENTER\020\002\022\010\n\004BACK\020\003\""
    ">\n\030VerticalOffsetSimpleEnum\022\t\n\005ABOVE\020\001\022\014"
    "\n\010AT_LEVEL\020\002\022\t\n\005BELOW\020\003\"\252\005\n\023RoadSignRest"
    "riction\022=\n\017restrictionType\030\001 \002(\0162$.RoadS"
    "ignRestriction.RestrictionType\022\030\n\020restri"
    "ctionValue\030\002 \001(\t\022%\n\035restrictionConfidenc"
    "e_percent\030\003 \001(\r\"\222\004\n\017RestrictionType\022\010\n\004R"
    "AIN\020\001\022\010\n\004SNOW\020\002\022\010\n\004TIME\020\003\022\n\n\006SEASON\020\004\022\007\n"
    "\003FOG\020\005\022\n\n\006SCHOOL\020\006\022\n\n\006TRUCKS\020\007\022\013\n\007TRAILE"
    "R\020\010\022\017\n\013STARTING_IN\020e\022\r\n\tVALID_FOR\020f\022\026\n\022I"
    "N_RIGHT_DIRECTION\020g\022\025\n\021IN_LEFT_DIRECTION"
    "\020h\022\010\n\004ZONE\020i\022\020\n\013ANY_PICTURE\020\350\007\022\r\n\010ANY_TE"
    "XT\020\351\007\022\024\n\017ANY_RESTRICTION\020\352\007\022\014\n\007GARBAGE\020\353"
    "\007\022\n\n\005NIGHT\020\354\007\022\r\n\010WORKDAYS\020\355\007\022\026\n\021WORKDAYS"
    "_AND_TIME\020\356\007\022\025\n\020MON2FRI_AND_TIME\020\357\007\022\017\n\nM"
    "OTORCYCLE\020\360\007\022\032\n\025PASSENGER_CAR_TRAILER\020\361\007"
    "\022\033\n\026TRACTORS_MAY_BE_PASSED\020\362\007\022\032\n\025TRUCK_B"
    "US_CAR_TRAILER\020\363\007\022\013\n\006WEIGHT\020\364\007\022\010\n\003WET\020\365\007"
    "\022\010\n\003ICY\020\366\007\022\n\n\005X_WAY\020\367\007\022\022\n\rPASSENGER_CAR\020"
    "\370\007\022\030\n\023UNKNOWN_RESTRICTION\020\217N\"\321%\n\017SignRec"
    "ognition\022\027\n\017timeStampUTC_ms\030\001 \002(\003\022\'\n\016pos"
    "itionOffset\030\002 \001(\0132\017.PositionOffset\0227\n\014ro"
    "adSignType\030\003 \002(\0162!.SignRecognition.RoadS"
    "ignTypeEnum\022C\n\022roadSignPermanency\030\004 \001(\0162"
    "\'.SignRecognition.RoadSignPermanencyEnum"
    "\022\025\n\rroadSignValue\030\005 \001(\t\022G\n\024roadSignDepen"
    "dencies\030\006 \001(\0162).SignRecognition.RoadSign"
    "DependenciesEnum\022\?\n\020roadSignValidity\030\007 \001"
    "(\0162%.SignRecognition.RoadSignValidityEnu"
    "m\022\035\n\025roadSignValidityValue\030\010 \001(\t\022M\n\027road"
    "SignRecognitionType\030\t \001(\0162,.SignRecognit"
    "ion.RoadSignRecognitionTypeEnum\022\030\n\020detec"
    "tedObjectID\030\n \001(\003\022\017\n\007mediaID\030\013 \001(\003\022-\n%ro"
    "adSignRecognitionConfidence_percent\030\014 \001("
    "\r\0223\n\024roadSignRestrictions\030\351\007 \003(\0132\024.RoadS"
    "ignRestriction\"\225\033\n\020RoadSignTypeEnum\022\025\n\021S"
    "PEED_LIMIT_START\020\001\022\023\n\017SPEED_LIMIT_END\020\002\022"
    "&\n\"NO_OVERTAKING_PASSENGER_CARS_START\020\003\022"
    "$\n NO_OVERTAKING_PASSENGER_CARS_END\020\004\022\036\n"
    "\032NO_OVERTAKING_TRUCKS_START\020\005\022\034\n\030NO_OVER"
    "TAKING_TRUCKS_END\020\006\022\030\n\024ALL_RESTRICTIONS_"
    "END\020\007\022\016\n\nCITY_START\020\010\022\014\n\010CITY_END\020\t\022\022\n\016M"
    "OTORWAY_START\020\n\022\020\n\014MOTORWAY_END\020\013\022\026\n\022CON"
    "STRUCTION_START\020\014\022\024\n\020CONSTRUCTION_END\020\r\022"
    "\"\n\036PROTECTED_OVERTAKING_EXTRALANE\020\016\022,\n(P"
    "ROTECTED_OVERTAKING_EXTRALANE_RIGHTSIDE\020"
    "\017\022+\n\'PROTECTED_OVERTAKING_EXTRALANE_LEFT"
    "SIDE\020\020\022\024\n\020LANE_MERGE_RIGHT\020\021\022\023\n\017LANE_MER"
    "GE_LEFT\020\022\022\025\n\021LANE_MERGE_CENTER\020\023\022\036\n\032RAIL"
    "WAY_CROSSING_PROTECTED\020\024\022 \n\034RAILWAY_CROS"
    "SING_UNPROTECTED\020\025\022\020\n\014ROAD_NARROWS\020\026\022\017\n\013"
    "SHARP_CURVE\020\027\022\024\n\020SHARP_CURVE_LEFT\020\030\022\025\n\021S"
    "HARP_CURVE_RIGHT\020\031\022\036\n\032WINDING_ROAD_START"
    "ING_LEFT\020\032\022\037\n\033WINDING_ROAD_STARTING_RIGH"
    "T\020\033\022\016\n\nSTEEP_HILL\020\034\022\026\n\022STEEP_HILL_UPWARD"
    "S\020\035\022\030\n\024STEEP_HILL_DOWNWARDS\020\036\022\r\n\tSTOP_SI"
    "GN\020\037\022\020\n\014LATERAL_WIND\020 \022\023\n\017GENERAL_WARNIN"
    "G\020!\022\025\n\021RISK_OF_GROUNDING\020\"\022\023\n\017ANIMAL_CRO"
    "SSING\020#\022\022\n\016ICY_CONDITIONS\020$\022\021\n\rSLIPPERY_"
    "ROAD\020%\022\021\n\rFALLING_ROCKS\020&\022\017\n\013SCHOOL_ZONE"
    "\020\'\022\024\n\020TRAMWAY_CROSSING\020(\022\025\n\021CONGESTION_H"
    "AZARD\020)\022\023\n\017ACCIDENT_HAZARD\020*\022\"\n\036PRIORITY"
    "_OVER_ONCOMING_TRAFFIC\020+\022\035\n\031YIELD_TO_ONC"
    "OMING_TRAFFIC\020,\022\031\n\025PREFERENCE_ROAD_START"
    "\020-\022\027\n\023PREFERENCE_ROAD_END\020.\022\035\n\030ENVIRONME"
    "NTAL_ZONE_START\020\350\007\022\033\n\026ENVIRONMENTAL_ZONE"
    "_END\020\351\007\022\033\n\026RESIDENTIAL_AREA_START\020\352\007\022\031\n\024"
    "RESIDENTIAL_AREA_END\020\353\007\022\022\n\rHIGHWAY_START"
    "\020\354\007\022\020\n\013HIGHWAY_END\020\355\007\022\017\n\nZONE_START\020\356\007\022\r"
    "\n\010ZONE_END\020\357\007\022\017\n\nROUNDABOUT\020\360\007\022\031\n\024PASS_T"
    "HIS_SIDE_RIGHT\020\361\007\022\030\n\023PASS_THIS_SIDE_LEFT"
    "\020\362\007\022\r\n\010NO_ENTRY\020\363\007\022#\n\036ENVIRONMENTAL_ZONE"
    "_GREEN_START\020\364\007\022\020\n\013UNEVEN_ROAD\020\366\007\022\034\n\027GEN"
    "ERAL_PRIORITIES_RULE\020\370\007\022\027\n\022DANGER_NARROW"
    "_ROAD\020\371\007\022\024\n\017DANGER_CHILDREN\020\372\007\022\027\n\022DANGER"
    "_PEDESTRIANS\020\373\007\022\023\n\016DANGER_CYCLIST\020\374\007\022\026\n\021"
    "ROAD_NARROWS_LEFT\020\376\007\022\027\n\022ROAD_NARROWS_RIG"
    "HT\020\377\007\022\013\n\006GRAVEL\020\314\010\022\027\n\022CONTRAFLOW_TRAFFIC"
    "\020\315\010\022\017\n\nDRAWBRIDGE\020\316\010\022\r\n\010QUAYWALL\020\317\010\022\021\n\014T"
    "RAFFICLIGHT\020\320\010\022\032\n\025ZEBRA_CROSSING_HAZARD\020"
    "\321\010\022\024\n\017CATTLE_CROSSING\020\322\010\022\024\n\017PLANES_CROSS"
    "ING\020\323\010\022\021\n\014BUS_CROSSING\020\324\010\022&\n!PRECEDENCE_"
    "FOR_CONTRAFLOW_TRAFFIC\020\325\010\022\016\n\tTURN_LEFT\020\326"
    "\010\022\017\n\nTURN_RIGHT\020\327\010\022\014\n\007NO_TURN\020\330\010\022\027\n\022TURN"
    "_LEFT_OR_RIGHT\020\331\010\022\017\n\nDRIVE_LEFT\020\332\010\022\020\n\013DR"
    "IVE_RIGHT\020\333\010\022\022\n\rNO_TURN_RIGHT\020\334\010\022\021\n\014NO_T"
    "URN_LEFT\020\335\010\022\020\n\013ONEWAY_LEFT\020\336\010\022\021\n\014ONEWAY_"
    "RIGHT\020\337\010\022\014\n\007BUSSTOP\020\340\010\022\021\n\014BICYCLE_LANE\020\341"
    "\010\022\025\n\020HORSERIDING_LANE\020\342\010\022\024\n\017PEDESTRIAN_L"
    "ANE\020\343\010\022 \n\033PEDESTRIAN_AND_BICYCLE_LANE\020\344\010"
    "\022$\n\037BICYCLE_BESIDES_PEDESTRIAN_LANE\020\345\010\022$"
    "\n\037PEDESTRIAN_BESIDES_BICYCLE_LANE\020\346\010\022\032\n\025"
    "PEDESTRIAN_ZONE_START\020\347\010\022\030\n\023PEDESTRIAN_Z"
    "ONE_END\020\350\010\022\027\n\022BICYCLE_ZONE_START\020\351\010\022\025\n\020B"
    "ICYCLE_ZONE_END\020\352\010\022\032\n\025NO_PARKING_ZONE_ST"
    "ART\020\353\010\022\030\n\023NO_PARKING_ZONE_END\020\354\010\022\r\n\010BUS_"
    "LANE\020\355\010\022\025\n\020NO_MOTORVEHICLES\020\356\010\022\016\n\tNO_TRU"
    "CKS\020\357\010\022\017\n\nNO_BICYCLE\020\360\010\022\022\n\rNO_MOTORCYCLE"
    "\020\361\010\022\017\n\nNO_SCOOTER\020\362\010\022\023\n\016NO_HORSERIDING\020\363"
    "\010\022\023\n\016NO_PEDESTRIANS\020\364\010\022$\n\037NO_MOTORVEHICL"
    "ES_AND_MOTORCYCLE\020\365\010\022\026\n\021NO_DANGEROUSGOOD"
    "S\020\366\010\022\026\n\021RESTRICTED_WEIGHT\020\367\010\022\033\n\026RESTRICT"
    "ED_AXLE_WEIGHT\020\370\010\022\025\n\020RESTRICTED_WIDTH\020\371\010"
    "\022\026\n\021RESTRICTED_HEIGHT\020\372\010\022\026\n\021RESTRICTED_L"
    "ENGTH\020\373\010\022\032\n\025SNOW_CHAINS_MANDATORY\020\374\010\022\035\n\030"
    "NO_WATER_HAZARDOUS_GOODS\020\375\010\022\r\n\010NO_UTURN\020"
    "\376\010\022\"\n\035PROHIBITED_MINIMUM_GAP_DECEED\020\377\010\022\""
    "\n\035MANDATORY_MINIMUM_SPEED_START\020\200\t\022 \n\033MA"
    "NDATORY_MINIMUM_SPEED_END\020\201\t\022\030\n\023NO_STOPP"
    "ING_TO_LEFT\020\202\t\022\031\n\024NO_STOPPING_TO_RIGHT\020\203"
    "\t\022\030\n\023NO_STOPPING_TO_BOTH\020\204\t\022\020\n\013NO_STOPPI"
    "NG\020\205\t\022\027\n\022NO_PARKING_TO_LEFT\020\206\t\022\030\n\023NO_PAR"
    "KING_TO_RIGHT\020\207\t\022\027\n\022NO_PARKING_TO_BOTH\020\210"
    "\t\022\017\n\nNO_PARKING\020\211\t\022%\n PRIORITY_OVER_CONT"
    "RAFLOW_TRAFFIC\020\212\t\022\023\n\016ZEBRA_CROSSING\020\213\t\022\016"
    "\n\tHAF_RIGHT\020\214\t\022\r\n\010HAF_LEFT\020\215\t\022\034\n\027ROADMAR"
    "K_ARROW_STRAIGHT\020\260\t\022\030\n\023ROADMARK_ARROW_LE"
    "FT\020\261\t\022\031\n\024ROADMARK_ARROW_RIGHT\020\262\t\022 \n\033ROAD"
    "MARK_ARROW_STRAIGHTLEFT\020\263\t\022!\n\034ROADMARK_A"
    "RROW_STRAIGHTRIGHT\020\264\t\022\035\n\030ROADMARK_ARROW_"
    "LEFTRIGHT\020\265\t\022\035\n\030ROADMARK_ARROW_MERGELEFT"
    "\020\266\t\022\036\n\031ROADMARK_ARROW_MERGERIGHT\020\267\t\022\021\n\014U"
    "NKNOWN_SIGN\020\217N\"2\n\026RoadSignPermanencyEnum"
    "\022\n\n\006STATIC\020\001\022\014\n\010VARIABLE\020\002\"\301\003\n\030RoadSignD"
    "ependenciesEnum\022\010\n\004RAIN\020\001\022\010\n\004SNOW\020\002\022\010\n\004T"
    "IME\020\003\022\n\n\006SEASON\020\004\022\007\n\003FOG\020\005\022\n\n\006SCHOOL\020\006\022\n"
    "\n\006TRUCKS\020\007\022\013\n\007TRAILER\020\010\022\020\n\013ANY_PICTURE\020\350"
    "\007\022\r\n\010ANY_TEXT\020\351\007\022\024\n\017ANY_RESTRICTION\020\352\007\022\014"
    "\n\007GARBAGE\020\353\007\022\n\n\005NIGHT\020\354\007\022\r\n\010WORKDAYS\020\355\007\022"
    "\026\n\021WORKDAYS_AND_TIME\020\356\007\022\025\n\020MON2FRI_AND_T"
    "IME\020\357\007\022\017\n\nMOTORCYCLE\020\360\007\022\032\n\025PASSENGER_CAR"
    "_TRAILER\020\361\007\022\033\n\026TRACTORS_MAY_BE_PASSED\020\362\007"
    "\022\032\n\025TRUCK_BUS_CAR_TRAILER\020\363\007\022\013\n\006WEIGHT\020\364"
    "\007\022\010\n\003WET\020\365\007\022\010\n\003ICY\020\366\007\022\n\n\005X_WAY\020\367\007\022\022\n\rPAS"
    "SENGER_CAR\020\370\007\022\027\n\022UNKNOWN_DEPENDENCY\020\217N\"\206"
    "\001\n\024RoadSignValidityEnum\022\017\n\013STARTING_IN\020\001"
    "\022\r\n\tVALID_FOR\020\002\022\026\n\022IN_RIGHT_DIRECTION\020\003\022"
    "\025\n\021IN_LEFT_DIRECTION\020\004\022\010\n\004ZONE\020\005\022\025\n\020UNKN"
    "OWN_VALIDITY\020\217N\"G\n\033RoadSignRecognitionTy"
    "peEnum\022\021\n\rSIGN_DETECTED\020\001\022\025\n\021SIGN_NOT_DE"
    "TECTED\020\002\"\236\001\n\tLinePoint\022\'\n\016positionOffset"
    "\030\001 \002(\0132\017.PositionOffset\0223\n\rlinePointType"
    "\030\002 \001(\0162\034.LinePoint.LinePointTypeEnum\"3\n\021"
    "LinePointTypeEnum\022\t\n\005START\020\001\022\007\n\003END\020\002\022\n\n"
    "\006MIDDLE\020\003\"\313\006\n\027LaneBoundaryRecognition\022\027\n"
    "\017timeStampUTC_ms\030\001 \002(\003\022\'\n\016positionOffset"
    "\030\002 \002(\0132\017.PositionOffset\022G\n\020laneBoundaryT"
    "ype\030\003 \001(\0162-.LaneBoundaryRecognition.Lane"
    "BoundaryTypeEnum\022I\n\021laneBoundaryColor\030\004 "
    "\001(\0162..LaneBoundaryRecognition.LaneBounda"
    "ryColorEnum\022\025\n\rcurvature_1pm\030\005 \001(\001\022\032\n\022la"
    "neMarkerWidth_mm\030\006 \001(\005\022\"\n\032laneMarkerWidt"
    "hAccuracy_mm\030\007 \001(\005\022\033\n\023laneDeclination_de"
    "g\030\010 \001(\001\022#\n\033laneDeclinationAccuracy_deg\030\t"
    " \001(\001\022*\n\"laneBoundaryTypeConfidence_perce"
    "nt\030\n \001(\005\022\036\n\tlinePoint\030\350\007 \003(\0132\n.LinePoint"
    "\022\"\n\016LM_Orientation\030\351\007 \001(\0132\t.Vector3D\"\226\002\n"
    "\024LaneBoundaryTypeEnum\022\026\n\022SINGLE_SOLID_PA"
    "INT\020\001\022\026\n\022DOUBLE_SOLID_PAINT\020\002\022\025\n\021LONG_DA"
    "SHED_PAINT\020\003\022\026\n\022SHORT_DASHED_PAINT\020\004\022\025\n\021"
    "SHADED_AREA_PAINT\020\005\022\021\n\rDASHED_BLOCKS\020\006\022\""
    "\n\036DOUBLE_LINE_DASHED_SOLID_PAINT\020\007\022\"\n\036DO"
    "UBLE_LINE_SOLID_DASHED_PAINT\020\010\022\024\n\020PHYSIC"
    "AL_DIVIDER\020\t\022\027\n\023DOUBLE_DASHED_LINES\020\n\"8\n"
    "\025LaneBoundaryColorEnum\022\t\n\005WHITE\020\001\022\n\n\006YEL"
    "LOW\020\002\022\010\n\004BLUE\020\003\"\023\n\021TireSlippageEvent\"\260\001\n"
    "\022CrashDetectedEvent\022\031\n\021vehicleIsDrivable"
    "\030\001 \001(\010\022\027\n\017airbagsDeployed\030\002 \001(\010\022\026\n\016eCall"
    "Activated\030\003 \001(\010\022\037\n\027vehicleIsObstacleOnRo"
    "ad\030\004 \001(\010\022-\n\032maxAccelerationVector_mps2\030\005"
    " \001(\0132\t.Vector3D\"F\n\025EmergencyBrakingEvent"
    "\022-\n\032maxAccelerationVector_mps2\030\001 \001(\0132\t.V"
    "ector3D\"\036\n\034DynamicStabilityControlEvent\""
    "\034\n\032AntiLockBrakingSystemEvent\"\357\001\n\037Electr"
    "onicStabilityControlEvent\022\033\n\023antiSlipAct"
    "ionEvent\030\001 \001(\010\022\033\n\023antiLockActionEvent\030\002 "
    "\001(\010\022\'\n\037electronicStabilityControlEvent\030\003"
    " \001(\010\0223\n requestedAccelerationVector_mps2"
    "\030\004 \001(\0132\t.Vector3D\0224\n!requestedRotationRa"
    "teVector_omega\030\005 \001(\0132\t.Vector3D\"\210\003\n\027Exce"
    "ptionalVehicleState\022\027\n\017timeStampUTC_ms\030\001"
    " \002(\003\022,\n\014tireSlippage\030\002 \001(\0132\022.TireSlippag"
    "eEventB\002\030\001\022*\n\rcrashDetected\030\003 \001(\0132\023.Cras"
    "hDetectedEvent\0220\n\020emergencyBraking\030\004 \001(\013"
    "2\026.EmergencyBrakingEvent\022B\n\027dynamicStabi"
    "lityControl\030\005 \001(\0132\035.DynamicStabilityCont"
    "rolEventB\002\030\001\022>\n\025antiLockBrakingSystem\030\006 "
    "\001(\0132\033.AntiLockBrakingSystemEventB\002\030\001\022D\n\032"
    "electronicStabilityControl\030\007 \001(\0132 .Elect"
    "ronicStabilityControlEvent\"V\n\017Proprietar"
    "yInfo\022\027\n\017timeStampUTC_ms\030\001 \002(\003\022*\n\rkeyVal"
    "uePairs\030\002 \003(\0132\023.KeyValuePairString\"\351\005\n\021E"
    "nvironmentStatus\022\027\n\017timeStampUTC_ms\030\001 \002("
    "\003\022\?\n\017lightConditions\030\002 \001(\0162&.Environment"
    "Status.LightConditionsEnum\022#\n\033externalAi"
    "rTemperature_DegC\030\003 \001(\001\022+\n#externalAirTe"
    "mperatureAccuracy_DegC\030\004 \001(\001\022;\n\rprecipit"
    "ation\030\005 \001(\0162$.EnvironmentStatus.Precipit"
    "ationEnum\022\031\n\021visibleDistance_m\030\006 \001(\001\022#\n\033"
    "roadSurfaceTemperature_DegC\030\007 \001(\001\022+\n#roa"
    "dSurfaceTemperatureAccuracy_DegC\030\010 \001(\001\022\?"
    "\n\017roadSurfaceType\030\t \001(\0162&.EnvironmentSta"
    "tus.RoadSurfaceTypeEnum\"\232\001\n\023LightConditi"
    "onsEnum\022\024\n\020GENERAL_DAYLIGHT\020\001\022\020\n\014GENERAL"
    "_DARK\020\002\022\020\n\014DAYLIGHT_SUN\020\003\022\022\n\016DAYLIGHT_CL"
    "OUD\020\004\022\020\n\014DUSK_OR_DAWN\020\005\022\023\n\017NIGHT_LUMINAT"
    "ED\020\006\022\016\n\nNIGHT_DARK\020\007\";\n\021PrecipitationEnu"
    "m\022\010\n\004NONE\020\001\022\010\n\004RAIN\020\002\022\010\n\004HAIL\020\003\022\010\n\004SNOW\020"
    "\004\"c\n\023RoadSurfaceTypeEnum\022\013\n\007ASPHALT\020\001\022\014\n"
    "\010CONCRETE\020\002\022\t\n\005PAVED\020\003\022\n\n\006GRAVEL\020\004\022\r\n\tIC"
    "EORSNOW\020\005\022\013\n\007UNKNOWN\020\006\"\201\002\n\022TrafficLightS"
    "tatus\022.\n\005green\030\001 \001(\0162\037.TrafficLightStatu"
    "s.LightStatus\022/\n\006yellow\030\002 \001(\0162\037.TrafficL"
    "ightStatus.LightStatus\022,\n\003red\030\003 \001(\0162\037.Tr"
    "afficLightStatus.LightStatus\022.\n\005other\030\004 "
    "\001(\0162\037.TrafficLightStatus.LightStatus\",\n\013"
    "LightStatus\022\007\n\003OFF\020\001\022\006\n\002ON\020\002\022\014\n\010BLINKING"
    "\020\003\"\302\006\n\017ObjectDetection\022\027\n\017timeStampUTC_m"
    "s\030\001 \002(\003\022\030\n\020detectedObjectID\030\002 \001(\003\022\'\n\016pos"
    "itionOffset\030\003 \001(\0132\017.PositionOffset\022#\n\020mo"
    "vingVector_mps\030\004 \001(\0132\t.Vector3D\0223\n\nobjec"
    "tType\030\005 \001(\0162\037.ObjectDetection.ObjectType"
    "Enum\022%\n\022objectSizeVector_m\030\006 \001(\0132\t.Vecto"
    "r3D\022-\n\032objectSizeAccuracyVector_m\030\007 \001(\0132"
    "\t.Vector3D\022\017\n\007mediaID\030\010 \001(\003\0220\n\022trafficLi"
    "ghtStatus\030\350\007 \001(\0132\023.TrafficLightStatus\022*\n"
    "!objectDetectionConfidence_percent\030\351\007 \001("
    "\r\"\263\003\n\016ObjectTypeEnum\022\022\n\016MOVING_GENERAL\020\001"
    "\022\022\n\016STATIC_GENERAL\020\002\022\033\n\027STATIC_GENERAL_V"
    "ERTICAL\020\003\022\036\n\032STATIC_GENERAL_TRANSVERSAL\020"
    "\004\022\032\n\026STATIC_GENERAL_LATERAL\020\005\022\022\n\016MOVING_"
    "VEHICLE\020\006\022\020\n\014MOVING_TRUCK\020\007\022\017\n\013MOVING_BI"
    "KE\020\010\022\021\n\rMOVING_PERSON\020\t\022\021\n\rSTATIC_BRIDGE"
    "\020\n\022\021\n\rSTATIC_TUNNEL\020\013\022\017\n\013STATIC_POLE\020\014\022\016"
    "\n\nSTATIC_BAR\020\r\022\017\n\013STATIC_TREE\020\016\022\017\n\013STATI"
    "C_WALL\020\017\022\022\n\016STATIC_BOLLARD\020\020\022\024\n\020STATIC_G"
    "UIDERAIL\020\021\022\030\n\024STATIC_TRAFFICISLAND\020\022\022\017\n\013"
    "STATIC_SIGN\020\023\022\030\n\024STATIC_TRAFFIC_LIGHT\020\024\""
    "\261\002\n\027ADServiceAndSensorState\022\027\n\017timeStamp"
    "UTC_ms\030\001 \002(\003\022\026\n\016adSpeedControl\030\002 \001(\010\022\026\n\016"
    "adBrakeControl\030\003 \001(\010\022\031\n\021adSteeringContro"
    "l\030\004 \001(\010\022\035\n\025adConnectionAvailable\030\005 \001(\010\022\037"
    "\n\027sensorObjectRecognition\030\006 \001(\010\022\035\n\025senso"
    "rSignRecognition\030\007 \001(\010\022\035\n\025sensorLaneReco"
    "gnition\030\010 \001(\010\022\031\n\021sensorRoadSurface\030\t \001(\010"
    "\022\031\n\021sensorEnvironment\030\n \001(\010\"\230\001\n\tEgoMotio"
    "n\022\027\n\017timeStampUTC_ms\030\001 \002(\003\022\030\n\020egoMotionV"
    "ariant\030\002 \001(\003\022$\n\013egoPosition\030\003 \001(\0132\017.Posi"
    "tionOffset\022!\n\016egoOrientation\030\004 \001(\0132\t.Vec"
    "tor3D\022\017\n\007mediaID\030\010 \001(\003\"\233\001\n\016RawGNSSSatDat"
    "a\022\027\n\017timeStampUTC_ms\030\001 \002(\003\022>\n\022rawGNSSSat"
    "DataType\030\002 \002(\0162\".RawGNSSSatData.RawGNSSS"
    "atDataType\022\017\n\007rawData\030\003 \001(\014\"\037\n\022RawGNSSSa"
    "tDataType\022\t\n\005RINEX\020\001\"\211\004\n\nPathEvents\022%\n\rv"
    "ehicleStatus\030\001 \003(\0132\016.VehicleStatus\022)\n\017ve"
    "hicleDynamics\030\002 \003(\0132\020.VehicleDynamics\022)\n"
    "\017signRecognition\030\003 \003(\0132\020.SignRecognition"
    "\0229\n\027laneBoundaryRecognition\030\004 \003(\0132\030.Lane"
    "BoundaryRecognition\0229\n\027exceptionalVehicl"
    "eState\030\005 \003(\0132\030.ExceptionalVehicleState\022)"
    "\n\017proprietaryInfo\030\006 \003(\0132\020.ProprietaryInf"
    "o\022-\n\021environmentStatus\030\007 \003(\0132\022.Environme"
    "ntStatus\022)\n\017objectDetection\030\010 \003(\0132\020.Obje"
    "ctDetection\0229\n\027adServiceAndSensorState\030\t"
    " \003(\0132\030.ADServiceAndSensorState\022\036\n\tegoMot"
    "ion\030\350\007 \003(\0132\n.EgoMotion\022(\n\016rawGNSSSatData"
    "\030\351\007 \003(\0132\017.RawGNSSSatData\"\371\002\n\016MediaContai"
    "ner\022\027\n\017timeStampUTC_ms\030\001 \002(\003\0220\n\tmediaTyp"
    "e\030\002 \002(\0162\035.MediaContainer.MediaTypeEnum\022\023"
    "\n\013mediaFormat\030\003 \002(\t\022\024\n\014mediaContent\030\004 \002("
    "\014\022\017\n\007mediaID\030\005 \001(\003\022%\n\014sensorOffset\030\006 \001(\013"
    "2\017.PositionOffset\022\"\n\017sensorDirection\030\007 \001"
    "(\0132\t.Vector3D\022\022\n\nduration_s\030\010 \001(\005\022 \n\030ver"
    "ticalViewingAngle_deg\030\t \001(\001\022\"\n\032horizonta"
    "lViewingAngle_deg\030\n \001(\001\";\n\rMediaTypeEnum"
    "\022\t\n\005OTHER\020\001\022\t\n\005IMAGE\020\002\022\t\n\005VIDEO\020\003\022\t\n\005AUD"
    "IO\020\004\"4\n\tPathMedia\022\'\n\016mediaContainer\030\001 \003("
    "\0132\017.MediaContainer\"{\n\007Message\022\033\n\010envelop"
    "e\030\001 \002(\0132\t.Envelope\022\023\n\004path\030\002 \002(\0132\005.Path\022"
    "\037\n\npathEvents\030\003 \001(\0132\013.PathEvents\022\035\n\tpath"
    "Media\030\004 \001(\0132\n.PathMedia*d\n\026WheelReferenc"
    "eBitfield\022\021\n\rfrontAxleLeft\020\001\022\022\n\016frontAxl"
    "eRight\020\002\022\020\n\014rearAxleLeft\020\004\022\021\n\rrearAxleRi"
    "ght\020\010B+\n\032cloud.continental.sensorisB\rSen"
    "sorisProto", 15730);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris.proto", &protobuf_RegisterTypes);
  KeyValuePairString::default_instance_ = new KeyValuePairString();
  Vector3D::default_instance_ = new Vector3D();
  VehicleMetaData::default_instance_ = new VehicleMetaData();
  Envelope::default_instance_ = new Envelope();
  PositionEstimate::default_instance_ = new PositionEstimate();
  PathSegment::default_instance_ = new PathSegment();
  Path::default_instance_ = new Path();
  VehicleStatus::default_instance_ = new VehicleStatus();
  VehicleDynamics::default_instance_ = new VehicleDynamics();
  PositionOffset::default_instance_ = new PositionOffset();
  RoadSignRestriction::default_instance_ = new RoadSignRestriction();
  SignRecognition::default_instance_ = new SignRecognition();
  LinePoint::default_instance_ = new LinePoint();
  LaneBoundaryRecognition::default_instance_ = new LaneBoundaryRecognition();
  TireSlippageEvent::default_instance_ = new TireSlippageEvent();
  CrashDetectedEvent::default_instance_ = new CrashDetectedEvent();
  EmergencyBrakingEvent::default_instance_ = new EmergencyBrakingEvent();
  DynamicStabilityControlEvent::default_instance_ = new DynamicStabilityControlEvent();
  AntiLockBrakingSystemEvent::default_instance_ = new AntiLockBrakingSystemEvent();
  ElectronicStabilityControlEvent::default_instance_ = new ElectronicStabilityControlEvent();
  ExceptionalVehicleState::default_instance_ = new ExceptionalVehicleState();
  ProprietaryInfo::default_instance_ = new ProprietaryInfo();
  EnvironmentStatus::default_instance_ = new EnvironmentStatus();
  TrafficLightStatus::default_instance_ = new TrafficLightStatus();
  ObjectDetection::default_instance_ = new ObjectDetection();
  ADServiceAndSensorState::default_instance_ = new ADServiceAndSensorState();
  EgoMotion::default_instance_ = new EgoMotion();
  RawGNSSSatData::default_instance_ = new RawGNSSSatData();
  PathEvents::default_instance_ = new PathEvents();
  MediaContainer::default_instance_ = new MediaContainer();
  PathMedia::default_instance_ = new PathMedia();
  Message::default_instance_ = new Message();
  KeyValuePairString::default_instance_->InitAsDefaultInstance();
  Vector3D::default_instance_->InitAsDefaultInstance();
  VehicleMetaData::default_instance_->InitAsDefaultInstance();
  Envelope::default_instance_->InitAsDefaultInstance();
  PositionEstimate::default_instance_->InitAsDefaultInstance();
  PathSegment::default_instance_->InitAsDefaultInstance();
  Path::default_instance_->InitAsDefaultInstance();
  VehicleStatus::default_instance_->InitAsDefaultInstance();
  VehicleDynamics::default_instance_->InitAsDefaultInstance();
  PositionOffset::default_instance_->InitAsDefaultInstance();
  RoadSignRestriction::default_instance_->InitAsDefaultInstance();
  SignRecognition::default_instance_->InitAsDefaultInstance();
  LinePoint::default_instance_->InitAsDefaultInstance();
  LaneBoundaryRecognition::default_instance_->InitAsDefaultInstance();
  TireSlippageEvent::default_instance_->InitAsDefaultInstance();
  CrashDetectedEvent::default_instance_->InitAsDefaultInstance();
  EmergencyBrakingEvent::default_instance_->InitAsDefaultInstance();
  DynamicStabilityControlEvent::default_instance_->InitAsDefaultInstance();
  AntiLockBrakingSystemEvent::default_instance_->InitAsDefaultInstance();
  ElectronicStabilityControlEvent::default_instance_->InitAsDefaultInstance();
  ExceptionalVehicleState::default_instance_->InitAsDefaultInstance();
  ProprietaryInfo::default_instance_->InitAsDefaultInstance();
  EnvironmentStatus::default_instance_->InitAsDefaultInstance();
  TrafficLightStatus::default_instance_->InitAsDefaultInstance();
  ObjectDetection::default_instance_->InitAsDefaultInstance();
  ADServiceAndSensorState::default_instance_->InitAsDefaultInstance();
  EgoMotion::default_instance_->InitAsDefaultInstance();
  RawGNSSSatData::default_instance_->InitAsDefaultInstance();
  PathEvents::default_instance_->InitAsDefaultInstance();
  MediaContainer::default_instance_->InitAsDefaultInstance();
  PathMedia::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sensoris_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sensoris_2eproto {
  StaticDescriptorInitializer_sensoris_2eproto() {
    protobuf_AddDesc_sensoris_2eproto();
  }
} static_descriptor_initializer_sensoris_2eproto_;
const ::google::protobuf::EnumDescriptor* WheelReferenceBitfield_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WheelReferenceBitfield_descriptor_;
}
bool WheelReferenceBitfield_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValuePairString::kKeyFieldNumber;
const int KeyValuePairString::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValuePairString::KeyValuePairString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KeyValuePairString)
}

void KeyValuePairString::InitAsDefaultInstance() {
}

KeyValuePairString::KeyValuePairString(const KeyValuePairString& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KeyValuePairString)
}

void KeyValuePairString::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValuePairString::~KeyValuePairString() {
  // @@protoc_insertion_point(destructor:KeyValuePairString)
  SharedDtor();
}

void KeyValuePairString::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KeyValuePairString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValuePairString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValuePairString_descriptor_;
}

const KeyValuePairString& KeyValuePairString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

KeyValuePairString* KeyValuePairString::default_instance_ = NULL;

KeyValuePairString* KeyValuePairString::New(::google::protobuf::Arena* arena) const {
  KeyValuePairString* n = new KeyValuePairString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValuePairString::Clear() {
// @@protoc_insertion_point(message_clear_start:KeyValuePairString)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeyValuePairString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KeyValuePairString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KeyValuePairString.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KeyValuePairString.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KeyValuePairString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KeyValuePairString)
  return false;
#undef DO_
}

void KeyValuePairString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KeyValuePairString)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KeyValuePairString.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KeyValuePairString.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KeyValuePairString)
}

::google::protobuf::uint8* KeyValuePairString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KeyValuePairString)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KeyValuePairString.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KeyValuePairString.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KeyValuePairString)
  return target;
}

int KeyValuePairString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KeyValuePairString)
  int total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
int KeyValuePairString::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KeyValuePairString)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValuePairString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KeyValuePairString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeyValuePairString* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValuePairString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KeyValuePairString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KeyValuePairString)
    MergeFrom(*source);
  }
}

void KeyValuePairString::MergeFrom(const KeyValuePairString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KeyValuePairString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KeyValuePairString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KeyValuePairString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuePairString::CopyFrom(const KeyValuePairString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeyValuePairString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePairString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KeyValuePairString::Swap(KeyValuePairString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValuePairString::InternalSwap(KeyValuePairString* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValuePairString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValuePairString_descriptor_;
  metadata.reflection = KeyValuePairString_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValuePairString

// required string key = 1;
bool KeyValuePairString::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyValuePairString::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyValuePairString::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyValuePairString::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& KeyValuePairString::key() const {
  // @@protoc_insertion_point(field_get:KeyValuePairString.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValuePairString::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyValuePairString.key)
}
 void KeyValuePairString::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyValuePairString.key)
}
 void KeyValuePairString::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyValuePairString.key)
}
 ::std::string* KeyValuePairString::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:KeyValuePairString.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyValuePairString::release_key() {
  // @@protoc_insertion_point(field_release:KeyValuePairString.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValuePairString::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:KeyValuePairString.key)
}

// required string value = 2;
bool KeyValuePairString::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeyValuePairString::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void KeyValuePairString::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeyValuePairString::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& KeyValuePairString::value() const {
  // @@protoc_insertion_point(field_get:KeyValuePairString.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValuePairString::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyValuePairString.value)
}
 void KeyValuePairString::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyValuePairString.value)
}
 void KeyValuePairString::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyValuePairString.value)
}
 ::std::string* KeyValuePairString::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:KeyValuePairString.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyValuePairString::release_value() {
  // @@protoc_insertion_point(field_release:KeyValuePairString.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValuePairString::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:KeyValuePairString.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3D::kLongitudinalValueFieldNumber;
const int Vector3D::kLateralValueFieldNumber;
const int Vector3D::kVerticalValueFieldNumber;
const int Vector3D::kLongitudinalAccuracyFieldNumber;
const int Vector3D::kLateralAccuaryFieldNumber;
const int Vector3D::kVerticalAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3D::Vector3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vector3D)
}

void Vector3D::InitAsDefaultInstance() {
}

Vector3D::Vector3D(const Vector3D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Vector3D)
}

void Vector3D::SharedCtor() {
  _cached_size_ = 0;
  longitudinalvalue_ = 0;
  lateralvalue_ = 0;
  verticalvalue_ = 0;
  longitudinalaccuracy_ = 0;
  lateralaccuary_ = 0;
  verticalaccuracy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3D::~Vector3D() {
  // @@protoc_insertion_point(destructor:Vector3D)
  SharedDtor();
}

void Vector3D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3D_descriptor_;
}

const Vector3D& Vector3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

Vector3D* Vector3D::default_instance_ = NULL;

Vector3D* Vector3D::New(::google::protobuf::Arena* arena) const {
  Vector3D* n = new Vector3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3D::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector3D)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3D, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3D*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(longitudinalvalue_, verticalaccuracy_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vector3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vector3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double longitudinalValue = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinalvalue_)));
          set_has_longitudinalvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lateralValue;
        break;
      }

      // required double lateralValue = 2;
      case 2: {
        if (tag == 17) {
         parse_lateralValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateralvalue_)));
          set_has_lateralvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_verticalValue;
        break;
      }

      // required double verticalValue = 3;
      case 3: {
        if (tag == 25) {
         parse_verticalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &verticalvalue_)));
          set_has_verticalvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitudinalAccuracy;
        break;
      }

      // optional double longitudinalAccuracy = 4;
      case 4: {
        if (tag == 33) {
         parse_longitudinalAccuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinalaccuracy_)));
          set_has_longitudinalaccuracy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lateralAccuary;
        break;
      }

      // optional double lateralAccuary = 5;
      case 5: {
        if (tag == 41) {
         parse_lateralAccuary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateralaccuary_)));
          set_has_lateralaccuary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_verticalAccuracy;
        break;
      }

      // optional double verticalAccuracy = 6;
      case 6: {
        if (tag == 49) {
         parse_verticalAccuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &verticalaccuracy_)));
          set_has_verticalaccuracy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vector3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vector3D)
  return false;
#undef DO_
}

void Vector3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vector3D)
  // required double longitudinalValue = 1;
  if (has_longitudinalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitudinalvalue(), output);
  }

  // required double lateralValue = 2;
  if (has_lateralvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lateralvalue(), output);
  }

  // required double verticalValue = 3;
  if (has_verticalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->verticalvalue(), output);
  }

  // optional double longitudinalAccuracy = 4;
  if (has_longitudinalaccuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitudinalaccuracy(), output);
  }

  // optional double lateralAccuary = 5;
  if (has_lateralaccuary()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lateralaccuary(), output);
  }

  // optional double verticalAccuracy = 6;
  if (has_verticalaccuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->verticalaccuracy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vector3D)
}

::google::protobuf::uint8* Vector3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector3D)
  // required double longitudinalValue = 1;
  if (has_longitudinalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitudinalvalue(), target);
  }

  // required double lateralValue = 2;
  if (has_lateralvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lateralvalue(), target);
  }

  // required double verticalValue = 3;
  if (has_verticalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->verticalvalue(), target);
  }

  // optional double longitudinalAccuracy = 4;
  if (has_longitudinalaccuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitudinalaccuracy(), target);
  }

  // optional double lateralAccuary = 5;
  if (has_lateralaccuary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lateralaccuary(), target);
  }

  // optional double verticalAccuracy = 6;
  if (has_verticalaccuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->verticalaccuracy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector3D)
  return target;
}

int Vector3D::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vector3D)
  int total_size = 0;

  if (has_longitudinalvalue()) {
    // required double longitudinalValue = 1;
    total_size += 1 + 8;
  }

  if (has_lateralvalue()) {
    // required double lateralValue = 2;
    total_size += 1 + 8;
  }

  if (has_verticalvalue()) {
    // required double verticalValue = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
int Vector3D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Vector3D)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double longitudinalValue = 1;
    total_size += 1 + 8;

    // required double lateralValue = 2;
    total_size += 1 + 8;

    // required double verticalValue = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 56u) {
    // optional double longitudinalAccuracy = 4;
    if (has_longitudinalaccuracy()) {
      total_size += 1 + 8;
    }

    // optional double lateralAccuary = 5;
    if (has_lateralaccuary()) {
      total_size += 1 + 8;
    }

    // optional double verticalAccuracy = 6;
    if (has_verticalaccuracy()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vector3D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector3D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vector3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vector3D)
    MergeFrom(*source);
  }
}

void Vector3D::MergeFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vector3D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longitudinalvalue()) {
      set_longitudinalvalue(from.longitudinalvalue());
    }
    if (from.has_lateralvalue()) {
      set_lateralvalue(from.lateralvalue());
    }
    if (from.has_verticalvalue()) {
      set_verticalvalue(from.verticalvalue());
    }
    if (from.has_longitudinalaccuracy()) {
      set_longitudinalaccuracy(from.longitudinalaccuracy());
    }
    if (from.has_lateralaccuary()) {
      set_lateralaccuary(from.lateralaccuary());
    }
    if (from.has_verticalaccuracy()) {
      set_verticalaccuracy(from.verticalaccuracy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Vector3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3D::CopyFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector3D::Swap(Vector3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3D::InternalSwap(Vector3D* other) {
  std::swap(longitudinalvalue_, other->longitudinalvalue_);
  std::swap(lateralvalue_, other->lateralvalue_);
  std::swap(verticalvalue_, other->verticalvalue_);
  std::swap(longitudinalaccuracy_, other->longitudinalaccuracy_);
  std::swap(lateralaccuary_, other->lateralaccuary_);
  std::swap(verticalaccuracy_, other->verticalaccuracy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3D_descriptor_;
  metadata.reflection = Vector3D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3D

// required double longitudinalValue = 1;
bool Vector3D::has_longitudinalvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector3D::set_has_longitudinalvalue() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector3D::clear_has_longitudinalvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector3D::clear_longitudinalvalue() {
  longitudinalvalue_ = 0;
  clear_has_longitudinalvalue();
}
 double Vector3D::longitudinalvalue() const {
  // @@protoc_insertion_point(field_get:Vector3D.longitudinalValue)
  return longitudinalvalue_;
}
 void Vector3D::set_longitudinalvalue(double value) {
  set_has_longitudinalvalue();
  longitudinalvalue_ = value;
  // @@protoc_insertion_point(field_set:Vector3D.longitudinalValue)
}

// required double lateralValue = 2;
bool Vector3D::has_lateralvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector3D::set_has_lateralvalue() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector3D::clear_has_lateralvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector3D::clear_lateralvalue() {
  lateralvalue_ = 0;
  clear_has_lateralvalue();
}
 double Vector3D::lateralvalue() const {
  // @@protoc_insertion_point(field_get:Vector3D.lateralValue)
  return lateralvalue_;
}
 void Vector3D::set_lateralvalue(double value) {
  set_has_lateralvalue();
  lateralvalue_ = value;
  // @@protoc_insertion_point(field_set:Vector3D.lateralValue)
}

// required double verticalValue = 3;
bool Vector3D::has_verticalvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector3D::set_has_verticalvalue() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector3D::clear_has_verticalvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector3D::clear_verticalvalue() {
  verticalvalue_ = 0;
  clear_has_verticalvalue();
}
 double Vector3D::verticalvalue() const {
  // @@protoc_insertion_point(field_get:Vector3D.verticalValue)
  return verticalvalue_;
}
 void Vector3D::set_verticalvalue(double value) {
  set_has_verticalvalue();
  verticalvalue_ = value;
  // @@protoc_insertion_point(field_set:Vector3D.verticalValue)
}

// optional double longitudinalAccuracy = 4;
bool Vector3D::has_longitudinalaccuracy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Vector3D::set_has_longitudinalaccuracy() {
  _has_bits_[0] |= 0x00000008u;
}
void Vector3D::clear_has_longitudinalaccuracy() {
  _has_bits_[0] &= ~0x00000008u;
}
void Vector3D::clear_longitudinalaccuracy() {
  longitudinalaccuracy_ = 0;
  clear_has_longitudinalaccuracy();
}
 double Vector3D::longitudinalaccuracy() const {
  // @@protoc_insertion_point(field_get:Vector3D.longitudinalAccuracy)
  return longitudinalaccuracy_;
}
 void Vector3D::set_longitudinalaccuracy(double value) {
  set_has_longitudinalaccuracy();
  longitudinalaccuracy_ = value;
  // @@protoc_insertion_point(field_set:Vector3D.longitudinalAccuracy)
}

// optional double lateralAccuary = 5;
bool Vector3D::has_lateralaccuary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Vector3D::set_has_lateralaccuary() {
  _has_bits_[0] |= 0x00000010u;
}
void Vector3D::clear_has_lateralaccuary() {
  _has_bits_[0] &= ~0x00000010u;
}
void Vector3D::clear_lateralaccuary() {
  lateralaccuary_ = 0;
  clear_has_lateralaccuary();
}
 double Vector3D::lateralaccuary() const {
  // @@protoc_insertion_point(field_get:Vector3D.lateralAccuary)
  return lateralaccuary_;
}
 void Vector3D::set_lateralaccuary(double value) {
  set_has_lateralaccuary();
  lateralaccuary_ = value;
  // @@protoc_insertion_point(field_set:Vector3D.lateralAccuary)
}

// optional double verticalAccuracy = 6;
bool Vector3D::has_verticalaccuracy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Vector3D::set_has_verticalaccuracy() {
  _has_bits_[0] |= 0x00000020u;
}
void Vector3D::clear_has_verticalaccuracy() {
  _has_bits_[0] &= ~0x00000020u;
}
void Vector3D::clear_verticalaccuracy() {
  verticalaccuracy_ = 0;
  clear_has_verticalaccuracy();
}
 double Vector3D::verticalaccuracy() const {
  // @@protoc_insertion_point(field_get:Vector3D.verticalAccuracy)
  return verticalaccuracy_;
}
 void Vector3D::set_verticalaccuracy(double value) {
  set_has_verticalaccuracy();
  verticalaccuracy_ = value;
  // @@protoc_insertion_point(field_set:Vector3D.verticalAccuracy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* VehicleMetaData_VehicleTypeGenericEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleMetaData_VehicleTypeGenericEnum_descriptor_;
}
bool VehicleMetaData_VehicleTypeGenericEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleMetaData_VehicleTypeGenericEnum VehicleMetaData::BUS;
const VehicleMetaData_VehicleTypeGenericEnum VehicleMetaData::DELIVERY_TRUCK;
const VehicleMetaData_VehicleTypeGenericEnum VehicleMetaData::EMERGENCY_VEHICLE;
const VehicleMetaData_VehicleTypeGenericEnum VehicleMetaData::MOTORCYCLE;
const VehicleMetaData_VehicleTypeGenericEnum VehicleMetaData::PASSENGER_CAR;
const VehicleMetaData_VehicleTypeGenericEnum VehicleMetaData::TAXI;
const VehicleMetaData_VehicleTypeGenericEnum VehicleMetaData::TRANSPORT_TRUCK;
const VehicleMetaData_VehicleTypeGenericEnum VehicleMetaData::VehicleTypeGenericEnum_MIN;
const VehicleMetaData_VehicleTypeGenericEnum VehicleMetaData::VehicleTypeGenericEnum_MAX;
const int VehicleMetaData::VehicleTypeGenericEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehicleMetaData_FuelTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleMetaData_FuelTypeEnum_descriptor_;
}
bool VehicleMetaData_FuelTypeEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleMetaData_FuelTypeEnum VehicleMetaData::FUEL_TYPE_OTHER;
const VehicleMetaData_FuelTypeEnum VehicleMetaData::FUEL_TYPE_GASOLINE_L;
const VehicleMetaData_FuelTypeEnum VehicleMetaData::FUEL_TYPE_DIESEL_L;
const VehicleMetaData_FuelTypeEnum VehicleMetaData::FUEL_TYPE_AUTOGAS_KG;
const VehicleMetaData_FuelTypeEnum VehicleMetaData::FUEL_TYPE_BATTERY_AH;
const VehicleMetaData_FuelTypeEnum VehicleMetaData::FUEL_TYPE_HYDROGEN_KG;
const VehicleMetaData_FuelTypeEnum VehicleMetaData::FuelTypeEnum_MIN;
const VehicleMetaData_FuelTypeEnum VehicleMetaData::FuelTypeEnum_MAX;
const int VehicleMetaData::FuelTypeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleMetaData::kVehicleTypeGenericFieldNumber;
const int VehicleMetaData::kVehicleSpecificMetaDataFieldNumber;
const int VehicleMetaData::kVehicleReferencePointDeltaAboveGroundMFieldNumber;
const int VehicleMetaData::kCurvatureAccuracy1PmFieldNumber;
const int VehicleMetaData::kSlopeAccuracyPercentFieldNumber;
const int VehicleMetaData::kVehicleLengthMFieldNumber;
const int VehicleMetaData::kVehicleWidthMFieldNumber;
const int VehicleMetaData::kVehicleHeightMFieldNumber;
const int VehicleMetaData::kPrimaryFuelTankVolumeFieldNumber;
const int VehicleMetaData::kPrimaryFuelTypeFieldNumber;
const int VehicleMetaData::kSecondaryFuelTankVolumeFieldNumber;
const int VehicleMetaData::kSecondaryFuelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleMetaData::VehicleMetaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleMetaData)
}

void VehicleMetaData::InitAsDefaultInstance() {
}

VehicleMetaData::VehicleMetaData(const VehicleMetaData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VehicleMetaData)
}

void VehicleMetaData::SharedCtor() {
  _cached_size_ = 0;
  vehicletypegeneric_ = 1;
  vehiclereferencepointdeltaaboveground_m_ = 0;
  curvatureaccuracy_1pm_ = 0;
  slopeaccuracy_percent_ = 0;
  vehiclelength_m_ = 0;
  vehiclewidth_m_ = 0;
  vehicleheight_m_ = 0;
  primaryfueltankvolume_ = 0;
  primaryfueltype_ = 1;
  secondaryfueltankvolume_ = 0;
  secondaryfueltype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleMetaData::~VehicleMetaData() {
  // @@protoc_insertion_point(destructor:VehicleMetaData)
  SharedDtor();
}

void VehicleMetaData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleMetaData_descriptor_;
}

const VehicleMetaData& VehicleMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

VehicleMetaData* VehicleMetaData::default_instance_ = NULL;

VehicleMetaData* VehicleMetaData::New(::google::protobuf::Arena* arena) const {
  VehicleMetaData* n = new VehicleMetaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleMetaData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleMetaData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleMetaData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 253u) {
    ZR_(vehiclereferencepointdeltaaboveground_m_, slopeaccuracy_percent_);
    ZR_(vehiclelength_m_, vehicleheight_m_);
    vehicletypegeneric_ = 1;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(primaryfueltankvolume_, secondaryfueltankvolume_);
    primaryfueltype_ = 1;
    secondaryfueltype_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  vehiclespecificmetadata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleMetaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .VehicleMetaData.VehicleTypeGenericEnum vehicleTypeGeneric = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VehicleMetaData_VehicleTypeGenericEnum_IsValid(value)) {
            set_vehicletypegeneric(static_cast< ::VehicleMetaData_VehicleTypeGenericEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vehicleSpecificMetaData;
        break;
      }

      // repeated .KeyValuePairString vehicleSpecificMetaData = 2;
      case 2: {
        if (tag == 18) {
         parse_vehicleSpecificMetaData:
          DO_(input->IncrementRecursionDepth());
         parse_loop_vehicleSpecificMetaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vehiclespecificmetadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_vehicleSpecificMetaData;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(25)) goto parse_vehicleReferencePointDeltaAboveGround_m;
        break;
      }

      // required double vehicleReferencePointDeltaAboveGround_m = 3;
      case 3: {
        if (tag == 25) {
         parse_vehicleReferencePointDeltaAboveGround_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehiclereferencepointdeltaaboveground_m_)));
          set_has_vehiclereferencepointdeltaaboveground_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_curvatureAccuracy_1pm;
        break;
      }

      // optional double curvatureAccuracy_1pm = 4 [deprecated = true];
      case 4: {
        if (tag == 33) {
         parse_curvatureAccuracy_1pm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvatureaccuracy_1pm_)));
          set_has_curvatureaccuracy_1pm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_slopeAccuracy_percent;
        break;
      }

      // optional double slopeAccuracy_percent = 5 [deprecated = true];
      case 5: {
        if (tag == 41) {
         parse_slopeAccuracy_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slopeaccuracy_percent_)));
          set_has_slopeaccuracy_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_vehicleLength_m;
        break;
      }

      // optional double vehicleLength_m = 6;
      case 6: {
        if (tag == 49) {
         parse_vehicleLength_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehiclelength_m_)));
          set_has_vehiclelength_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_vehicleWidth_m;
        break;
      }

      // optional double vehicleWidth_m = 7;
      case 7: {
        if (tag == 57) {
         parse_vehicleWidth_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehiclewidth_m_)));
          set_has_vehiclewidth_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_vehicleHeight_m;
        break;
      }

      // optional double vehicleHeight_m = 8;
      case 8: {
        if (tag == 65) {
         parse_vehicleHeight_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicleheight_m_)));
          set_has_vehicleheight_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_primaryFuelTankVolume;
        break;
      }

      // optional double primaryFuelTankVolume = 9;
      case 9: {
        if (tag == 73) {
         parse_primaryFuelTankVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &primaryfueltankvolume_)));
          set_has_primaryfueltankvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_primaryFuelType;
        break;
      }

      // optional .VehicleMetaData.FuelTypeEnum primaryFuelType = 10;
      case 10: {
        if (tag == 80) {
         parse_primaryFuelType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VehicleMetaData_FuelTypeEnum_IsValid(value)) {
            set_primaryfueltype(static_cast< ::VehicleMetaData_FuelTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_secondaryFuelTankVolume;
        break;
      }

      // optional double secondaryFuelTankVolume = 11;
      case 11: {
        if (tag == 89) {
         parse_secondaryFuelTankVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &secondaryfueltankvolume_)));
          set_has_secondaryfueltankvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_secondaryFuelType;
        break;
      }

      // optional .VehicleMetaData.FuelTypeEnum secondaryFuelType = 12;
      case 12: {
        if (tag == 96) {
         parse_secondaryFuelType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VehicleMetaData_FuelTypeEnum_IsValid(value)) {
            set_secondaryfueltype(static_cast< ::VehicleMetaData_FuelTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleMetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleMetaData)
  return false;
#undef DO_
}

void VehicleMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleMetaData)
  // optional .VehicleMetaData.VehicleTypeGenericEnum vehicleTypeGeneric = 1;
  if (has_vehicletypegeneric()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vehicletypegeneric(), output);
  }

  // repeated .KeyValuePairString vehicleSpecificMetaData = 2;
  for (unsigned int i = 0, n = this->vehiclespecificmetadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vehiclespecificmetadata(i), output);
  }

  // required double vehicleReferencePointDeltaAboveGround_m = 3;
  if (has_vehiclereferencepointdeltaaboveground_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vehiclereferencepointdeltaaboveground_m(), output);
  }

  // optional double curvatureAccuracy_1pm = 4 [deprecated = true];
  if (has_curvatureaccuracy_1pm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->curvatureaccuracy_1pm(), output);
  }

  // optional double slopeAccuracy_percent = 5 [deprecated = true];
  if (has_slopeaccuracy_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->slopeaccuracy_percent(), output);
  }

  // optional double vehicleLength_m = 6;
  if (has_vehiclelength_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->vehiclelength_m(), output);
  }

  // optional double vehicleWidth_m = 7;
  if (has_vehiclewidth_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vehiclewidth_m(), output);
  }

  // optional double vehicleHeight_m = 8;
  if (has_vehicleheight_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->vehicleheight_m(), output);
  }

  // optional double primaryFuelTankVolume = 9;
  if (has_primaryfueltankvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->primaryfueltankvolume(), output);
  }

  // optional .VehicleMetaData.FuelTypeEnum primaryFuelType = 10;
  if (has_primaryfueltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->primaryfueltype(), output);
  }

  // optional double secondaryFuelTankVolume = 11;
  if (has_secondaryfueltankvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->secondaryfueltankvolume(), output);
  }

  // optional .VehicleMetaData.FuelTypeEnum secondaryFuelType = 12;
  if (has_secondaryfueltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->secondaryfueltype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleMetaData)
}

::google::protobuf::uint8* VehicleMetaData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VehicleMetaData)
  // optional .VehicleMetaData.VehicleTypeGenericEnum vehicleTypeGeneric = 1;
  if (has_vehicletypegeneric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->vehicletypegeneric(), target);
  }

  // repeated .KeyValuePairString vehicleSpecificMetaData = 2;
  for (unsigned int i = 0, n = this->vehiclespecificmetadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->vehiclespecificmetadata(i), false, target);
  }

  // required double vehicleReferencePointDeltaAboveGround_m = 3;
  if (has_vehiclereferencepointdeltaaboveground_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vehiclereferencepointdeltaaboveground_m(), target);
  }

  // optional double curvatureAccuracy_1pm = 4 [deprecated = true];
  if (has_curvatureaccuracy_1pm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->curvatureaccuracy_1pm(), target);
  }

  // optional double slopeAccuracy_percent = 5 [deprecated = true];
  if (has_slopeaccuracy_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->slopeaccuracy_percent(), target);
  }

  // optional double vehicleLength_m = 6;
  if (has_vehiclelength_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->vehiclelength_m(), target);
  }

  // optional double vehicleWidth_m = 7;
  if (has_vehiclewidth_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vehiclewidth_m(), target);
  }

  // optional double vehicleHeight_m = 8;
  if (has_vehicleheight_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->vehicleheight_m(), target);
  }

  // optional double primaryFuelTankVolume = 9;
  if (has_primaryfueltankvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->primaryfueltankvolume(), target);
  }

  // optional .VehicleMetaData.FuelTypeEnum primaryFuelType = 10;
  if (has_primaryfueltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->primaryfueltype(), target);
  }

  // optional double secondaryFuelTankVolume = 11;
  if (has_secondaryfueltankvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->secondaryfueltankvolume(), target);
  }

  // optional .VehicleMetaData.FuelTypeEnum secondaryFuelType = 12;
  if (has_secondaryfueltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->secondaryfueltype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleMetaData)
  return target;
}

int VehicleMetaData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleMetaData)
  int total_size = 0;

  // required double vehicleReferencePointDeltaAboveGround_m = 3;
  if (has_vehiclereferencepointdeltaaboveground_m()) {
    total_size += 1 + 8;
  }
  if (_has_bits_[0 / 32] & 249u) {
    // optional .VehicleMetaData.VehicleTypeGenericEnum vehicleTypeGeneric = 1;
    if (has_vehicletypegeneric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vehicletypegeneric());
    }

    // optional double curvatureAccuracy_1pm = 4 [deprecated = true];
    if (has_curvatureaccuracy_1pm()) {
      total_size += 1 + 8;
    }

    // optional double slopeAccuracy_percent = 5 [deprecated = true];
    if (has_slopeaccuracy_percent()) {
      total_size += 1 + 8;
    }

    // optional double vehicleLength_m = 6;
    if (has_vehiclelength_m()) {
      total_size += 1 + 8;
    }

    // optional double vehicleWidth_m = 7;
    if (has_vehiclewidth_m()) {
      total_size += 1 + 8;
    }

    // optional double vehicleHeight_m = 8;
    if (has_vehicleheight_m()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double primaryFuelTankVolume = 9;
    if (has_primaryfueltankvolume()) {
      total_size += 1 + 8;
    }

    // optional .VehicleMetaData.FuelTypeEnum primaryFuelType = 10;
    if (has_primaryfueltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->primaryfueltype());
    }

    // optional double secondaryFuelTankVolume = 11;
    if (has_secondaryfueltankvolume()) {
      total_size += 1 + 8;
    }

    // optional .VehicleMetaData.FuelTypeEnum secondaryFuelType = 12;
    if (has_secondaryfueltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->secondaryfueltype());
    }

  }
  // repeated .KeyValuePairString vehicleSpecificMetaData = 2;
  total_size += 1 * this->vehiclespecificmetadata_size();
  for (int i = 0; i < this->vehiclespecificmetadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehiclespecificmetadata(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleMetaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleMetaData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleMetaData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleMetaData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleMetaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleMetaData)
    MergeFrom(*source);
  }
}

void VehicleMetaData::MergeFrom(const VehicleMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleMetaData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  vehiclespecificmetadata_.MergeFrom(from.vehiclespecificmetadata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vehicletypegeneric()) {
      set_vehicletypegeneric(from.vehicletypegeneric());
    }
    if (from.has_vehiclereferencepointdeltaaboveground_m()) {
      set_vehiclereferencepointdeltaaboveground_m(from.vehiclereferencepointdeltaaboveground_m());
    }
    if (from.has_curvatureaccuracy_1pm()) {
      set_curvatureaccuracy_1pm(from.curvatureaccuracy_1pm());
    }
    if (from.has_slopeaccuracy_percent()) {
      set_slopeaccuracy_percent(from.slopeaccuracy_percent());
    }
    if (from.has_vehiclelength_m()) {
      set_vehiclelength_m(from.vehiclelength_m());
    }
    if (from.has_vehiclewidth_m()) {
      set_vehiclewidth_m(from.vehiclewidth_m());
    }
    if (from.has_vehicleheight_m()) {
      set_vehicleheight_m(from.vehicleheight_m());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_primaryfueltankvolume()) {
      set_primaryfueltankvolume(from.primaryfueltankvolume());
    }
    if (from.has_primaryfueltype()) {
      set_primaryfueltype(from.primaryfueltype());
    }
    if (from.has_secondaryfueltankvolume()) {
      set_secondaryfueltankvolume(from.secondaryfueltankvolume());
    }
    if (from.has_secondaryfueltype()) {
      set_secondaryfueltype(from.secondaryfueltype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleMetaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMetaData::CopyFrom(const VehicleMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->vehiclespecificmetadata())) return false;
  return true;
}

void VehicleMetaData::Swap(VehicleMetaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleMetaData::InternalSwap(VehicleMetaData* other) {
  std::swap(vehicletypegeneric_, other->vehicletypegeneric_);
  vehiclespecificmetadata_.UnsafeArenaSwap(&other->vehiclespecificmetadata_);
  std::swap(vehiclereferencepointdeltaaboveground_m_, other->vehiclereferencepointdeltaaboveground_m_);
  std::swap(curvatureaccuracy_1pm_, other->curvatureaccuracy_1pm_);
  std::swap(slopeaccuracy_percent_, other->slopeaccuracy_percent_);
  std::swap(vehiclelength_m_, other->vehiclelength_m_);
  std::swap(vehiclewidth_m_, other->vehiclewidth_m_);
  std::swap(vehicleheight_m_, other->vehicleheight_m_);
  std::swap(primaryfueltankvolume_, other->primaryfueltankvolume_);
  std::swap(primaryfueltype_, other->primaryfueltype_);
  std::swap(secondaryfueltankvolume_, other->secondaryfueltankvolume_);
  std::swap(secondaryfueltype_, other->secondaryfueltype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleMetaData_descriptor_;
  metadata.reflection = VehicleMetaData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleMetaData

// optional .VehicleMetaData.VehicleTypeGenericEnum vehicleTypeGeneric = 1;
bool VehicleMetaData::has_vehicletypegeneric() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleMetaData::set_has_vehicletypegeneric() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleMetaData::clear_has_vehicletypegeneric() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleMetaData::clear_vehicletypegeneric() {
  vehicletypegeneric_ = 1;
  clear_has_vehicletypegeneric();
}
 ::VehicleMetaData_VehicleTypeGenericEnum VehicleMetaData::vehicletypegeneric() const {
  // @@protoc_insertion_point(field_get:VehicleMetaData.vehicleTypeGeneric)
  return static_cast< ::VehicleMetaData_VehicleTypeGenericEnum >(vehicletypegeneric_);
}
 void VehicleMetaData::set_vehicletypegeneric(::VehicleMetaData_VehicleTypeGenericEnum value) {
  assert(::VehicleMetaData_VehicleTypeGenericEnum_IsValid(value));
  set_has_vehicletypegeneric();
  vehicletypegeneric_ = value;
  // @@protoc_insertion_point(field_set:VehicleMetaData.vehicleTypeGeneric)
}

// repeated .KeyValuePairString vehicleSpecificMetaData = 2;
int VehicleMetaData::vehiclespecificmetadata_size() const {
  return vehiclespecificmetadata_.size();
}
void VehicleMetaData::clear_vehiclespecificmetadata() {
  vehiclespecificmetadata_.Clear();
}
const ::KeyValuePairString& VehicleMetaData::vehiclespecificmetadata(int index) const {
  // @@protoc_insertion_point(field_get:VehicleMetaData.vehicleSpecificMetaData)
  return vehiclespecificmetadata_.Get(index);
}
::KeyValuePairString* VehicleMetaData::mutable_vehiclespecificmetadata(int index) {
  // @@protoc_insertion_point(field_mutable:VehicleMetaData.vehicleSpecificMetaData)
  return vehiclespecificmetadata_.Mutable(index);
}
::KeyValuePairString* VehicleMetaData::add_vehiclespecificmetadata() {
  // @@protoc_insertion_point(field_add:VehicleMetaData.vehicleSpecificMetaData)
  return vehiclespecificmetadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::KeyValuePairString >*
VehicleMetaData::mutable_vehiclespecificmetadata() {
  // @@protoc_insertion_point(field_mutable_list:VehicleMetaData.vehicleSpecificMetaData)
  return &vehiclespecificmetadata_;
}
const ::google::protobuf::RepeatedPtrField< ::KeyValuePairString >&
VehicleMetaData::vehiclespecificmetadata() const {
  // @@protoc_insertion_point(field_list:VehicleMetaData.vehicleSpecificMetaData)
  return vehiclespecificmetadata_;
}

// required double vehicleReferencePointDeltaAboveGround_m = 3;
bool VehicleMetaData::has_vehiclereferencepointdeltaaboveground_m() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleMetaData::set_has_vehiclereferencepointdeltaaboveground_m() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleMetaData::clear_has_vehiclereferencepointdeltaaboveground_m() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleMetaData::clear_vehiclereferencepointdeltaaboveground_m() {
  vehiclereferencepointdeltaaboveground_m_ = 0;
  clear_has_vehiclereferencepointdeltaaboveground_m();
}
 double VehicleMetaData::vehiclereferencepointdeltaaboveground_m() const {
  // @@protoc_insertion_point(field_get:VehicleMetaData.vehicleReferencePointDeltaAboveGround_m)
  return vehiclereferencepointdeltaaboveground_m_;
}
 void VehicleMetaData::set_vehiclereferencepointdeltaaboveground_m(double value) {
  set_has_vehiclereferencepointdeltaaboveground_m();
  vehiclereferencepointdeltaaboveground_m_ = value;
  // @@protoc_insertion_point(field_set:VehicleMetaData.vehicleReferencePointDeltaAboveGround_m)
}

// optional double curvatureAccuracy_1pm = 4 [deprecated = true];
bool VehicleMetaData::has_curvatureaccuracy_1pm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleMetaData::set_has_curvatureaccuracy_1pm() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleMetaData::clear_has_curvatureaccuracy_1pm() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleMetaData::clear_curvatureaccuracy_1pm() {
  curvatureaccuracy_1pm_ = 0;
  clear_has_curvatureaccuracy_1pm();
}
 double VehicleMetaData::curvatureaccuracy_1pm() const {
  // @@protoc_insertion_point(field_get:VehicleMetaData.curvatureAccuracy_1pm)
  return curvatureaccuracy_1pm_;
}
 void VehicleMetaData::set_curvatureaccuracy_1pm(double value) {
  set_has_curvatureaccuracy_1pm();
  curvatureaccuracy_1pm_ = value;
  // @@protoc_insertion_point(field_set:VehicleMetaData.curvatureAccuracy_1pm)
}

// optional double slopeAccuracy_percent = 5 [deprecated = true];
bool VehicleMetaData::has_slopeaccuracy_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleMetaData::set_has_slopeaccuracy_percent() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleMetaData::clear_has_slopeaccuracy_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleMetaData::clear_slopeaccuracy_percent() {
  slopeaccuracy_percent_ = 0;
  clear_has_slopeaccuracy_percent();
}
 double VehicleMetaData::slopeaccuracy_percent() const {
  // @@protoc_insertion_point(field_get:VehicleMetaData.slopeAccuracy_percent)
  return slopeaccuracy_percent_;
}
 void VehicleMetaData::set_slopeaccuracy_percent(double value) {
  set_has_slopeaccuracy_percent();
  slopeaccuracy_percent_ = value;
  // @@protoc_insertion_point(field_set:VehicleMetaData.slopeAccuracy_percent)
}

// optional double vehicleLength_m = 6;
bool VehicleMetaData::has_vehiclelength_m() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleMetaData::set_has_vehiclelength_m() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleMetaData::clear_has_vehiclelength_m() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleMetaData::clear_vehiclelength_m() {
  vehiclelength_m_ = 0;
  clear_has_vehiclelength_m();
}
 double VehicleMetaData::vehiclelength_m() const {
  // @@protoc_insertion_point(field_get:VehicleMetaData.vehicleLength_m)
  return vehiclelength_m_;
}
 void VehicleMetaData::set_vehiclelength_m(double value) {
  set_has_vehiclelength_m();
  vehiclelength_m_ = value;
  // @@protoc_insertion_point(field_set:VehicleMetaData.vehicleLength_m)
}

// optional double vehicleWidth_m = 7;
bool VehicleMetaData::has_vehiclewidth_m() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleMetaData::set_has_vehiclewidth_m() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleMetaData::clear_has_vehiclewidth_m() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleMetaData::clear_vehiclewidth_m() {
  vehiclewidth_m_ = 0;
  clear_has_vehiclewidth_m();
}
 double VehicleMetaData::vehiclewidth_m() const {
  // @@protoc_insertion_point(field_get:VehicleMetaData.vehicleWidth_m)
  return vehiclewidth_m_;
}
 void VehicleMetaData::set_vehiclewidth_m(double value) {
  set_has_vehiclewidth_m();
  vehiclewidth_m_ = value;
  // @@protoc_insertion_point(field_set:VehicleMetaData.vehicleWidth_m)
}

// optional double vehicleHeight_m = 8;
bool VehicleMetaData::has_vehicleheight_m() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleMetaData::set_has_vehicleheight_m() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleMetaData::clear_has_vehicleheight_m() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleMetaData::clear_vehicleheight_m() {
  vehicleheight_m_ = 0;
  clear_has_vehicleheight_m();
}
 double VehicleMetaData::vehicleheight_m() const {
  // @@protoc_insertion_point(field_get:VehicleMetaData.vehicleHeight_m)
  return vehicleheight_m_;
}
 void VehicleMetaData::set_vehicleheight_m(double value) {
  set_has_vehicleheight_m();
  vehicleheight_m_ = value;
  // @@protoc_insertion_point(field_set:VehicleMetaData.vehicleHeight_m)
}

// optional double primaryFuelTankVolume = 9;
bool VehicleMetaData::has_primaryfueltankvolume() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleMetaData::set_has_primaryfueltankvolume() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleMetaData::clear_has_primaryfueltankvolume() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleMetaData::clear_primaryfueltankvolume() {
  primaryfueltankvolume_ = 0;
  clear_has_primaryfueltankvolume();
}
 double VehicleMetaData::primaryfueltankvolume() const {
  // @@protoc_insertion_point(field_get:VehicleMetaData.primaryFuelTankVolume)
  return primaryfueltankvolume_;
}
 void VehicleMetaData::set_primaryfueltankvolume(double value) {
  set_has_primaryfueltankvolume();
  primaryfueltankvolume_ = value;
  // @@protoc_insertion_point(field_set:VehicleMetaData.primaryFuelTankVolume)
}

// optional .VehicleMetaData.FuelTypeEnum primaryFuelType = 10;
bool VehicleMetaData::has_primaryfueltype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleMetaData::set_has_primaryfueltype() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleMetaData::clear_has_primaryfueltype() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleMetaData::clear_primaryfueltype() {
  primaryfueltype_ = 1;
  clear_has_primaryfueltype();
}
 ::VehicleMetaData_FuelTypeEnum VehicleMetaData::primaryfueltype() const {
  // @@protoc_insertion_point(field_get:VehicleMetaData.primaryFuelType)
  return static_cast< ::VehicleMetaData_FuelTypeEnum >(primaryfueltype_);
}
 void VehicleMetaData::set_primaryfueltype(::VehicleMetaData_FuelTypeEnum value) {
  assert(::VehicleMetaData_FuelTypeEnum_IsValid(value));
  set_has_primaryfueltype();
  primaryfueltype_ = value;
  // @@protoc_insertion_point(field_set:VehicleMetaData.primaryFuelType)
}

// optional double secondaryFuelTankVolume = 11;
bool VehicleMetaData::has_secondaryfueltankvolume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VehicleMetaData::set_has_secondaryfueltankvolume() {
  _has_bits_[0] |= 0x00000400u;
}
void VehicleMetaData::clear_has_secondaryfueltankvolume() {
  _has_bits_[0] &= ~0x00000400u;
}
void VehicleMetaData::clear_secondaryfueltankvolume() {
  secondaryfueltankvolume_ = 0;
  clear_has_secondaryfueltankvolume();
}
 double VehicleMetaData::secondaryfueltankvolume() const {
  // @@protoc_insertion_point(field_get:VehicleMetaData.secondaryFuelTankVolume)
  return secondaryfueltankvolume_;
}
 void VehicleMetaData::set_secondaryfueltankvolume(double value) {
  set_has_secondaryfueltankvolume();
  secondaryfueltankvolume_ = value;
  // @@protoc_insertion_point(field_set:VehicleMetaData.secondaryFuelTankVolume)
}

// optional .VehicleMetaData.FuelTypeEnum secondaryFuelType = 12;
bool VehicleMetaData::has_secondaryfueltype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VehicleMetaData::set_has_secondaryfueltype() {
  _has_bits_[0] |= 0x00000800u;
}
void VehicleMetaData::clear_has_secondaryfueltype() {
  _has_bits_[0] &= ~0x00000800u;
}
void VehicleMetaData::clear_secondaryfueltype() {
  secondaryfueltype_ = 1;
  clear_has_secondaryfueltype();
}
 ::VehicleMetaData_FuelTypeEnum VehicleMetaData::secondaryfueltype() const {
  // @@protoc_insertion_point(field_get:VehicleMetaData.secondaryFuelType)
  return static_cast< ::VehicleMetaData_FuelTypeEnum >(secondaryfueltype_);
}
 void VehicleMetaData::set_secondaryfueltype(::VehicleMetaData_FuelTypeEnum value) {
  assert(::VehicleMetaData_FuelTypeEnum_IsValid(value));
  set_has_secondaryfueltype();
  secondaryfueltype_ = value;
  // @@protoc_insertion_point(field_set:VehicleMetaData.secondaryFuelType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Envelope::kVersionFieldNumber;
const int Envelope::kSubmitterFieldNumber;
const int Envelope::kVehicleMetaDataFieldNumber;
const int Envelope::kTransientVehicleIDFieldNumber;
const int Envelope::kVehicleProfileIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Envelope::Envelope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Envelope)
}

void Envelope::InitAsDefaultInstance() {
  vehiclemetadata_ = const_cast< ::VehicleMetaData*>(&::VehicleMetaData::default_instance());
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Envelope)
}

void Envelope::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submitter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehiclemetadata_ = NULL;
  transientvehicleid_ = GOOGLE_LONGLONG(0);
  vehicleprofileid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:Envelope)
  SharedDtor();
}

void Envelope::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submitter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete vehiclemetadata_;
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

Envelope* Envelope::default_instance_ = NULL;

Envelope* Envelope::New(::google::protobuf::Arena* arena) const {
  Envelope* n = new Envelope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:Envelope)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Envelope, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Envelope*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(transientvehicleid_, vehicleprofileid_);
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_submitter()) {
      submitter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_vehiclemetadata()) {
      if (vehiclemetadata_ != NULL) vehiclemetadata_->::VehicleMetaData::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Envelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Envelope.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_submitter;
        break;
      }

      // required string submitter = 2;
      case 2: {
        if (tag == 18) {
         parse_submitter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_submitter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->submitter().data(), this->submitter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Envelope.submitter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vehicleMetaData;
        break;
      }

      // required .VehicleMetaData vehicleMetaData = 3;
      case 3: {
        if (tag == 26) {
         parse_vehicleMetaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehiclemetadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_transientVehicleID;
        break;
      }

      // optional int64 transientVehicleID = 4;
      case 4: {
        if (tag == 32) {
         parse_transientVehicleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transientvehicleid_)));
          set_has_transientvehicleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vehicleProfileID;
        break;
      }

      // optional int64 vehicleProfileID = 5;
      case 5: {
        if (tag == 40) {
         parse_vehicleProfileID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vehicleprofileid_)));
          set_has_vehicleprofileid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Envelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Envelope)
  return false;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Envelope)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Envelope.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // required string submitter = 2;
  if (has_submitter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->submitter().data(), this->submitter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Envelope.submitter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->submitter(), output);
  }

  // required .VehicleMetaData vehicleMetaData = 3;
  if (has_vehiclemetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->vehiclemetadata_, output);
  }

  // optional int64 transientVehicleID = 4;
  if (has_transientvehicleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->transientvehicleid(), output);
  }

  // optional int64 vehicleProfileID = 5;
  if (has_vehicleprofileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->vehicleprofileid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Envelope)
}

::google::protobuf::uint8* Envelope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Envelope)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Envelope.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // required string submitter = 2;
  if (has_submitter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->submitter().data(), this->submitter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Envelope.submitter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->submitter(), target);
  }

  // required .VehicleMetaData vehicleMetaData = 3;
  if (has_vehiclemetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->vehiclemetadata_, false, target);
  }

  // optional int64 transientVehicleID = 4;
  if (has_transientvehicleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->transientvehicleid(), target);
  }

  // optional int64 vehicleProfileID = 5;
  if (has_vehicleprofileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->vehicleprofileid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Envelope)
  return target;
}

int Envelope::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Envelope)
  int total_size = 0;

  if (has_version()) {
    // required string version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  if (has_submitter()) {
    // required string submitter = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->submitter());
  }

  if (has_vehiclemetadata()) {
    // required .VehicleMetaData vehicleMetaData = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vehiclemetadata_);
  }

  return total_size;
}
int Envelope::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Envelope)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());

    // required string submitter = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->submitter());

    // required .VehicleMetaData vehicleMetaData = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vehiclemetadata_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 24u) {
    // optional int64 transientVehicleID = 4;
    if (has_transientvehicleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transientvehicleid());
    }

    // optional int64 vehicleProfileID = 5;
    if (has_vehicleprofileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vehicleprofileid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Envelope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Envelope* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Envelope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Envelope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Envelope)
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Envelope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_submitter()) {
      set_has_submitter();
      submitter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.submitter_);
    }
    if (from.has_vehiclemetadata()) {
      mutable_vehiclemetadata()->::VehicleMetaData::MergeFrom(from.vehiclemetadata());
    }
    if (from.has_transientvehicleid()) {
      set_transientvehicleid(from.transientvehicleid());
    }
    if (from.has_vehicleprofileid()) {
      set_vehicleprofileid(from.vehicleprofileid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_vehiclemetadata()) {
    if (!this->vehiclemetadata_->IsInitialized()) return false;
  }
  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Envelope::InternalSwap(Envelope* other) {
  version_.Swap(&other->version_);
  submitter_.Swap(&other->submitter_);
  std::swap(vehiclemetadata_, other->vehiclemetadata_);
  std::swap(transientvehicleid_, other->transientvehicleid_);
  std::swap(vehicleprofileid_, other->vehicleprofileid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Envelope

// required string version = 1;
bool Envelope::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Envelope::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Envelope::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Envelope::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& Envelope::version() const {
  // @@protoc_insertion_point(field_get:Envelope.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Envelope::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Envelope.version)
}
 void Envelope::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Envelope.version)
}
 void Envelope::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Envelope.version)
}
 ::std::string* Envelope::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:Envelope.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Envelope::release_version() {
  // @@protoc_insertion_point(field_release:Envelope.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Envelope::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Envelope.version)
}

// required string submitter = 2;
bool Envelope::has_submitter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Envelope::set_has_submitter() {
  _has_bits_[0] |= 0x00000002u;
}
void Envelope::clear_has_submitter() {
  _has_bits_[0] &= ~0x00000002u;
}
void Envelope::clear_submitter() {
  submitter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_submitter();
}
 const ::std::string& Envelope::submitter() const {
  // @@protoc_insertion_point(field_get:Envelope.submitter)
  return submitter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Envelope::set_submitter(const ::std::string& value) {
  set_has_submitter();
  submitter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Envelope.submitter)
}
 void Envelope::set_submitter(const char* value) {
  set_has_submitter();
  submitter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Envelope.submitter)
}
 void Envelope::set_submitter(const char* value, size_t size) {
  set_has_submitter();
  submitter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Envelope.submitter)
}
 ::std::string* Envelope::mutable_submitter() {
  set_has_submitter();
  // @@protoc_insertion_point(field_mutable:Envelope.submitter)
  return submitter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Envelope::release_submitter() {
  // @@protoc_insertion_point(field_release:Envelope.submitter)
  clear_has_submitter();
  return submitter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Envelope::set_allocated_submitter(::std::string* submitter) {
  if (submitter != NULL) {
    set_has_submitter();
  } else {
    clear_has_submitter();
  }
  submitter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), submitter);
  // @@protoc_insertion_point(field_set_allocated:Envelope.submitter)
}

// required .VehicleMetaData vehicleMetaData = 3;
bool Envelope::has_vehiclemetadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Envelope::set_has_vehiclemetadata() {
  _has_bits_[0] |= 0x00000004u;
}
void Envelope::clear_has_vehiclemetadata() {
  _has_bits_[0] &= ~0x00000004u;
}
void Envelope::clear_vehiclemetadata() {
  if (vehiclemetadata_ != NULL) vehiclemetadata_->::VehicleMetaData::Clear();
  clear_has_vehiclemetadata();
}
const ::VehicleMetaData& Envelope::vehiclemetadata() const {
  // @@protoc_insertion_point(field_get:Envelope.vehicleMetaData)
  return vehiclemetadata_ != NULL ? *vehiclemetadata_ : *default_instance_->vehiclemetadata_;
}
::VehicleMetaData* Envelope::mutable_vehiclemetadata() {
  set_has_vehiclemetadata();
  if (vehiclemetadata_ == NULL) {
    vehiclemetadata_ = new ::VehicleMetaData;
  }
  // @@protoc_insertion_point(field_mutable:Envelope.vehicleMetaData)
  return vehiclemetadata_;
}
::VehicleMetaData* Envelope::release_vehiclemetadata() {
  // @@protoc_insertion_point(field_release:Envelope.vehicleMetaData)
  clear_has_vehiclemetadata();
  ::VehicleMetaData* temp = vehiclemetadata_;
  vehiclemetadata_ = NULL;
  return temp;
}
void Envelope::set_allocated_vehiclemetadata(::VehicleMetaData* vehiclemetadata) {
  delete vehiclemetadata_;
  vehiclemetadata_ = vehiclemetadata;
  if (vehiclemetadata) {
    set_has_vehiclemetadata();
  } else {
    clear_has_vehiclemetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Envelope.vehicleMetaData)
}

// optional int64 transientVehicleID = 4;
bool Envelope::has_transientvehicleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Envelope::set_has_transientvehicleid() {
  _has_bits_[0] |= 0x00000008u;
}
void Envelope::clear_has_transientvehicleid() {
  _has_bits_[0] &= ~0x00000008u;
}
void Envelope::clear_transientvehicleid() {
  transientvehicleid_ = GOOGLE_LONGLONG(0);
  clear_has_transientvehicleid();
}
 ::google::protobuf::int64 Envelope::transientvehicleid() const {
  // @@protoc_insertion_point(field_get:Envelope.transientVehicleID)
  return transientvehicleid_;
}
 void Envelope::set_transientvehicleid(::google::protobuf::int64 value) {
  set_has_transientvehicleid();
  transientvehicleid_ = value;
  // @@protoc_insertion_point(field_set:Envelope.transientVehicleID)
}

// optional int64 vehicleProfileID = 5;
bool Envelope::has_vehicleprofileid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Envelope::set_has_vehicleprofileid() {
  _has_bits_[0] |= 0x00000010u;
}
void Envelope::clear_has_vehicleprofileid() {
  _has_bits_[0] &= ~0x00000010u;
}
void Envelope::clear_vehicleprofileid() {
  vehicleprofileid_ = GOOGLE_LONGLONG(0);
  clear_has_vehicleprofileid();
}
 ::google::protobuf::int64 Envelope::vehicleprofileid() const {
  // @@protoc_insertion_point(field_get:Envelope.vehicleProfileID)
  return vehicleprofileid_;
}
 void Envelope::set_vehicleprofileid(::google::protobuf::int64 value) {
  set_has_vehicleprofileid();
  vehicleprofileid_ = value;
  // @@protoc_insertion_point(field_set:Envelope.vehicleProfileID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PositionEstimate_PositionTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionEstimate_PositionTypeEnum_descriptor_;
}
bool PositionEstimate_PositionTypeEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PositionEstimate_PositionTypeEnum PositionEstimate::RAW_GPS;
const PositionEstimate_PositionTypeEnum PositionEstimate::FILTERED;
const PositionEstimate_PositionTypeEnum PositionEstimate::MAP_MATCHED_REGULAR_MAP;
const PositionEstimate_PositionTypeEnum PositionEstimate::MAP_MATCHED_HD_MAP;
const PositionEstimate_PositionTypeEnum PositionEstimate::MAP_MATCHED_HD_MAP_LANE;
const PositionEstimate_PositionTypeEnum PositionEstimate::PositionTypeEnum_MIN;
const PositionEstimate_PositionTypeEnum PositionEstimate::PositionTypeEnum_MAX;
const int PositionEstimate::PositionTypeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PositionEstimate_SpeedDetectionEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionEstimate_SpeedDetectionEnum_descriptor_;
}
bool PositionEstimate_SpeedDetectionEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PositionEstimate_SpeedDetectionEnum PositionEstimate::SPEED_RAW_GPS;
const PositionEstimate_SpeedDetectionEnum PositionEstimate::SPEED_WHEEL_TICKS;
const PositionEstimate_SpeedDetectionEnum PositionEstimate::SPEED_RADAR_SONAR;
const PositionEstimate_SpeedDetectionEnum PositionEstimate::SpeedDetectionEnum_MIN;
const PositionEstimate_SpeedDetectionEnum PositionEstimate::SpeedDetectionEnum_MAX;
const int PositionEstimate::SpeedDetectionEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PositionEstimate_HeadingDetectionEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionEstimate_HeadingDetectionEnum_descriptor_;
}
bool PositionEstimate_HeadingDetectionEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PositionEstimate_HeadingDetectionEnum PositionEstimate::HEADING_RAW_GPS;
const PositionEstimate_HeadingDetectionEnum PositionEstimate::HEADING_MAGNETIC_SENSOR;
const PositionEstimate_HeadingDetectionEnum PositionEstimate::HEADING_MULTI_SENSOR_FUSION;
const PositionEstimate_HeadingDetectionEnum PositionEstimate::HEADING_BY_MAP;
const PositionEstimate_HeadingDetectionEnum PositionEstimate::HeadingDetectionEnum_MIN;
const PositionEstimate_HeadingDetectionEnum PositionEstimate::HeadingDetectionEnum_MAX;
const int PositionEstimate::HeadingDetectionEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionEstimate::kTimeStampUTCMsFieldNumber;
const int PositionEstimate::kPositionTypeFieldNumber;
const int PositionEstimate::kInterpolatedPointFieldNumber;
const int PositionEstimate::kLongitudeDegFieldNumber;
const int PositionEstimate::kLatitudeDegFieldNumber;
const int PositionEstimate::kHorizontalAccuracyMFieldNumber;
const int PositionEstimate::kAltitudeMFieldNumber;
const int PositionEstimate::kHeadingDegFieldNumber;
const int PositionEstimate::kSpeedMpsFieldNumber;
const int PositionEstimate::kAltitudeAccuracyMFieldNumber;
const int PositionEstimate::kHeadingAccuracyDegFieldNumber;
const int PositionEstimate::kSpeedAccuracyMpsFieldNumber;
const int PositionEstimate::kSpeedDetectionTypeFieldNumber;
const int PositionEstimate::kHeadingDetectionTypeFieldNumber;
const int PositionEstimate::kVehicleReferencedOrientationVectorDegFieldNumber;
const int PositionEstimate::kCurrentLaneEstimateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionEstimate::PositionEstimate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PositionEstimate)
}

void PositionEstimate::InitAsDefaultInstance() {
  vehiclereferencedorientationvector_deg_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
}

PositionEstimate::PositionEstimate(const PositionEstimate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PositionEstimate)
}

void PositionEstimate::SharedCtor() {
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  positiontype_ = 1;
  interpolatedpoint_ = false;
  longitude_deg_ = 0;
  latitude_deg_ = 0;
  horizontalaccuracy_m_ = 0;
  altitude_m_ = 0;
  heading_deg_ = 0;
  speed_mps_ = 0;
  altitudeaccuracy_m_ = 0;
  headingaccuracy_deg_ = 0;
  speedaccuracy_mps_ = 0;
  speeddetectiontype_ = 1;
  headingdetectiontype_ = 1;
  vehiclereferencedorientationvector_deg_ = NULL;
  currentlaneestimate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionEstimate::~PositionEstimate() {
  // @@protoc_insertion_point(destructor:PositionEstimate)
  SharedDtor();
}

void PositionEstimate::SharedDtor() {
  if (this != default_instance_) {
    delete vehiclereferencedorientationvector_deg_;
  }
}

void PositionEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionEstimate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionEstimate_descriptor_;
}

const PositionEstimate& PositionEstimate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

PositionEstimate* PositionEstimate::default_instance_ = NULL;

PositionEstimate* PositionEstimate::New(::google::protobuf::Arena* arena) const {
  PositionEstimate* n = new PositionEstimate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PositionEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:PositionEstimate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PositionEstimate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PositionEstimate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(interpolatedpoint_, heading_deg_);
    timestamputc_ms_ = GOOGLE_LONGLONG(0);
    positiontype_ = 1;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(speed_mps_, speedaccuracy_mps_);
    speeddetectiontype_ = 1;
    headingdetectiontype_ = 1;
    if (has_vehiclereferencedorientationvector_deg()) {
      if (vehiclereferencedorientationvector_deg_ != NULL) vehiclereferencedorientationvector_deg_->::Vector3D::Clear();
    }
    currentlaneestimate_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PositionEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PositionEstimate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_positionType;
        break;
      }

      // required .PositionEstimate.PositionTypeEnum positionType = 2;
      case 2: {
        if (tag == 16) {
         parse_positionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PositionEstimate_PositionTypeEnum_IsValid(value)) {
            set_positiontype(static_cast< ::PositionEstimate_PositionTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_interpolatedPoint;
        break;
      }

      // optional bool interpolatedPoint = 3;
      case 3: {
        if (tag == 24) {
         parse_interpolatedPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interpolatedpoint_)));
          set_has_interpolatedpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude_deg;
        break;
      }

      // required double longitude_deg = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_deg_)));
          set_has_longitude_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_latitude_deg;
        break;
      }

      // required double latitude_deg = 5;
      case 5: {
        if (tag == 41) {
         parse_latitude_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_deg_)));
          set_has_latitude_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_horizontalAccuracy_m;
        break;
      }

      // required double horizontalAccuracy_m = 6;
      case 6: {
        if (tag == 49) {
         parse_horizontalAccuracy_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontalaccuracy_m_)));
          set_has_horizontalaccuracy_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_altitude_m;
        break;
      }

      // optional double altitude_m = 7;
      case 7: {
        if (tag == 57) {
         parse_altitude_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_m_)));
          set_has_altitude_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_heading_deg;
        break;
      }

      // optional double heading_deg = 8;
      case 8: {
        if (tag == 65) {
         parse_heading_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_deg_)));
          set_has_heading_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_speed_mps;
        break;
      }

      // optional double speed_mps = 9;
      case 9: {
        if (tag == 73) {
         parse_speed_mps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_mps_)));
          set_has_speed_mps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_altitudeAccuracy_m;
        break;
      }

      // optional double altitudeAccuracy_m = 10;
      case 10: {
        if (tag == 81) {
         parse_altitudeAccuracy_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitudeaccuracy_m_)));
          set_has_altitudeaccuracy_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_headingAccuracy_deg;
        break;
      }

      // optional double headingAccuracy_deg = 11;
      case 11: {
        if (tag == 89) {
         parse_headingAccuracy_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headingaccuracy_deg_)));
          set_has_headingaccuracy_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_speedAccuracy_mps;
        break;
      }

      // optional double speedAccuracy_mps = 12;
      case 12: {
        if (tag == 97) {
         parse_speedAccuracy_mps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speedaccuracy_mps_)));
          set_has_speedaccuracy_mps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_speedDetectionType;
        break;
      }

      // optional .PositionEstimate.SpeedDetectionEnum speedDetectionType = 13;
      case 13: {
        if (tag == 104) {
         parse_speedDetectionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PositionEstimate_SpeedDetectionEnum_IsValid(value)) {
            set_speeddetectiontype(static_cast< ::PositionEstimate_SpeedDetectionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_headingDetectionType;
        break;
      }

      // optional .PositionEstimate.HeadingDetectionEnum headingDetectionType = 14;
      case 14: {
        if (tag == 112) {
         parse_headingDetectionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PositionEstimate_HeadingDetectionEnum_IsValid(value)) {
            set_headingdetectiontype(static_cast< ::PositionEstimate_HeadingDetectionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vehicleReferencedOrientationVector_deg;
        break;
      }

      // optional .Vector3D vehicleReferencedOrientationVector_deg = 15;
      case 15: {
        if (tag == 122) {
         parse_vehicleReferencedOrientationVector_deg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehiclereferencedorientationvector_deg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_currentLaneEstimate;
        break;
      }

      // optional int32 currentLaneEstimate = 16;
      case 16: {
        if (tag == 128) {
         parse_currentLaneEstimate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentlaneestimate_)));
          set_has_currentlaneestimate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PositionEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PositionEstimate)
  return false;
#undef DO_
}

void PositionEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PositionEstimate)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // required .PositionEstimate.PositionTypeEnum positionType = 2;
  if (has_positiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->positiontype(), output);
  }

  // optional bool interpolatedPoint = 3;
  if (has_interpolatedpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->interpolatedpoint(), output);
  }

  // required double longitude_deg = 4;
  if (has_longitude_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude_deg(), output);
  }

  // required double latitude_deg = 5;
  if (has_latitude_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude_deg(), output);
  }

  // required double horizontalAccuracy_m = 6;
  if (has_horizontalaccuracy_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->horizontalaccuracy_m(), output);
  }

  // optional double altitude_m = 7;
  if (has_altitude_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->altitude_m(), output);
  }

  // optional double heading_deg = 8;
  if (has_heading_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->heading_deg(), output);
  }

  // optional double speed_mps = 9;
  if (has_speed_mps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->speed_mps(), output);
  }

  // optional double altitudeAccuracy_m = 10;
  if (has_altitudeaccuracy_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->altitudeaccuracy_m(), output);
  }

  // optional double headingAccuracy_deg = 11;
  if (has_headingaccuracy_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->headingaccuracy_deg(), output);
  }

  // optional double speedAccuracy_mps = 12;
  if (has_speedaccuracy_mps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->speedaccuracy_mps(), output);
  }

  // optional .PositionEstimate.SpeedDetectionEnum speedDetectionType = 13;
  if (has_speeddetectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->speeddetectiontype(), output);
  }

  // optional .PositionEstimate.HeadingDetectionEnum headingDetectionType = 14;
  if (has_headingdetectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->headingdetectiontype(), output);
  }

  // optional .Vector3D vehicleReferencedOrientationVector_deg = 15;
  if (has_vehiclereferencedorientationvector_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->vehiclereferencedorientationvector_deg_, output);
  }

  // optional int32 currentLaneEstimate = 16;
  if (has_currentlaneestimate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->currentlaneestimate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PositionEstimate)
}

::google::protobuf::uint8* PositionEstimate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PositionEstimate)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // required .PositionEstimate.PositionTypeEnum positionType = 2;
  if (has_positiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->positiontype(), target);
  }

  // optional bool interpolatedPoint = 3;
  if (has_interpolatedpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->interpolatedpoint(), target);
  }

  // required double longitude_deg = 4;
  if (has_longitude_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude_deg(), target);
  }

  // required double latitude_deg = 5;
  if (has_latitude_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude_deg(), target);
  }

  // required double horizontalAccuracy_m = 6;
  if (has_horizontalaccuracy_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->horizontalaccuracy_m(), target);
  }

  // optional double altitude_m = 7;
  if (has_altitude_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->altitude_m(), target);
  }

  // optional double heading_deg = 8;
  if (has_heading_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->heading_deg(), target);
  }

  // optional double speed_mps = 9;
  if (has_speed_mps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->speed_mps(), target);
  }

  // optional double altitudeAccuracy_m = 10;
  if (has_altitudeaccuracy_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->altitudeaccuracy_m(), target);
  }

  // optional double headingAccuracy_deg = 11;
  if (has_headingaccuracy_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->headingaccuracy_deg(), target);
  }

  // optional double speedAccuracy_mps = 12;
  if (has_speedaccuracy_mps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->speedaccuracy_mps(), target);
  }

  // optional .PositionEstimate.SpeedDetectionEnum speedDetectionType = 13;
  if (has_speeddetectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->speeddetectiontype(), target);
  }

  // optional .PositionEstimate.HeadingDetectionEnum headingDetectionType = 14;
  if (has_headingdetectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->headingdetectiontype(), target);
  }

  // optional .Vector3D vehicleReferencedOrientationVector_deg = 15;
  if (has_vehiclereferencedorientationvector_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->vehiclereferencedorientationvector_deg_, false, target);
  }

  // optional int32 currentLaneEstimate = 16;
  if (has_currentlaneestimate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->currentlaneestimate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PositionEstimate)
  return target;
}

int PositionEstimate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PositionEstimate)
  int total_size = 0;

  if (has_timestamputc_ms()) {
    // required int64 timeStampUTC_ms = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }

  if (has_positiontype()) {
    // required .PositionEstimate.PositionTypeEnum positionType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->positiontype());
  }

  if (has_longitude_deg()) {
    // required double longitude_deg = 4;
    total_size += 1 + 8;
  }

  if (has_latitude_deg()) {
    // required double latitude_deg = 5;
    total_size += 1 + 8;
  }

  if (has_horizontalaccuracy_m()) {
    // required double horizontalAccuracy_m = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
int PositionEstimate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PositionEstimate)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003b) ^ 0x0000003b) == 0) {  // All required fields are present.
    // required int64 timeStampUTC_ms = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());

    // required .PositionEstimate.PositionTypeEnum positionType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->positiontype());

    // required double longitude_deg = 4;
    total_size += 1 + 8;

    // required double latitude_deg = 5;
    total_size += 1 + 8;

    // required double horizontalAccuracy_m = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 196u) {
    // optional bool interpolatedPoint = 3;
    if (has_interpolatedpoint()) {
      total_size += 1 + 1;
    }

    // optional double altitude_m = 7;
    if (has_altitude_m()) {
      total_size += 1 + 8;
    }

    // optional double heading_deg = 8;
    if (has_heading_deg()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double speed_mps = 9;
    if (has_speed_mps()) {
      total_size += 1 + 8;
    }

    // optional double altitudeAccuracy_m = 10;
    if (has_altitudeaccuracy_m()) {
      total_size += 1 + 8;
    }

    // optional double headingAccuracy_deg = 11;
    if (has_headingaccuracy_deg()) {
      total_size += 1 + 8;
    }

    // optional double speedAccuracy_mps = 12;
    if (has_speedaccuracy_mps()) {
      total_size += 1 + 8;
    }

    // optional .PositionEstimate.SpeedDetectionEnum speedDetectionType = 13;
    if (has_speeddetectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->speeddetectiontype());
    }

    // optional .PositionEstimate.HeadingDetectionEnum headingDetectionType = 14;
    if (has_headingdetectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->headingdetectiontype());
    }

    // optional .Vector3D vehicleReferencedOrientationVector_deg = 15;
    if (has_vehiclereferencedorientationvector_deg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehiclereferencedorientationvector_deg_);
    }

    // optional int32 currentLaneEstimate = 16;
    if (has_currentlaneestimate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentlaneestimate());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionEstimate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PositionEstimate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PositionEstimate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionEstimate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PositionEstimate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PositionEstimate)
    MergeFrom(*source);
  }
}

void PositionEstimate::MergeFrom(const PositionEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PositionEstimate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
    if (from.has_positiontype()) {
      set_positiontype(from.positiontype());
    }
    if (from.has_interpolatedpoint()) {
      set_interpolatedpoint(from.interpolatedpoint());
    }
    if (from.has_longitude_deg()) {
      set_longitude_deg(from.longitude_deg());
    }
    if (from.has_latitude_deg()) {
      set_latitude_deg(from.latitude_deg());
    }
    if (from.has_horizontalaccuracy_m()) {
      set_horizontalaccuracy_m(from.horizontalaccuracy_m());
    }
    if (from.has_altitude_m()) {
      set_altitude_m(from.altitude_m());
    }
    if (from.has_heading_deg()) {
      set_heading_deg(from.heading_deg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_speed_mps()) {
      set_speed_mps(from.speed_mps());
    }
    if (from.has_altitudeaccuracy_m()) {
      set_altitudeaccuracy_m(from.altitudeaccuracy_m());
    }
    if (from.has_headingaccuracy_deg()) {
      set_headingaccuracy_deg(from.headingaccuracy_deg());
    }
    if (from.has_speedaccuracy_mps()) {
      set_speedaccuracy_mps(from.speedaccuracy_mps());
    }
    if (from.has_speeddetectiontype()) {
      set_speeddetectiontype(from.speeddetectiontype());
    }
    if (from.has_headingdetectiontype()) {
      set_headingdetectiontype(from.headingdetectiontype());
    }
    if (from.has_vehiclereferencedorientationvector_deg()) {
      mutable_vehiclereferencedorientationvector_deg()->::Vector3D::MergeFrom(from.vehiclereferencedorientationvector_deg());
    }
    if (from.has_currentlaneestimate()) {
      set_currentlaneestimate(from.currentlaneestimate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PositionEstimate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PositionEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionEstimate::CopyFrom(const PositionEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PositionEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionEstimate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  if (has_vehiclereferencedorientationvector_deg()) {
    if (!this->vehiclereferencedorientationvector_deg_->IsInitialized()) return false;
  }
  return true;
}

void PositionEstimate::Swap(PositionEstimate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionEstimate::InternalSwap(PositionEstimate* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  std::swap(positiontype_, other->positiontype_);
  std::swap(interpolatedpoint_, other->interpolatedpoint_);
  std::swap(longitude_deg_, other->longitude_deg_);
  std::swap(latitude_deg_, other->latitude_deg_);
  std::swap(horizontalaccuracy_m_, other->horizontalaccuracy_m_);
  std::swap(altitude_m_, other->altitude_m_);
  std::swap(heading_deg_, other->heading_deg_);
  std::swap(speed_mps_, other->speed_mps_);
  std::swap(altitudeaccuracy_m_, other->altitudeaccuracy_m_);
  std::swap(headingaccuracy_deg_, other->headingaccuracy_deg_);
  std::swap(speedaccuracy_mps_, other->speedaccuracy_mps_);
  std::swap(speeddetectiontype_, other->speeddetectiontype_);
  std::swap(headingdetectiontype_, other->headingdetectiontype_);
  std::swap(vehiclereferencedorientationvector_deg_, other->vehiclereferencedorientationvector_deg_);
  std::swap(currentlaneestimate_, other->currentlaneestimate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PositionEstimate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionEstimate_descriptor_;
  metadata.reflection = PositionEstimate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PositionEstimate

// required int64 timeStampUTC_ms = 1;
bool PositionEstimate::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PositionEstimate::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void PositionEstimate::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void PositionEstimate::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 PositionEstimate::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void PositionEstimate::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.timeStampUTC_ms)
}

// required .PositionEstimate.PositionTypeEnum positionType = 2;
bool PositionEstimate::has_positiontype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PositionEstimate::set_has_positiontype() {
  _has_bits_[0] |= 0x00000002u;
}
void PositionEstimate::clear_has_positiontype() {
  _has_bits_[0] &= ~0x00000002u;
}
void PositionEstimate::clear_positiontype() {
  positiontype_ = 1;
  clear_has_positiontype();
}
 ::PositionEstimate_PositionTypeEnum PositionEstimate::positiontype() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.positionType)
  return static_cast< ::PositionEstimate_PositionTypeEnum >(positiontype_);
}
 void PositionEstimate::set_positiontype(::PositionEstimate_PositionTypeEnum value) {
  assert(::PositionEstimate_PositionTypeEnum_IsValid(value));
  set_has_positiontype();
  positiontype_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.positionType)
}

// optional bool interpolatedPoint = 3;
bool PositionEstimate::has_interpolatedpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PositionEstimate::set_has_interpolatedpoint() {
  _has_bits_[0] |= 0x00000004u;
}
void PositionEstimate::clear_has_interpolatedpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
void PositionEstimate::clear_interpolatedpoint() {
  interpolatedpoint_ = false;
  clear_has_interpolatedpoint();
}
 bool PositionEstimate::interpolatedpoint() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.interpolatedPoint)
  return interpolatedpoint_;
}
 void PositionEstimate::set_interpolatedpoint(bool value) {
  set_has_interpolatedpoint();
  interpolatedpoint_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.interpolatedPoint)
}

// required double longitude_deg = 4;
bool PositionEstimate::has_longitude_deg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PositionEstimate::set_has_longitude_deg() {
  _has_bits_[0] |= 0x00000008u;
}
void PositionEstimate::clear_has_longitude_deg() {
  _has_bits_[0] &= ~0x00000008u;
}
void PositionEstimate::clear_longitude_deg() {
  longitude_deg_ = 0;
  clear_has_longitude_deg();
}
 double PositionEstimate::longitude_deg() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.longitude_deg)
  return longitude_deg_;
}
 void PositionEstimate::set_longitude_deg(double value) {
  set_has_longitude_deg();
  longitude_deg_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.longitude_deg)
}

// required double latitude_deg = 5;
bool PositionEstimate::has_latitude_deg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PositionEstimate::set_has_latitude_deg() {
  _has_bits_[0] |= 0x00000010u;
}
void PositionEstimate::clear_has_latitude_deg() {
  _has_bits_[0] &= ~0x00000010u;
}
void PositionEstimate::clear_latitude_deg() {
  latitude_deg_ = 0;
  clear_has_latitude_deg();
}
 double PositionEstimate::latitude_deg() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.latitude_deg)
  return latitude_deg_;
}
 void PositionEstimate::set_latitude_deg(double value) {
  set_has_latitude_deg();
  latitude_deg_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.latitude_deg)
}

// required double horizontalAccuracy_m = 6;
bool PositionEstimate::has_horizontalaccuracy_m() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PositionEstimate::set_has_horizontalaccuracy_m() {
  _has_bits_[0] |= 0x00000020u;
}
void PositionEstimate::clear_has_horizontalaccuracy_m() {
  _has_bits_[0] &= ~0x00000020u;
}
void PositionEstimate::clear_horizontalaccuracy_m() {
  horizontalaccuracy_m_ = 0;
  clear_has_horizontalaccuracy_m();
}
 double PositionEstimate::horizontalaccuracy_m() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.horizontalAccuracy_m)
  return horizontalaccuracy_m_;
}
 void PositionEstimate::set_horizontalaccuracy_m(double value) {
  set_has_horizontalaccuracy_m();
  horizontalaccuracy_m_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.horizontalAccuracy_m)
}

// optional double altitude_m = 7;
bool PositionEstimate::has_altitude_m() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PositionEstimate::set_has_altitude_m() {
  _has_bits_[0] |= 0x00000040u;
}
void PositionEstimate::clear_has_altitude_m() {
  _has_bits_[0] &= ~0x00000040u;
}
void PositionEstimate::clear_altitude_m() {
  altitude_m_ = 0;
  clear_has_altitude_m();
}
 double PositionEstimate::altitude_m() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.altitude_m)
  return altitude_m_;
}
 void PositionEstimate::set_altitude_m(double value) {
  set_has_altitude_m();
  altitude_m_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.altitude_m)
}

// optional double heading_deg = 8;
bool PositionEstimate::has_heading_deg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PositionEstimate::set_has_heading_deg() {
  _has_bits_[0] |= 0x00000080u;
}
void PositionEstimate::clear_has_heading_deg() {
  _has_bits_[0] &= ~0x00000080u;
}
void PositionEstimate::clear_heading_deg() {
  heading_deg_ = 0;
  clear_has_heading_deg();
}
 double PositionEstimate::heading_deg() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.heading_deg)
  return heading_deg_;
}
 void PositionEstimate::set_heading_deg(double value) {
  set_has_heading_deg();
  heading_deg_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.heading_deg)
}

// optional double speed_mps = 9;
bool PositionEstimate::has_speed_mps() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PositionEstimate::set_has_speed_mps() {
  _has_bits_[0] |= 0x00000100u;
}
void PositionEstimate::clear_has_speed_mps() {
  _has_bits_[0] &= ~0x00000100u;
}
void PositionEstimate::clear_speed_mps() {
  speed_mps_ = 0;
  clear_has_speed_mps();
}
 double PositionEstimate::speed_mps() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.speed_mps)
  return speed_mps_;
}
 void PositionEstimate::set_speed_mps(double value) {
  set_has_speed_mps();
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.speed_mps)
}

// optional double altitudeAccuracy_m = 10;
bool PositionEstimate::has_altitudeaccuracy_m() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PositionEstimate::set_has_altitudeaccuracy_m() {
  _has_bits_[0] |= 0x00000200u;
}
void PositionEstimate::clear_has_altitudeaccuracy_m() {
  _has_bits_[0] &= ~0x00000200u;
}
void PositionEstimate::clear_altitudeaccuracy_m() {
  altitudeaccuracy_m_ = 0;
  clear_has_altitudeaccuracy_m();
}
 double PositionEstimate::altitudeaccuracy_m() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.altitudeAccuracy_m)
  return altitudeaccuracy_m_;
}
 void PositionEstimate::set_altitudeaccuracy_m(double value) {
  set_has_altitudeaccuracy_m();
  altitudeaccuracy_m_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.altitudeAccuracy_m)
}

// optional double headingAccuracy_deg = 11;
bool PositionEstimate::has_headingaccuracy_deg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PositionEstimate::set_has_headingaccuracy_deg() {
  _has_bits_[0] |= 0x00000400u;
}
void PositionEstimate::clear_has_headingaccuracy_deg() {
  _has_bits_[0] &= ~0x00000400u;
}
void PositionEstimate::clear_headingaccuracy_deg() {
  headingaccuracy_deg_ = 0;
  clear_has_headingaccuracy_deg();
}
 double PositionEstimate::headingaccuracy_deg() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.headingAccuracy_deg)
  return headingaccuracy_deg_;
}
 void PositionEstimate::set_headingaccuracy_deg(double value) {
  set_has_headingaccuracy_deg();
  headingaccuracy_deg_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.headingAccuracy_deg)
}

// optional double speedAccuracy_mps = 12;
bool PositionEstimate::has_speedaccuracy_mps() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PositionEstimate::set_has_speedaccuracy_mps() {
  _has_bits_[0] |= 0x00000800u;
}
void PositionEstimate::clear_has_speedaccuracy_mps() {
  _has_bits_[0] &= ~0x00000800u;
}
void PositionEstimate::clear_speedaccuracy_mps() {
  speedaccuracy_mps_ = 0;
  clear_has_speedaccuracy_mps();
}
 double PositionEstimate::speedaccuracy_mps() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.speedAccuracy_mps)
  return speedaccuracy_mps_;
}
 void PositionEstimate::set_speedaccuracy_mps(double value) {
  set_has_speedaccuracy_mps();
  speedaccuracy_mps_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.speedAccuracy_mps)
}

// optional .PositionEstimate.SpeedDetectionEnum speedDetectionType = 13;
bool PositionEstimate::has_speeddetectiontype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PositionEstimate::set_has_speeddetectiontype() {
  _has_bits_[0] |= 0x00001000u;
}
void PositionEstimate::clear_has_speeddetectiontype() {
  _has_bits_[0] &= ~0x00001000u;
}
void PositionEstimate::clear_speeddetectiontype() {
  speeddetectiontype_ = 1;
  clear_has_speeddetectiontype();
}
 ::PositionEstimate_SpeedDetectionEnum PositionEstimate::speeddetectiontype() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.speedDetectionType)
  return static_cast< ::PositionEstimate_SpeedDetectionEnum >(speeddetectiontype_);
}
 void PositionEstimate::set_speeddetectiontype(::PositionEstimate_SpeedDetectionEnum value) {
  assert(::PositionEstimate_SpeedDetectionEnum_IsValid(value));
  set_has_speeddetectiontype();
  speeddetectiontype_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.speedDetectionType)
}

// optional .PositionEstimate.HeadingDetectionEnum headingDetectionType = 14;
bool PositionEstimate::has_headingdetectiontype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PositionEstimate::set_has_headingdetectiontype() {
  _has_bits_[0] |= 0x00002000u;
}
void PositionEstimate::clear_has_headingdetectiontype() {
  _has_bits_[0] &= ~0x00002000u;
}
void PositionEstimate::clear_headingdetectiontype() {
  headingdetectiontype_ = 1;
  clear_has_headingdetectiontype();
}
 ::PositionEstimate_HeadingDetectionEnum PositionEstimate::headingdetectiontype() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.headingDetectionType)
  return static_cast< ::PositionEstimate_HeadingDetectionEnum >(headingdetectiontype_);
}
 void PositionEstimate::set_headingdetectiontype(::PositionEstimate_HeadingDetectionEnum value) {
  assert(::PositionEstimate_HeadingDetectionEnum_IsValid(value));
  set_has_headingdetectiontype();
  headingdetectiontype_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.headingDetectionType)
}

// optional .Vector3D vehicleReferencedOrientationVector_deg = 15;
bool PositionEstimate::has_vehiclereferencedorientationvector_deg() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PositionEstimate::set_has_vehiclereferencedorientationvector_deg() {
  _has_bits_[0] |= 0x00004000u;
}
void PositionEstimate::clear_has_vehiclereferencedorientationvector_deg() {
  _has_bits_[0] &= ~0x00004000u;
}
void PositionEstimate::clear_vehiclereferencedorientationvector_deg() {
  if (vehiclereferencedorientationvector_deg_ != NULL) vehiclereferencedorientationvector_deg_->::Vector3D::Clear();
  clear_has_vehiclereferencedorientationvector_deg();
}
const ::Vector3D& PositionEstimate::vehiclereferencedorientationvector_deg() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.vehicleReferencedOrientationVector_deg)
  return vehiclereferencedorientationvector_deg_ != NULL ? *vehiclereferencedorientationvector_deg_ : *default_instance_->vehiclereferencedorientationvector_deg_;
}
::Vector3D* PositionEstimate::mutable_vehiclereferencedorientationvector_deg() {
  set_has_vehiclereferencedorientationvector_deg();
  if (vehiclereferencedorientationvector_deg_ == NULL) {
    vehiclereferencedorientationvector_deg_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:PositionEstimate.vehicleReferencedOrientationVector_deg)
  return vehiclereferencedorientationvector_deg_;
}
::Vector3D* PositionEstimate::release_vehiclereferencedorientationvector_deg() {
  // @@protoc_insertion_point(field_release:PositionEstimate.vehicleReferencedOrientationVector_deg)
  clear_has_vehiclereferencedorientationvector_deg();
  ::Vector3D* temp = vehiclereferencedorientationvector_deg_;
  vehiclereferencedorientationvector_deg_ = NULL;
  return temp;
}
void PositionEstimate::set_allocated_vehiclereferencedorientationvector_deg(::Vector3D* vehiclereferencedorientationvector_deg) {
  delete vehiclereferencedorientationvector_deg_;
  vehiclereferencedorientationvector_deg_ = vehiclereferencedorientationvector_deg;
  if (vehiclereferencedorientationvector_deg) {
    set_has_vehiclereferencedorientationvector_deg();
  } else {
    clear_has_vehiclereferencedorientationvector_deg();
  }
  // @@protoc_insertion_point(field_set_allocated:PositionEstimate.vehicleReferencedOrientationVector_deg)
}

// optional int32 currentLaneEstimate = 16;
bool PositionEstimate::has_currentlaneestimate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PositionEstimate::set_has_currentlaneestimate() {
  _has_bits_[0] |= 0x00008000u;
}
void PositionEstimate::clear_has_currentlaneestimate() {
  _has_bits_[0] &= ~0x00008000u;
}
void PositionEstimate::clear_currentlaneestimate() {
  currentlaneestimate_ = 0;
  clear_has_currentlaneestimate();
}
 ::google::protobuf::int32 PositionEstimate::currentlaneestimate() const {
  // @@protoc_insertion_point(field_get:PositionEstimate.currentLaneEstimate)
  return currentlaneestimate_;
}
 void PositionEstimate::set_currentlaneestimate(::google::protobuf::int32 value) {
  set_has_currentlaneestimate();
  currentlaneestimate_ = value;
  // @@protoc_insertion_point(field_set:PositionEstimate.currentLaneEstimate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathSegment::kPositionEstimateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathSegment::PathSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PathSegment)
}

void PathSegment::InitAsDefaultInstance() {
}

PathSegment::PathSegment(const PathSegment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PathSegment)
}

void PathSegment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathSegment::~PathSegment() {
  // @@protoc_insertion_point(destructor:PathSegment)
  SharedDtor();
}

void PathSegment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathSegment_descriptor_;
}

const PathSegment& PathSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

PathSegment* PathSegment::default_instance_ = NULL;

PathSegment* PathSegment::New(::google::protobuf::Arena* arena) const {
  PathSegment* n = new PathSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:PathSegment)
  positionestimate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PathSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PositionEstimate positionEstimate = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_positionEstimate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_positionestimate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_positionEstimate;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PathSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PathSegment)
  return false;
#undef DO_
}

void PathSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PathSegment)
  // repeated .PositionEstimate positionEstimate = 1;
  for (unsigned int i = 0, n = this->positionestimate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->positionestimate(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PathSegment)
}

::google::protobuf::uint8* PathSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PathSegment)
  // repeated .PositionEstimate positionEstimate = 1;
  for (unsigned int i = 0, n = this->positionestimate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->positionestimate(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PathSegment)
  return target;
}

int PathSegment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PathSegment)
  int total_size = 0;

  // repeated .PositionEstimate positionEstimate = 1;
  total_size += 1 * this->positionestimate_size();
  for (int i = 0; i < this->positionestimate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->positionestimate(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PathSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathSegment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PathSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PathSegment)
    MergeFrom(*source);
  }
}

void PathSegment::MergeFrom(const PathSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PathSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  positionestimate_.MergeFrom(from.positionestimate_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PathSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathSegment::CopyFrom(const PathSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathSegment::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->positionestimate())) return false;
  return true;
}

void PathSegment::Swap(PathSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathSegment::InternalSwap(PathSegment* other) {
  positionestimate_.UnsafeArenaSwap(&other->positionestimate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathSegment_descriptor_;
  metadata.reflection = PathSegment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathSegment

// repeated .PositionEstimate positionEstimate = 1;
int PathSegment::positionestimate_size() const {
  return positionestimate_.size();
}
void PathSegment::clear_positionestimate() {
  positionestimate_.Clear();
}
const ::PositionEstimate& PathSegment::positionestimate(int index) const {
  // @@protoc_insertion_point(field_get:PathSegment.positionEstimate)
  return positionestimate_.Get(index);
}
::PositionEstimate* PathSegment::mutable_positionestimate(int index) {
  // @@protoc_insertion_point(field_mutable:PathSegment.positionEstimate)
  return positionestimate_.Mutable(index);
}
::PositionEstimate* PathSegment::add_positionestimate() {
  // @@protoc_insertion_point(field_add:PathSegment.positionEstimate)
  return positionestimate_.Add();
}
::google::protobuf::RepeatedPtrField< ::PositionEstimate >*
PathSegment::mutable_positionestimate() {
  // @@protoc_insertion_point(field_mutable_list:PathSegment.positionEstimate)
  return &positionestimate_;
}
const ::google::protobuf::RepeatedPtrField< ::PositionEstimate >&
PathSegment::positionestimate() const {
  // @@protoc_insertion_point(field_list:PathSegment.positionEstimate)
  return positionestimate_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path::kPositionEstimateFieldNumber;
const int Path::kPositionSegmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Path)
}

void Path::InitAsDefaultInstance() {
}

Path::Path(const Path& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Path)
}

void Path::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:Path)
  SharedDtor();
}

void Path::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_descriptor_;
}

const Path& Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

Path* Path::default_instance_ = NULL;

Path* Path::New(::google::protobuf::Arena* arena) const {
  Path* n = new Path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:Path)
  positionestimate_.Clear();
  positionsegments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PositionEstimate positionEstimate = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_positionEstimate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_positionestimate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_positionEstimate;
        if (input->ExpectTag(18)) goto parse_loop_positionSegments;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .PathSegment positionSegments = 2 [deprecated = true];
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_positionSegments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_positionsegments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_positionSegments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Path)
  // repeated .PositionEstimate positionEstimate = 1;
  for (unsigned int i = 0, n = this->positionestimate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->positionestimate(i), output);
  }

  // repeated .PathSegment positionSegments = 2 [deprecated = true];
  for (unsigned int i = 0, n = this->positionsegments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->positionsegments(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Path)
}

::google::protobuf::uint8* Path::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Path)
  // repeated .PositionEstimate positionEstimate = 1;
  for (unsigned int i = 0, n = this->positionestimate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->positionestimate(i), false, target);
  }

  // repeated .PathSegment positionSegments = 2 [deprecated = true];
  for (unsigned int i = 0, n = this->positionsegments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->positionsegments(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Path)
  return target;
}

int Path::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Path)
  int total_size = 0;

  // repeated .PositionEstimate positionEstimate = 1;
  total_size += 1 * this->positionestimate_size();
  for (int i = 0; i < this->positionestimate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->positionestimate(i));
  }

  // repeated .PathSegment positionSegments = 2 [deprecated = true];
  total_size += 1 * this->positionsegments_size();
  for (int i = 0; i < this->positionsegments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->positionsegments(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Path)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Path* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Path>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Path)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Path)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  positionestimate_.MergeFrom(from.positionestimate_);
  positionsegments_.MergeFrom(from.positionsegments_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->positionestimate())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->positionsegments())) return false;
  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  positionestimate_.UnsafeArenaSwap(&other->positionestimate_);
  positionsegments_.UnsafeArenaSwap(&other->positionsegments_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_descriptor_;
  metadata.reflection = Path_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Path

// repeated .PositionEstimate positionEstimate = 1;
int Path::positionestimate_size() const {
  return positionestimate_.size();
}
void Path::clear_positionestimate() {
  positionestimate_.Clear();
}
const ::PositionEstimate& Path::positionestimate(int index) const {
  // @@protoc_insertion_point(field_get:Path.positionEstimate)
  return positionestimate_.Get(index);
}
::PositionEstimate* Path::mutable_positionestimate(int index) {
  // @@protoc_insertion_point(field_mutable:Path.positionEstimate)
  return positionestimate_.Mutable(index);
}
::PositionEstimate* Path::add_positionestimate() {
  // @@protoc_insertion_point(field_add:Path.positionEstimate)
  return positionestimate_.Add();
}
::google::protobuf::RepeatedPtrField< ::PositionEstimate >*
Path::mutable_positionestimate() {
  // @@protoc_insertion_point(field_mutable_list:Path.positionEstimate)
  return &positionestimate_;
}
const ::google::protobuf::RepeatedPtrField< ::PositionEstimate >&
Path::positionestimate() const {
  // @@protoc_insertion_point(field_list:Path.positionEstimate)
  return positionestimate_;
}

// repeated .PathSegment positionSegments = 2 [deprecated = true];
int Path::positionsegments_size() const {
  return positionsegments_.size();
}
void Path::clear_positionsegments() {
  positionsegments_.Clear();
}
const ::PathSegment& Path::positionsegments(int index) const {
  // @@protoc_insertion_point(field_get:Path.positionSegments)
  return positionsegments_.Get(index);
}
::PathSegment* Path::mutable_positionsegments(int index) {
  // @@protoc_insertion_point(field_mutable:Path.positionSegments)
  return positionsegments_.Mutable(index);
}
::PathSegment* Path::add_positionsegments() {
  // @@protoc_insertion_point(field_add:Path.positionSegments)
  return positionsegments_.Add();
}
::google::protobuf::RepeatedPtrField< ::PathSegment >*
Path::mutable_positionsegments() {
  // @@protoc_insertion_point(field_mutable_list:Path.positionSegments)
  return &positionsegments_;
}
const ::google::protobuf::RepeatedPtrField< ::PathSegment >&
Path::positionsegments() const {
  // @@protoc_insertion_point(field_list:Path.positionSegments)
  return positionsegments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* VehicleStatus_TransmissionModeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleStatus_TransmissionModeEnum_descriptor_;
}
bool VehicleStatus_TransmissionModeEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleStatus_TransmissionModeEnum VehicleStatus::PARK;
const VehicleStatus_TransmissionModeEnum VehicleStatus::COASTING;
const VehicleStatus_TransmissionModeEnum VehicleStatus::DRIVE;
const VehicleStatus_TransmissionModeEnum VehicleStatus::REVERSE;
const VehicleStatus_TransmissionModeEnum VehicleStatus::TransmissionModeEnum_MIN;
const VehicleStatus_TransmissionModeEnum VehicleStatus::TransmissionModeEnum_MAX;
const int VehicleStatus::TransmissionModeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehicleStatus_LightStateBitfield_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleStatus_LightStateBitfield_descriptor_;
}
bool VehicleStatus_LightStateBitfield_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleStatus_LightStateBitfield VehicleStatus::LOWBEAMS;
const VehicleStatus_LightStateBitfield VehicleStatus::HIGHBEAMS;
const VehicleStatus_LightStateBitfield VehicleStatus::FOGLAMP_FRONT;
const VehicleStatus_LightStateBitfield VehicleStatus::FOGLAMP_REAR;
const VehicleStatus_LightStateBitfield VehicleStatus::HAZARD;
const VehicleStatus_LightStateBitfield VehicleStatus::LEFT_TURN;
const VehicleStatus_LightStateBitfield VehicleStatus::RIGHT_TURN;
const VehicleStatus_LightStateBitfield VehicleStatus::LightStateBitfield_MIN;
const VehicleStatus_LightStateBitfield VehicleStatus::LightStateBitfield_MAX;
const int VehicleStatus::LightStateBitfield_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehicleStatus_WiperStateEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleStatus_WiperStateEnum_descriptor_;
}
bool VehicleStatus_WiperStateEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleStatus_WiperStateEnum VehicleStatus::WIPING_OFF;
const VehicleStatus_WiperStateEnum VehicleStatus::WIPING_SLOW;
const VehicleStatus_WiperStateEnum VehicleStatus::WIPING_MEDIUM;
const VehicleStatus_WiperStateEnum VehicleStatus::WIPING_FAST;
const VehicleStatus_WiperStateEnum VehicleStatus::WIPING_INTERVALL;
const VehicleStatus_WiperStateEnum VehicleStatus::WiperStateEnum_MIN;
const VehicleStatus_WiperStateEnum VehicleStatus::WiperStateEnum_MAX;
const int VehicleStatus::WiperStateEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehicleStatus_MaintenanceLightStateBitfield_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleStatus_MaintenanceLightStateBitfield_descriptor_;
}
bool VehicleStatus_MaintenanceLightStateBitfield_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleStatus_MaintenanceLightStateBitfield VehicleStatus::WARNING_ENGINE_CONTROL;
const VehicleStatus_MaintenanceLightStateBitfield VehicleStatus::WARNING_OIL_PRESSURE;
const VehicleStatus_MaintenanceLightStateBitfield VehicleStatus::WARNING_COOLANT_TEMP;
const VehicleStatus_MaintenanceLightStateBitfield VehicleStatus::WARNING_VEHICLE_SERVICE;
const VehicleStatus_MaintenanceLightStateBitfield VehicleStatus::WARNING_BATTERY_CHARGING;
const VehicleStatus_MaintenanceLightStateBitfield VehicleStatus::WARNING_TIRE_PRESSURE;
const VehicleStatus_MaintenanceLightStateBitfield VehicleStatus::WARNING_LAMP_OUT;
const VehicleStatus_MaintenanceLightStateBitfield VehicleStatus::WARNING_OTHER_HIGH_PRIO;
const VehicleStatus_MaintenanceLightStateBitfield VehicleStatus::WARNING_OTHER_LOW_PRIO;
const VehicleStatus_MaintenanceLightStateBitfield VehicleStatus::MaintenanceLightStateBitfield_MIN;
const VehicleStatus_MaintenanceLightStateBitfield VehicleStatus::MaintenanceLightStateBitfield_MAX;
const int VehicleStatus::MaintenanceLightStateBitfield_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleStatus::kTimeStampUTCMsFieldNumber;
const int VehicleStatus::kTransmissionModeFieldNumber;
const int VehicleStatus::kLightStateBitfieldFieldNumber;
const int VehicleStatus::kWiperStateFieldNumber;
const int VehicleStatus::kTemperatureExternalCelFieldNumber;
const int VehicleStatus::kWiperSpeedWpmFieldNumber;
const int VehicleStatus::kDriveWheelReferenceFieldNumber;
const int VehicleStatus::kChassisClearanceMFieldNumber;
const int VehicleStatus::kMileageKmFieldNumber;
const int VehicleStatus::kPrimaryFuelStateFieldNumber;
const int VehicleStatus::kPrimaryFuelStateAccuracyFieldNumber;
const int VehicleStatus::kEstimatedPrimaryRangeKmFieldNumber;
const int VehicleStatus::kSecondaryFuelStateFieldNumber;
const int VehicleStatus::kSecondaryFuelStateAccuracyFieldNumber;
const int VehicleStatus::kEstimatedSecondaryRangeKmFieldNumber;
const int VehicleStatus::kMaintenanceLightStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleStatus::VehicleStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleStatus)
}

void VehicleStatus::InitAsDefaultInstance() {
}

VehicleStatus::VehicleStatus(const VehicleStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VehicleStatus)
}

void VehicleStatus::SharedCtor() {
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  transmissionmode_ = 1;
  lightstatebitfield_ = GOOGLE_LONGLONG(0);
  wiperstate_ = 1;
  temperatureexternal_cel_ = 0;
  wiperspeed_wpm_ = 0;
  drivewheelreference_ = GOOGLE_LONGLONG(0);
  chassisclearance_m_ = 0;
  mileage_km_ = 0;
  primaryfuelstate_ = 0;
  primaryfuelstateaccuracy_ = 0;
  estimatedprimaryrange_km_ = 0;
  secondaryfuelstate_ = 0;
  secondaryfuelstateaccuracy_ = 0;
  estimatedsecondaryrange_km_ = 0;
  maintenancelightstate_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleStatus::~VehicleStatus() {
  // @@protoc_insertion_point(destructor:VehicleStatus)
  SharedDtor();
}

void VehicleStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleStatus_descriptor_;
}

const VehicleStatus& VehicleStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

VehicleStatus* VehicleStatus::default_instance_ = NULL;

VehicleStatus* VehicleStatus::New(::google::protobuf::Arena* arena) const {
  VehicleStatus* n = new VehicleStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(timestamputc_ms_, lightstatebitfield_);
    ZR_(temperatureexternal_cel_, chassisclearance_m_);
    transmissionmode_ = 1;
    wiperstate_ = 1;
    wiperspeed_wpm_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(mileage_km_, primaryfuelstateaccuracy_);
    ZR_(estimatedprimaryrange_km_, estimatedsecondaryrange_km_);
    maintenancelightstate_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transmissionMode;
        break;
      }

      // optional .VehicleStatus.TransmissionModeEnum transmissionMode = 2;
      case 2: {
        if (tag == 16) {
         parse_transmissionMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VehicleStatus_TransmissionModeEnum_IsValid(value)) {
            set_transmissionmode(static_cast< ::VehicleStatus_TransmissionModeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lightStateBitfield;
        break;
      }

      // optional int64 lightStateBitfield = 3;
      case 3: {
        if (tag == 24) {
         parse_lightStateBitfield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lightstatebitfield_)));
          set_has_lightstatebitfield();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wiperState;
        break;
      }

      // optional .VehicleStatus.WiperStateEnum wiperState = 4;
      case 4: {
        if (tag == 32) {
         parse_wiperState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VehicleStatus_WiperStateEnum_IsValid(value)) {
            set_wiperstate(static_cast< ::VehicleStatus_WiperStateEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_temperatureExternal_cel;
        break;
      }

      // optional double temperatureExternal_cel = 5 [deprecated = true];
      case 5: {
        if (tag == 41) {
         parse_temperatureExternal_cel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperatureexternal_cel_)));
          set_has_temperatureexternal_cel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_wiperSpeed_wpm;
        break;
      }

      // optional int32 wiperSpeed_wpm = 6;
      case 6: {
        if (tag == 48) {
         parse_wiperSpeed_wpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiperspeed_wpm_)));
          set_has_wiperspeed_wpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_driveWheelReference;
        break;
      }

      // optional int64 driveWheelReference = 7;
      case 7: {
        if (tag == 56) {
         parse_driveWheelReference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &drivewheelreference_)));
          set_has_drivewheelreference();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_chassisClearance_m;
        break;
      }

      // optional double chassisClearance_m = 8;
      case 8: {
        if (tag == 65) {
         parse_chassisClearance_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chassisclearance_m_)));
          set_has_chassisclearance_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_mileage_km;
        break;
      }

      // optional double mileage_km = 9;
      case 9: {
        if (tag == 73) {
         parse_mileage_km:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mileage_km_)));
          set_has_mileage_km();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_primaryFuelState;
        break;
      }

      // optional double primaryFuelState = 10;
      case 10: {
        if (tag == 81) {
         parse_primaryFuelState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &primaryfuelstate_)));
          set_has_primaryfuelstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_primaryFuelStateAccuracy;
        break;
      }

      // optional double primaryFuelStateAccuracy = 11;
      case 11: {
        if (tag == 89) {
         parse_primaryFuelStateAccuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &primaryfuelstateaccuracy_)));
          set_has_primaryfuelstateaccuracy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_estimatedPrimaryRange_km;
        break;
      }

      // optional double estimatedPrimaryRange_km = 12;
      case 12: {
        if (tag == 97) {
         parse_estimatedPrimaryRange_km:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &estimatedprimaryrange_km_)));
          set_has_estimatedprimaryrange_km();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_secondaryFuelState;
        break;
      }

      // optional double secondaryFuelState = 13;
      case 13: {
        if (tag == 105) {
         parse_secondaryFuelState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &secondaryfuelstate_)));
          set_has_secondaryfuelstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_secondaryFuelStateAccuracy;
        break;
      }

      // optional double secondaryFuelStateAccuracy = 14;
      case 14: {
        if (tag == 113) {
         parse_secondaryFuelStateAccuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &secondaryfuelstateaccuracy_)));
          set_has_secondaryfuelstateaccuracy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_estimatedSecondaryRange_km;
        break;
      }

      // optional double estimatedSecondaryRange_km = 15;
      case 15: {
        if (tag == 121) {
         parse_estimatedSecondaryRange_km:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &estimatedsecondaryrange_km_)));
          set_has_estimatedsecondaryrange_km();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_maintenanceLightState;
        break;
      }

      // optional .VehicleStatus.MaintenanceLightStateBitfield maintenanceLightState = 16;
      case 16: {
        if (tag == 128) {
         parse_maintenanceLightState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VehicleStatus_MaintenanceLightStateBitfield_IsValid(value)) {
            set_maintenancelightstate(static_cast< ::VehicleStatus_MaintenanceLightStateBitfield >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleStatus)
  return false;
#undef DO_
}

void VehicleStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleStatus)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // optional .VehicleStatus.TransmissionModeEnum transmissionMode = 2;
  if (has_transmissionmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->transmissionmode(), output);
  }

  // optional int64 lightStateBitfield = 3;
  if (has_lightstatebitfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lightstatebitfield(), output);
  }

  // optional .VehicleStatus.WiperStateEnum wiperState = 4;
  if (has_wiperstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->wiperstate(), output);
  }

  // optional double temperatureExternal_cel = 5 [deprecated = true];
  if (has_temperatureexternal_cel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->temperatureexternal_cel(), output);
  }

  // optional int32 wiperSpeed_wpm = 6;
  if (has_wiperspeed_wpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wiperspeed_wpm(), output);
  }

  // optional int64 driveWheelReference = 7;
  if (has_drivewheelreference()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->drivewheelreference(), output);
  }

  // optional double chassisClearance_m = 8;
  if (has_chassisclearance_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->chassisclearance_m(), output);
  }

  // optional double mileage_km = 9;
  if (has_mileage_km()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->mileage_km(), output);
  }

  // optional double primaryFuelState = 10;
  if (has_primaryfuelstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->primaryfuelstate(), output);
  }

  // optional double primaryFuelStateAccuracy = 11;
  if (has_primaryfuelstateaccuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->primaryfuelstateaccuracy(), output);
  }

  // optional double estimatedPrimaryRange_km = 12;
  if (has_estimatedprimaryrange_km()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->estimatedprimaryrange_km(), output);
  }

  // optional double secondaryFuelState = 13;
  if (has_secondaryfuelstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->secondaryfuelstate(), output);
  }

  // optional double secondaryFuelStateAccuracy = 14;
  if (has_secondaryfuelstateaccuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->secondaryfuelstateaccuracy(), output);
  }

  // optional double estimatedSecondaryRange_km = 15;
  if (has_estimatedsecondaryrange_km()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->estimatedsecondaryrange_km(), output);
  }

  // optional .VehicleStatus.MaintenanceLightStateBitfield maintenanceLightState = 16;
  if (has_maintenancelightstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->maintenancelightstate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleStatus)
}

::google::protobuf::uint8* VehicleStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VehicleStatus)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // optional .VehicleStatus.TransmissionModeEnum transmissionMode = 2;
  if (has_transmissionmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->transmissionmode(), target);
  }

  // optional int64 lightStateBitfield = 3;
  if (has_lightstatebitfield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lightstatebitfield(), target);
  }

  // optional .VehicleStatus.WiperStateEnum wiperState = 4;
  if (has_wiperstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->wiperstate(), target);
  }

  // optional double temperatureExternal_cel = 5 [deprecated = true];
  if (has_temperatureexternal_cel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->temperatureexternal_cel(), target);
  }

  // optional int32 wiperSpeed_wpm = 6;
  if (has_wiperspeed_wpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wiperspeed_wpm(), target);
  }

  // optional int64 driveWheelReference = 7;
  if (has_drivewheelreference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->drivewheelreference(), target);
  }

  // optional double chassisClearance_m = 8;
  if (has_chassisclearance_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->chassisclearance_m(), target);
  }

  // optional double mileage_km = 9;
  if (has_mileage_km()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->mileage_km(), target);
  }

  // optional double primaryFuelState = 10;
  if (has_primaryfuelstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->primaryfuelstate(), target);
  }

  // optional double primaryFuelStateAccuracy = 11;
  if (has_primaryfuelstateaccuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->primaryfuelstateaccuracy(), target);
  }

  // optional double estimatedPrimaryRange_km = 12;
  if (has_estimatedprimaryrange_km()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->estimatedprimaryrange_km(), target);
  }

  // optional double secondaryFuelState = 13;
  if (has_secondaryfuelstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->secondaryfuelstate(), target);
  }

  // optional double secondaryFuelStateAccuracy = 14;
  if (has_secondaryfuelstateaccuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->secondaryfuelstateaccuracy(), target);
  }

  // optional double estimatedSecondaryRange_km = 15;
  if (has_estimatedsecondaryrange_km()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->estimatedsecondaryrange_km(), target);
  }

  // optional .VehicleStatus.MaintenanceLightStateBitfield maintenanceLightState = 16;
  if (has_maintenancelightstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->maintenancelightstate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleStatus)
  return target;
}

int VehicleStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleStatus)
  int total_size = 0;

  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional .VehicleStatus.TransmissionModeEnum transmissionMode = 2;
    if (has_transmissionmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transmissionmode());
    }

    // optional int64 lightStateBitfield = 3;
    if (has_lightstatebitfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lightstatebitfield());
    }

    // optional .VehicleStatus.WiperStateEnum wiperState = 4;
    if (has_wiperstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wiperstate());
    }

    // optional double temperatureExternal_cel = 5 [deprecated = true];
    if (has_temperatureexternal_cel()) {
      total_size += 1 + 8;
    }

    // optional int32 wiperSpeed_wpm = 6;
    if (has_wiperspeed_wpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wiperspeed_wpm());
    }

    // optional int64 driveWheelReference = 7;
    if (has_drivewheelreference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->drivewheelreference());
    }

    // optional double chassisClearance_m = 8;
    if (has_chassisclearance_m()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double mileage_km = 9;
    if (has_mileage_km()) {
      total_size += 1 + 8;
    }

    // optional double primaryFuelState = 10;
    if (has_primaryfuelstate()) {
      total_size += 1 + 8;
    }

    // optional double primaryFuelStateAccuracy = 11;
    if (has_primaryfuelstateaccuracy()) {
      total_size += 1 + 8;
    }

    // optional double estimatedPrimaryRange_km = 12;
    if (has_estimatedprimaryrange_km()) {
      total_size += 1 + 8;
    }

    // optional double secondaryFuelState = 13;
    if (has_secondaryfuelstate()) {
      total_size += 1 + 8;
    }

    // optional double secondaryFuelStateAccuracy = 14;
    if (has_secondaryfuelstateaccuracy()) {
      total_size += 1 + 8;
    }

    // optional double estimatedSecondaryRange_km = 15;
    if (has_estimatedsecondaryrange_km()) {
      total_size += 1 + 8;
    }

    // optional .VehicleStatus.MaintenanceLightStateBitfield maintenanceLightState = 16;
    if (has_maintenancelightstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->maintenancelightstate());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleStatus)
    MergeFrom(*source);
  }
}

void VehicleStatus::MergeFrom(const VehicleStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
    if (from.has_transmissionmode()) {
      set_transmissionmode(from.transmissionmode());
    }
    if (from.has_lightstatebitfield()) {
      set_lightstatebitfield(from.lightstatebitfield());
    }
    if (from.has_wiperstate()) {
      set_wiperstate(from.wiperstate());
    }
    if (from.has_temperatureexternal_cel()) {
      set_temperatureexternal_cel(from.temperatureexternal_cel());
    }
    if (from.has_wiperspeed_wpm()) {
      set_wiperspeed_wpm(from.wiperspeed_wpm());
    }
    if (from.has_drivewheelreference()) {
      set_drivewheelreference(from.drivewheelreference());
    }
    if (from.has_chassisclearance_m()) {
      set_chassisclearance_m(from.chassisclearance_m());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mileage_km()) {
      set_mileage_km(from.mileage_km());
    }
    if (from.has_primaryfuelstate()) {
      set_primaryfuelstate(from.primaryfuelstate());
    }
    if (from.has_primaryfuelstateaccuracy()) {
      set_primaryfuelstateaccuracy(from.primaryfuelstateaccuracy());
    }
    if (from.has_estimatedprimaryrange_km()) {
      set_estimatedprimaryrange_km(from.estimatedprimaryrange_km());
    }
    if (from.has_secondaryfuelstate()) {
      set_secondaryfuelstate(from.secondaryfuelstate());
    }
    if (from.has_secondaryfuelstateaccuracy()) {
      set_secondaryfuelstateaccuracy(from.secondaryfuelstateaccuracy());
    }
    if (from.has_estimatedsecondaryrange_km()) {
      set_estimatedsecondaryrange_km(from.estimatedsecondaryrange_km());
    }
    if (from.has_maintenancelightstate()) {
      set_maintenancelightstate(from.maintenancelightstate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleStatus::CopyFrom(const VehicleStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VehicleStatus::Swap(VehicleStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleStatus::InternalSwap(VehicleStatus* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  std::swap(transmissionmode_, other->transmissionmode_);
  std::swap(lightstatebitfield_, other->lightstatebitfield_);
  std::swap(wiperstate_, other->wiperstate_);
  std::swap(temperatureexternal_cel_, other->temperatureexternal_cel_);
  std::swap(wiperspeed_wpm_, other->wiperspeed_wpm_);
  std::swap(drivewheelreference_, other->drivewheelreference_);
  std::swap(chassisclearance_m_, other->chassisclearance_m_);
  std::swap(mileage_km_, other->mileage_km_);
  std::swap(primaryfuelstate_, other->primaryfuelstate_);
  std::swap(primaryfuelstateaccuracy_, other->primaryfuelstateaccuracy_);
  std::swap(estimatedprimaryrange_km_, other->estimatedprimaryrange_km_);
  std::swap(secondaryfuelstate_, other->secondaryfuelstate_);
  std::swap(secondaryfuelstateaccuracy_, other->secondaryfuelstateaccuracy_);
  std::swap(estimatedsecondaryrange_km_, other->estimatedsecondaryrange_km_);
  std::swap(maintenancelightstate_, other->maintenancelightstate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleStatus_descriptor_;
  metadata.reflection = VehicleStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleStatus

// required int64 timeStampUTC_ms = 1;
bool VehicleStatus::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleStatus::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleStatus::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleStatus::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 VehicleStatus::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void VehicleStatus::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.timeStampUTC_ms)
}

// optional .VehicleStatus.TransmissionModeEnum transmissionMode = 2;
bool VehicleStatus::has_transmissionmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleStatus::set_has_transmissionmode() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleStatus::clear_has_transmissionmode() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleStatus::clear_transmissionmode() {
  transmissionmode_ = 1;
  clear_has_transmissionmode();
}
 ::VehicleStatus_TransmissionModeEnum VehicleStatus::transmissionmode() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.transmissionMode)
  return static_cast< ::VehicleStatus_TransmissionModeEnum >(transmissionmode_);
}
 void VehicleStatus::set_transmissionmode(::VehicleStatus_TransmissionModeEnum value) {
  assert(::VehicleStatus_TransmissionModeEnum_IsValid(value));
  set_has_transmissionmode();
  transmissionmode_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.transmissionMode)
}

// optional int64 lightStateBitfield = 3;
bool VehicleStatus::has_lightstatebitfield() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleStatus::set_has_lightstatebitfield() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleStatus::clear_has_lightstatebitfield() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleStatus::clear_lightstatebitfield() {
  lightstatebitfield_ = GOOGLE_LONGLONG(0);
  clear_has_lightstatebitfield();
}
 ::google::protobuf::int64 VehicleStatus::lightstatebitfield() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.lightStateBitfield)
  return lightstatebitfield_;
}
 void VehicleStatus::set_lightstatebitfield(::google::protobuf::int64 value) {
  set_has_lightstatebitfield();
  lightstatebitfield_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.lightStateBitfield)
}

// optional .VehicleStatus.WiperStateEnum wiperState = 4;
bool VehicleStatus::has_wiperstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleStatus::set_has_wiperstate() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleStatus::clear_has_wiperstate() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleStatus::clear_wiperstate() {
  wiperstate_ = 1;
  clear_has_wiperstate();
}
 ::VehicleStatus_WiperStateEnum VehicleStatus::wiperstate() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.wiperState)
  return static_cast< ::VehicleStatus_WiperStateEnum >(wiperstate_);
}
 void VehicleStatus::set_wiperstate(::VehicleStatus_WiperStateEnum value) {
  assert(::VehicleStatus_WiperStateEnum_IsValid(value));
  set_has_wiperstate();
  wiperstate_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.wiperState)
}

// optional double temperatureExternal_cel = 5 [deprecated = true];
bool VehicleStatus::has_temperatureexternal_cel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleStatus::set_has_temperatureexternal_cel() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleStatus::clear_has_temperatureexternal_cel() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleStatus::clear_temperatureexternal_cel() {
  temperatureexternal_cel_ = 0;
  clear_has_temperatureexternal_cel();
}
 double VehicleStatus::temperatureexternal_cel() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.temperatureExternal_cel)
  return temperatureexternal_cel_;
}
 void VehicleStatus::set_temperatureexternal_cel(double value) {
  set_has_temperatureexternal_cel();
  temperatureexternal_cel_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.temperatureExternal_cel)
}

// optional int32 wiperSpeed_wpm = 6;
bool VehicleStatus::has_wiperspeed_wpm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleStatus::set_has_wiperspeed_wpm() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleStatus::clear_has_wiperspeed_wpm() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleStatus::clear_wiperspeed_wpm() {
  wiperspeed_wpm_ = 0;
  clear_has_wiperspeed_wpm();
}
 ::google::protobuf::int32 VehicleStatus::wiperspeed_wpm() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.wiperSpeed_wpm)
  return wiperspeed_wpm_;
}
 void VehicleStatus::set_wiperspeed_wpm(::google::protobuf::int32 value) {
  set_has_wiperspeed_wpm();
  wiperspeed_wpm_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.wiperSpeed_wpm)
}

// optional int64 driveWheelReference = 7;
bool VehicleStatus::has_drivewheelreference() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleStatus::set_has_drivewheelreference() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleStatus::clear_has_drivewheelreference() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleStatus::clear_drivewheelreference() {
  drivewheelreference_ = GOOGLE_LONGLONG(0);
  clear_has_drivewheelreference();
}
 ::google::protobuf::int64 VehicleStatus::drivewheelreference() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.driveWheelReference)
  return drivewheelreference_;
}
 void VehicleStatus::set_drivewheelreference(::google::protobuf::int64 value) {
  set_has_drivewheelreference();
  drivewheelreference_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.driveWheelReference)
}

// optional double chassisClearance_m = 8;
bool VehicleStatus::has_chassisclearance_m() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleStatus::set_has_chassisclearance_m() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleStatus::clear_has_chassisclearance_m() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleStatus::clear_chassisclearance_m() {
  chassisclearance_m_ = 0;
  clear_has_chassisclearance_m();
}
 double VehicleStatus::chassisclearance_m() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.chassisClearance_m)
  return chassisclearance_m_;
}
 void VehicleStatus::set_chassisclearance_m(double value) {
  set_has_chassisclearance_m();
  chassisclearance_m_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.chassisClearance_m)
}

// optional double mileage_km = 9;
bool VehicleStatus::has_mileage_km() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleStatus::set_has_mileage_km() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleStatus::clear_has_mileage_km() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleStatus::clear_mileage_km() {
  mileage_km_ = 0;
  clear_has_mileage_km();
}
 double VehicleStatus::mileage_km() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.mileage_km)
  return mileage_km_;
}
 void VehicleStatus::set_mileage_km(double value) {
  set_has_mileage_km();
  mileage_km_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.mileage_km)
}

// optional double primaryFuelState = 10;
bool VehicleStatus::has_primaryfuelstate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleStatus::set_has_primaryfuelstate() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleStatus::clear_has_primaryfuelstate() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleStatus::clear_primaryfuelstate() {
  primaryfuelstate_ = 0;
  clear_has_primaryfuelstate();
}
 double VehicleStatus::primaryfuelstate() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.primaryFuelState)
  return primaryfuelstate_;
}
 void VehicleStatus::set_primaryfuelstate(double value) {
  set_has_primaryfuelstate();
  primaryfuelstate_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.primaryFuelState)
}

// optional double primaryFuelStateAccuracy = 11;
bool VehicleStatus::has_primaryfuelstateaccuracy() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VehicleStatus::set_has_primaryfuelstateaccuracy() {
  _has_bits_[0] |= 0x00000400u;
}
void VehicleStatus::clear_has_primaryfuelstateaccuracy() {
  _has_bits_[0] &= ~0x00000400u;
}
void VehicleStatus::clear_primaryfuelstateaccuracy() {
  primaryfuelstateaccuracy_ = 0;
  clear_has_primaryfuelstateaccuracy();
}
 double VehicleStatus::primaryfuelstateaccuracy() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.primaryFuelStateAccuracy)
  return primaryfuelstateaccuracy_;
}
 void VehicleStatus::set_primaryfuelstateaccuracy(double value) {
  set_has_primaryfuelstateaccuracy();
  primaryfuelstateaccuracy_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.primaryFuelStateAccuracy)
}

// optional double estimatedPrimaryRange_km = 12;
bool VehicleStatus::has_estimatedprimaryrange_km() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VehicleStatus::set_has_estimatedprimaryrange_km() {
  _has_bits_[0] |= 0x00000800u;
}
void VehicleStatus::clear_has_estimatedprimaryrange_km() {
  _has_bits_[0] &= ~0x00000800u;
}
void VehicleStatus::clear_estimatedprimaryrange_km() {
  estimatedprimaryrange_km_ = 0;
  clear_has_estimatedprimaryrange_km();
}
 double VehicleStatus::estimatedprimaryrange_km() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.estimatedPrimaryRange_km)
  return estimatedprimaryrange_km_;
}
 void VehicleStatus::set_estimatedprimaryrange_km(double value) {
  set_has_estimatedprimaryrange_km();
  estimatedprimaryrange_km_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.estimatedPrimaryRange_km)
}

// optional double secondaryFuelState = 13;
bool VehicleStatus::has_secondaryfuelstate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VehicleStatus::set_has_secondaryfuelstate() {
  _has_bits_[0] |= 0x00001000u;
}
void VehicleStatus::clear_has_secondaryfuelstate() {
  _has_bits_[0] &= ~0x00001000u;
}
void VehicleStatus::clear_secondaryfuelstate() {
  secondaryfuelstate_ = 0;
  clear_has_secondaryfuelstate();
}
 double VehicleStatus::secondaryfuelstate() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.secondaryFuelState)
  return secondaryfuelstate_;
}
 void VehicleStatus::set_secondaryfuelstate(double value) {
  set_has_secondaryfuelstate();
  secondaryfuelstate_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.secondaryFuelState)
}

// optional double secondaryFuelStateAccuracy = 14;
bool VehicleStatus::has_secondaryfuelstateaccuracy() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VehicleStatus::set_has_secondaryfuelstateaccuracy() {
  _has_bits_[0] |= 0x00002000u;
}
void VehicleStatus::clear_has_secondaryfuelstateaccuracy() {
  _has_bits_[0] &= ~0x00002000u;
}
void VehicleStatus::clear_secondaryfuelstateaccuracy() {
  secondaryfuelstateaccuracy_ = 0;
  clear_has_secondaryfuelstateaccuracy();
}
 double VehicleStatus::secondaryfuelstateaccuracy() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.secondaryFuelStateAccuracy)
  return secondaryfuelstateaccuracy_;
}
 void VehicleStatus::set_secondaryfuelstateaccuracy(double value) {
  set_has_secondaryfuelstateaccuracy();
  secondaryfuelstateaccuracy_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.secondaryFuelStateAccuracy)
}

// optional double estimatedSecondaryRange_km = 15;
bool VehicleStatus::has_estimatedsecondaryrange_km() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VehicleStatus::set_has_estimatedsecondaryrange_km() {
  _has_bits_[0] |= 0x00004000u;
}
void VehicleStatus::clear_has_estimatedsecondaryrange_km() {
  _has_bits_[0] &= ~0x00004000u;
}
void VehicleStatus::clear_estimatedsecondaryrange_km() {
  estimatedsecondaryrange_km_ = 0;
  clear_has_estimatedsecondaryrange_km();
}
 double VehicleStatus::estimatedsecondaryrange_km() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.estimatedSecondaryRange_km)
  return estimatedsecondaryrange_km_;
}
 void VehicleStatus::set_estimatedsecondaryrange_km(double value) {
  set_has_estimatedsecondaryrange_km();
  estimatedsecondaryrange_km_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.estimatedSecondaryRange_km)
}

// optional .VehicleStatus.MaintenanceLightStateBitfield maintenanceLightState = 16;
bool VehicleStatus::has_maintenancelightstate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VehicleStatus::set_has_maintenancelightstate() {
  _has_bits_[0] |= 0x00008000u;
}
void VehicleStatus::clear_has_maintenancelightstate() {
  _has_bits_[0] &= ~0x00008000u;
}
void VehicleStatus::clear_maintenancelightstate() {
  maintenancelightstate_ = 1;
  clear_has_maintenancelightstate();
}
 ::VehicleStatus_MaintenanceLightStateBitfield VehicleStatus::maintenancelightstate() const {
  // @@protoc_insertion_point(field_get:VehicleStatus.maintenanceLightState)
  return static_cast< ::VehicleStatus_MaintenanceLightStateBitfield >(maintenancelightstate_);
}
 void VehicleStatus::set_maintenancelightstate(::VehicleStatus_MaintenanceLightStateBitfield value) {
  assert(::VehicleStatus_MaintenanceLightStateBitfield_IsValid(value));
  set_has_maintenancelightstate();
  maintenancelightstate_ = value;
  // @@protoc_insertion_point(field_set:VehicleStatus.maintenanceLightState)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleDynamics::kTimeStampUTCMsFieldNumber;
const int VehicleDynamics::kCurvature1PmFieldNumber;
const int VehicleDynamics::kSlopePercentFieldNumber;
const int VehicleDynamics::kCurvatureAccuracy1PmFieldNumber;
const int VehicleDynamics::kSlopeAccuracyPercentFieldNumber;
const int VehicleDynamics::kAverageSuspensionTravelMmFieldNumber;
const int VehicleDynamics::kAverageAccelerationVectorMps2FieldNumber;
const int VehicleDynamics::kAverageRotationRateVectorOmegaFieldNumber;
const int VehicleDynamics::kAverageSpeedVectorMpsFieldNumber;
const int VehicleDynamics::kRelativePositionVectorMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleDynamics::VehicleDynamics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VehicleDynamics)
}

void VehicleDynamics::InitAsDefaultInstance() {
  averageaccelerationvector_mps2_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
  averagerotationratevector_omega_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
  averagespeedvector_mps_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
  relativepositionvector_m_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
}

VehicleDynamics::VehicleDynamics(const VehicleDynamics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VehicleDynamics)
}

void VehicleDynamics::SharedCtor() {
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  curvature_1pm_ = 0;
  slope_percent_ = 0;
  curvatureaccuracy_1pm_ = 0;
  slopeaccuracy_percent_ = 0;
  averagesuspensiontravel_mm_ = 0;
  averageaccelerationvector_mps2_ = NULL;
  averagerotationratevector_omega_ = NULL;
  averagespeedvector_mps_ = NULL;
  relativepositionvector_m_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleDynamics::~VehicleDynamics() {
  // @@protoc_insertion_point(destructor:VehicleDynamics)
  SharedDtor();
}

void VehicleDynamics::SharedDtor() {
  if (this != default_instance_) {
    delete averageaccelerationvector_mps2_;
    delete averagerotationratevector_omega_;
    delete averagespeedvector_mps_;
    delete relativepositionvector_m_;
  }
}

void VehicleDynamics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleDynamics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleDynamics_descriptor_;
}

const VehicleDynamics& VehicleDynamics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

VehicleDynamics* VehicleDynamics::default_instance_ = NULL;

VehicleDynamics* VehicleDynamics::New(::google::protobuf::Arena* arena) const {
  VehicleDynamics* n = new VehicleDynamics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleDynamics::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleDynamics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleDynamics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleDynamics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(timestamputc_ms_, slopeaccuracy_percent_);
    averagesuspensiontravel_mm_ = 0;
    if (has_averageaccelerationvector_mps2()) {
      if (averageaccelerationvector_mps2_ != NULL) averageaccelerationvector_mps2_->::Vector3D::Clear();
    }
    if (has_averagerotationratevector_omega()) {
      if (averagerotationratevector_omega_ != NULL) averagerotationratevector_omega_->::Vector3D::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_averagespeedvector_mps()) {
      if (averagespeedvector_mps_ != NULL) averagespeedvector_mps_->::Vector3D::Clear();
    }
    if (has_relativepositionvector_m()) {
      if (relativepositionvector_m_ != NULL) relativepositionvector_m_->::Vector3D::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleDynamics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VehicleDynamics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_curvature_1pm;
        break;
      }

      // optional double curvature_1pm = 2;
      case 2: {
        if (tag == 17) {
         parse_curvature_1pm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_1pm_)));
          set_has_curvature_1pm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_slope_percent;
        break;
      }

      // optional double slope_percent = 3;
      case 3: {
        if (tag == 25) {
         parse_slope_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slope_percent_)));
          set_has_slope_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_curvatureAccuracy_1pm;
        break;
      }

      // optional double curvatureAccuracy_1pm = 4;
      case 4: {
        if (tag == 33) {
         parse_curvatureAccuracy_1pm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvatureaccuracy_1pm_)));
          set_has_curvatureaccuracy_1pm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_slopeAccuracy_percent;
        break;
      }

      // optional double slopeAccuracy_percent = 5;
      case 5: {
        if (tag == 41) {
         parse_slopeAccuracy_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slopeaccuracy_percent_)));
          set_has_slopeaccuracy_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_averageSuspensionTravel_mm;
        break;
      }

      // optional int32 averageSuspensionTravel_mm = 6;
      case 6: {
        if (tag == 48) {
         parse_averageSuspensionTravel_mm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &averagesuspensiontravel_mm_)));
          set_has_averagesuspensiontravel_mm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_averageAccelerationVector_mps2;
        break;
      }

      // optional .Vector3D averageAccelerationVector_mps2 = 7;
      case 7: {
        if (tag == 58) {
         parse_averageAccelerationVector_mps2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_averageaccelerationvector_mps2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_averageRotationRateVector_omega;
        break;
      }

      // optional .Vector3D averageRotationRateVector_omega = 8;
      case 8: {
        if (tag == 66) {
         parse_averageRotationRateVector_omega:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_averagerotationratevector_omega()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_averageSpeedVector_mps;
        break;
      }

      // optional .Vector3D averageSpeedVector_mps = 1000;
      case 1000: {
        if (tag == 8002) {
         parse_averageSpeedVector_mps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_averagespeedvector_mps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_relativePositionVector_m;
        break;
      }

      // optional .Vector3D relativePositionVector_m = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_relativePositionVector_m:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relativepositionvector_m()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VehicleDynamics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VehicleDynamics)
  return false;
#undef DO_
}

void VehicleDynamics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VehicleDynamics)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // optional double curvature_1pm = 2;
  if (has_curvature_1pm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->curvature_1pm(), output);
  }

  // optional double slope_percent = 3;
  if (has_slope_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->slope_percent(), output);
  }

  // optional double curvatureAccuracy_1pm = 4;
  if (has_curvatureaccuracy_1pm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->curvatureaccuracy_1pm(), output);
  }

  // optional double slopeAccuracy_percent = 5;
  if (has_slopeaccuracy_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->slopeaccuracy_percent(), output);
  }

  // optional int32 averageSuspensionTravel_mm = 6;
  if (has_averagesuspensiontravel_mm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->averagesuspensiontravel_mm(), output);
  }

  // optional .Vector3D averageAccelerationVector_mps2 = 7;
  if (has_averageaccelerationvector_mps2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->averageaccelerationvector_mps2_, output);
  }

  // optional .Vector3D averageRotationRateVector_omega = 8;
  if (has_averagerotationratevector_omega()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->averagerotationratevector_omega_, output);
  }

  // optional .Vector3D averageSpeedVector_mps = 1000;
  if (has_averagespeedvector_mps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *this->averagespeedvector_mps_, output);
  }

  // optional .Vector3D relativePositionVector_m = 1001;
  if (has_relativepositionvector_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, *this->relativepositionvector_m_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VehicleDynamics)
}

::google::protobuf::uint8* VehicleDynamics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VehicleDynamics)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // optional double curvature_1pm = 2;
  if (has_curvature_1pm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->curvature_1pm(), target);
  }

  // optional double slope_percent = 3;
  if (has_slope_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->slope_percent(), target);
  }

  // optional double curvatureAccuracy_1pm = 4;
  if (has_curvatureaccuracy_1pm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->curvatureaccuracy_1pm(), target);
  }

  // optional double slopeAccuracy_percent = 5;
  if (has_slopeaccuracy_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->slopeaccuracy_percent(), target);
  }

  // optional int32 averageSuspensionTravel_mm = 6;
  if (has_averagesuspensiontravel_mm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->averagesuspensiontravel_mm(), target);
  }

  // optional .Vector3D averageAccelerationVector_mps2 = 7;
  if (has_averageaccelerationvector_mps2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->averageaccelerationvector_mps2_, false, target);
  }

  // optional .Vector3D averageRotationRateVector_omega = 8;
  if (has_averagerotationratevector_omega()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->averagerotationratevector_omega_, false, target);
  }

  // optional .Vector3D averageSpeedVector_mps = 1000;
  if (has_averagespeedvector_mps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1000, *this->averagespeedvector_mps_, false, target);
  }

  // optional .Vector3D relativePositionVector_m = 1001;
  if (has_relativepositionvector_m()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1001, *this->relativepositionvector_m_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleDynamics)
  return target;
}

int VehicleDynamics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleDynamics)
  int total_size = 0;

  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional double curvature_1pm = 2;
    if (has_curvature_1pm()) {
      total_size += 1 + 8;
    }

    // optional double slope_percent = 3;
    if (has_slope_percent()) {
      total_size += 1 + 8;
    }

    // optional double curvatureAccuracy_1pm = 4;
    if (has_curvatureaccuracy_1pm()) {
      total_size += 1 + 8;
    }

    // optional double slopeAccuracy_percent = 5;
    if (has_slopeaccuracy_percent()) {
      total_size += 1 + 8;
    }

    // optional int32 averageSuspensionTravel_mm = 6;
    if (has_averagesuspensiontravel_mm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->averagesuspensiontravel_mm());
    }

    // optional .Vector3D averageAccelerationVector_mps2 = 7;
    if (has_averageaccelerationvector_mps2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->averageaccelerationvector_mps2_);
    }

    // optional .Vector3D averageRotationRateVector_omega = 8;
    if (has_averagerotationratevector_omega()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->averagerotationratevector_omega_);
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .Vector3D averageSpeedVector_mps = 1000;
    if (has_averagespeedvector_mps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->averagespeedvector_mps_);
    }

    // optional .Vector3D relativePositionVector_m = 1001;
    if (has_relativepositionvector_m()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relativepositionvector_m_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleDynamics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleDynamics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleDynamics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleDynamics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleDynamics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleDynamics)
    MergeFrom(*source);
  }
}

void VehicleDynamics::MergeFrom(const VehicleDynamics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleDynamics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
    if (from.has_curvature_1pm()) {
      set_curvature_1pm(from.curvature_1pm());
    }
    if (from.has_slope_percent()) {
      set_slope_percent(from.slope_percent());
    }
    if (from.has_curvatureaccuracy_1pm()) {
      set_curvatureaccuracy_1pm(from.curvatureaccuracy_1pm());
    }
    if (from.has_slopeaccuracy_percent()) {
      set_slopeaccuracy_percent(from.slopeaccuracy_percent());
    }
    if (from.has_averagesuspensiontravel_mm()) {
      set_averagesuspensiontravel_mm(from.averagesuspensiontravel_mm());
    }
    if (from.has_averageaccelerationvector_mps2()) {
      mutable_averageaccelerationvector_mps2()->::Vector3D::MergeFrom(from.averageaccelerationvector_mps2());
    }
    if (from.has_averagerotationratevector_omega()) {
      mutable_averagerotationratevector_omega()->::Vector3D::MergeFrom(from.averagerotationratevector_omega());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_averagespeedvector_mps()) {
      mutable_averagespeedvector_mps()->::Vector3D::MergeFrom(from.averagespeedvector_mps());
    }
    if (from.has_relativepositionvector_m()) {
      mutable_relativepositionvector_m()->::Vector3D::MergeFrom(from.relativepositionvector_m());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleDynamics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleDynamics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleDynamics::CopyFrom(const VehicleDynamics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleDynamics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleDynamics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_averageaccelerationvector_mps2()) {
    if (!this->averageaccelerationvector_mps2_->IsInitialized()) return false;
  }
  if (has_averagerotationratevector_omega()) {
    if (!this->averagerotationratevector_omega_->IsInitialized()) return false;
  }
  if (has_averagespeedvector_mps()) {
    if (!this->averagespeedvector_mps_->IsInitialized()) return false;
  }
  if (has_relativepositionvector_m()) {
    if (!this->relativepositionvector_m_->IsInitialized()) return false;
  }
  return true;
}

void VehicleDynamics::Swap(VehicleDynamics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleDynamics::InternalSwap(VehicleDynamics* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  std::swap(curvature_1pm_, other->curvature_1pm_);
  std::swap(slope_percent_, other->slope_percent_);
  std::swap(curvatureaccuracy_1pm_, other->curvatureaccuracy_1pm_);
  std::swap(slopeaccuracy_percent_, other->slopeaccuracy_percent_);
  std::swap(averagesuspensiontravel_mm_, other->averagesuspensiontravel_mm_);
  std::swap(averageaccelerationvector_mps2_, other->averageaccelerationvector_mps2_);
  std::swap(averagerotationratevector_omega_, other->averagerotationratevector_omega_);
  std::swap(averagespeedvector_mps_, other->averagespeedvector_mps_);
  std::swap(relativepositionvector_m_, other->relativepositionvector_m_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleDynamics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleDynamics_descriptor_;
  metadata.reflection = VehicleDynamics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleDynamics

// required int64 timeStampUTC_ms = 1;
bool VehicleDynamics::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleDynamics::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleDynamics::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleDynamics::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 VehicleDynamics::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:VehicleDynamics.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void VehicleDynamics::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:VehicleDynamics.timeStampUTC_ms)
}

// optional double curvature_1pm = 2;
bool VehicleDynamics::has_curvature_1pm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleDynamics::set_has_curvature_1pm() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleDynamics::clear_has_curvature_1pm() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleDynamics::clear_curvature_1pm() {
  curvature_1pm_ = 0;
  clear_has_curvature_1pm();
}
 double VehicleDynamics::curvature_1pm() const {
  // @@protoc_insertion_point(field_get:VehicleDynamics.curvature_1pm)
  return curvature_1pm_;
}
 void VehicleDynamics::set_curvature_1pm(double value) {
  set_has_curvature_1pm();
  curvature_1pm_ = value;
  // @@protoc_insertion_point(field_set:VehicleDynamics.curvature_1pm)
}

// optional double slope_percent = 3;
bool VehicleDynamics::has_slope_percent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleDynamics::set_has_slope_percent() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleDynamics::clear_has_slope_percent() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleDynamics::clear_slope_percent() {
  slope_percent_ = 0;
  clear_has_slope_percent();
}
 double VehicleDynamics::slope_percent() const {
  // @@protoc_insertion_point(field_get:VehicleDynamics.slope_percent)
  return slope_percent_;
}
 void VehicleDynamics::set_slope_percent(double value) {
  set_has_slope_percent();
  slope_percent_ = value;
  // @@protoc_insertion_point(field_set:VehicleDynamics.slope_percent)
}

// optional double curvatureAccuracy_1pm = 4;
bool VehicleDynamics::has_curvatureaccuracy_1pm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleDynamics::set_has_curvatureaccuracy_1pm() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleDynamics::clear_has_curvatureaccuracy_1pm() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleDynamics::clear_curvatureaccuracy_1pm() {
  curvatureaccuracy_1pm_ = 0;
  clear_has_curvatureaccuracy_1pm();
}
 double VehicleDynamics::curvatureaccuracy_1pm() const {
  // @@protoc_insertion_point(field_get:VehicleDynamics.curvatureAccuracy_1pm)
  return curvatureaccuracy_1pm_;
}
 void VehicleDynamics::set_curvatureaccuracy_1pm(double value) {
  set_has_curvatureaccuracy_1pm();
  curvatureaccuracy_1pm_ = value;
  // @@protoc_insertion_point(field_set:VehicleDynamics.curvatureAccuracy_1pm)
}

// optional double slopeAccuracy_percent = 5;
bool VehicleDynamics::has_slopeaccuracy_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleDynamics::set_has_slopeaccuracy_percent() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleDynamics::clear_has_slopeaccuracy_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleDynamics::clear_slopeaccuracy_percent() {
  slopeaccuracy_percent_ = 0;
  clear_has_slopeaccuracy_percent();
}
 double VehicleDynamics::slopeaccuracy_percent() const {
  // @@protoc_insertion_point(field_get:VehicleDynamics.slopeAccuracy_percent)
  return slopeaccuracy_percent_;
}
 void VehicleDynamics::set_slopeaccuracy_percent(double value) {
  set_has_slopeaccuracy_percent();
  slopeaccuracy_percent_ = value;
  // @@protoc_insertion_point(field_set:VehicleDynamics.slopeAccuracy_percent)
}

// optional int32 averageSuspensionTravel_mm = 6;
bool VehicleDynamics::has_averagesuspensiontravel_mm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleDynamics::set_has_averagesuspensiontravel_mm() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleDynamics::clear_has_averagesuspensiontravel_mm() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleDynamics::clear_averagesuspensiontravel_mm() {
  averagesuspensiontravel_mm_ = 0;
  clear_has_averagesuspensiontravel_mm();
}
 ::google::protobuf::int32 VehicleDynamics::averagesuspensiontravel_mm() const {
  // @@protoc_insertion_point(field_get:VehicleDynamics.averageSuspensionTravel_mm)
  return averagesuspensiontravel_mm_;
}
 void VehicleDynamics::set_averagesuspensiontravel_mm(::google::protobuf::int32 value) {
  set_has_averagesuspensiontravel_mm();
  averagesuspensiontravel_mm_ = value;
  // @@protoc_insertion_point(field_set:VehicleDynamics.averageSuspensionTravel_mm)
}

// optional .Vector3D averageAccelerationVector_mps2 = 7;
bool VehicleDynamics::has_averageaccelerationvector_mps2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleDynamics::set_has_averageaccelerationvector_mps2() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleDynamics::clear_has_averageaccelerationvector_mps2() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleDynamics::clear_averageaccelerationvector_mps2() {
  if (averageaccelerationvector_mps2_ != NULL) averageaccelerationvector_mps2_->::Vector3D::Clear();
  clear_has_averageaccelerationvector_mps2();
}
const ::Vector3D& VehicleDynamics::averageaccelerationvector_mps2() const {
  // @@protoc_insertion_point(field_get:VehicleDynamics.averageAccelerationVector_mps2)
  return averageaccelerationvector_mps2_ != NULL ? *averageaccelerationvector_mps2_ : *default_instance_->averageaccelerationvector_mps2_;
}
::Vector3D* VehicleDynamics::mutable_averageaccelerationvector_mps2() {
  set_has_averageaccelerationvector_mps2();
  if (averageaccelerationvector_mps2_ == NULL) {
    averageaccelerationvector_mps2_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:VehicleDynamics.averageAccelerationVector_mps2)
  return averageaccelerationvector_mps2_;
}
::Vector3D* VehicleDynamics::release_averageaccelerationvector_mps2() {
  // @@protoc_insertion_point(field_release:VehicleDynamics.averageAccelerationVector_mps2)
  clear_has_averageaccelerationvector_mps2();
  ::Vector3D* temp = averageaccelerationvector_mps2_;
  averageaccelerationvector_mps2_ = NULL;
  return temp;
}
void VehicleDynamics::set_allocated_averageaccelerationvector_mps2(::Vector3D* averageaccelerationvector_mps2) {
  delete averageaccelerationvector_mps2_;
  averageaccelerationvector_mps2_ = averageaccelerationvector_mps2;
  if (averageaccelerationvector_mps2) {
    set_has_averageaccelerationvector_mps2();
  } else {
    clear_has_averageaccelerationvector_mps2();
  }
  // @@protoc_insertion_point(field_set_allocated:VehicleDynamics.averageAccelerationVector_mps2)
}

// optional .Vector3D averageRotationRateVector_omega = 8;
bool VehicleDynamics::has_averagerotationratevector_omega() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleDynamics::set_has_averagerotationratevector_omega() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleDynamics::clear_has_averagerotationratevector_omega() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleDynamics::clear_averagerotationratevector_omega() {
  if (averagerotationratevector_omega_ != NULL) averagerotationratevector_omega_->::Vector3D::Clear();
  clear_has_averagerotationratevector_omega();
}
const ::Vector3D& VehicleDynamics::averagerotationratevector_omega() const {
  // @@protoc_insertion_point(field_get:VehicleDynamics.averageRotationRateVector_omega)
  return averagerotationratevector_omega_ != NULL ? *averagerotationratevector_omega_ : *default_instance_->averagerotationratevector_omega_;
}
::Vector3D* VehicleDynamics::mutable_averagerotationratevector_omega() {
  set_has_averagerotationratevector_omega();
  if (averagerotationratevector_omega_ == NULL) {
    averagerotationratevector_omega_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:VehicleDynamics.averageRotationRateVector_omega)
  return averagerotationratevector_omega_;
}
::Vector3D* VehicleDynamics::release_averagerotationratevector_omega() {
  // @@protoc_insertion_point(field_release:VehicleDynamics.averageRotationRateVector_omega)
  clear_has_averagerotationratevector_omega();
  ::Vector3D* temp = averagerotationratevector_omega_;
  averagerotationratevector_omega_ = NULL;
  return temp;
}
void VehicleDynamics::set_allocated_averagerotationratevector_omega(::Vector3D* averagerotationratevector_omega) {
  delete averagerotationratevector_omega_;
  averagerotationratevector_omega_ = averagerotationratevector_omega;
  if (averagerotationratevector_omega) {
    set_has_averagerotationratevector_omega();
  } else {
    clear_has_averagerotationratevector_omega();
  }
  // @@protoc_insertion_point(field_set_allocated:VehicleDynamics.averageRotationRateVector_omega)
}

// optional .Vector3D averageSpeedVector_mps = 1000;
bool VehicleDynamics::has_averagespeedvector_mps() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleDynamics::set_has_averagespeedvector_mps() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleDynamics::clear_has_averagespeedvector_mps() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleDynamics::clear_averagespeedvector_mps() {
  if (averagespeedvector_mps_ != NULL) averagespeedvector_mps_->::Vector3D::Clear();
  clear_has_averagespeedvector_mps();
}
const ::Vector3D& VehicleDynamics::averagespeedvector_mps() const {
  // @@protoc_insertion_point(field_get:VehicleDynamics.averageSpeedVector_mps)
  return averagespeedvector_mps_ != NULL ? *averagespeedvector_mps_ : *default_instance_->averagespeedvector_mps_;
}
::Vector3D* VehicleDynamics::mutable_averagespeedvector_mps() {
  set_has_averagespeedvector_mps();
  if (averagespeedvector_mps_ == NULL) {
    averagespeedvector_mps_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:VehicleDynamics.averageSpeedVector_mps)
  return averagespeedvector_mps_;
}
::Vector3D* VehicleDynamics::release_averagespeedvector_mps() {
  // @@protoc_insertion_point(field_release:VehicleDynamics.averageSpeedVector_mps)
  clear_has_averagespeedvector_mps();
  ::Vector3D* temp = averagespeedvector_mps_;
  averagespeedvector_mps_ = NULL;
  return temp;
}
void VehicleDynamics::set_allocated_averagespeedvector_mps(::Vector3D* averagespeedvector_mps) {
  delete averagespeedvector_mps_;
  averagespeedvector_mps_ = averagespeedvector_mps;
  if (averagespeedvector_mps) {
    set_has_averagespeedvector_mps();
  } else {
    clear_has_averagespeedvector_mps();
  }
  // @@protoc_insertion_point(field_set_allocated:VehicleDynamics.averageSpeedVector_mps)
}

// optional .Vector3D relativePositionVector_m = 1001;
bool VehicleDynamics::has_relativepositionvector_m() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleDynamics::set_has_relativepositionvector_m() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleDynamics::clear_has_relativepositionvector_m() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleDynamics::clear_relativepositionvector_m() {
  if (relativepositionvector_m_ != NULL) relativepositionvector_m_->::Vector3D::Clear();
  clear_has_relativepositionvector_m();
}
const ::Vector3D& VehicleDynamics::relativepositionvector_m() const {
  // @@protoc_insertion_point(field_get:VehicleDynamics.relativePositionVector_m)
  return relativepositionvector_m_ != NULL ? *relativepositionvector_m_ : *default_instance_->relativepositionvector_m_;
}
::Vector3D* VehicleDynamics::mutable_relativepositionvector_m() {
  set_has_relativepositionvector_m();
  if (relativepositionvector_m_ == NULL) {
    relativepositionvector_m_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:VehicleDynamics.relativePositionVector_m)
  return relativepositionvector_m_;
}
::Vector3D* VehicleDynamics::release_relativepositionvector_m() {
  // @@protoc_insertion_point(field_release:VehicleDynamics.relativePositionVector_m)
  clear_has_relativepositionvector_m();
  ::Vector3D* temp = relativepositionvector_m_;
  relativepositionvector_m_ = NULL;
  return temp;
}
void VehicleDynamics::set_allocated_relativepositionvector_m(::Vector3D* relativepositionvector_m) {
  delete relativepositionvector_m_;
  relativepositionvector_m_ = relativepositionvector_m;
  if (relativepositionvector_m) {
    set_has_relativepositionvector_m();
  } else {
    clear_has_relativepositionvector_m();
  }
  // @@protoc_insertion_point(field_set_allocated:VehicleDynamics.relativePositionVector_m)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PositionOffset_LateralOffsetSimpleEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionOffset_LateralOffsetSimpleEnum_descriptor_;
}
bool PositionOffset_LateralOffsetSimpleEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PositionOffset_LateralOffsetSimpleEnum PositionOffset::LEFT;
const PositionOffset_LateralOffsetSimpleEnum PositionOffset::MIDDLE;
const PositionOffset_LateralOffsetSimpleEnum PositionOffset::RIGHT;
const PositionOffset_LateralOffsetSimpleEnum PositionOffset::LateralOffsetSimpleEnum_MIN;
const PositionOffset_LateralOffsetSimpleEnum PositionOffset::LateralOffsetSimpleEnum_MAX;
const int PositionOffset::LateralOffsetSimpleEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PositionOffset_LongitudinalOffsetSimpleEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionOffset_LongitudinalOffsetSimpleEnum_descriptor_;
}
bool PositionOffset_LongitudinalOffsetSimpleEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PositionOffset_LongitudinalOffsetSimpleEnum PositionOffset::FRONT;
const PositionOffset_LongitudinalOffsetSimpleEnum PositionOffset::CENTER;
const PositionOffset_LongitudinalOffsetSimpleEnum PositionOffset::BACK;
const PositionOffset_LongitudinalOffsetSimpleEnum PositionOffset::LongitudinalOffsetSimpleEnum_MIN;
const PositionOffset_LongitudinalOffsetSimpleEnum PositionOffset::LongitudinalOffsetSimpleEnum_MAX;
const int PositionOffset::LongitudinalOffsetSimpleEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PositionOffset_VerticalOffsetSimpleEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionOffset_VerticalOffsetSimpleEnum_descriptor_;
}
bool PositionOffset_VerticalOffsetSimpleEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PositionOffset_VerticalOffsetSimpleEnum PositionOffset::ABOVE;
const PositionOffset_VerticalOffsetSimpleEnum PositionOffset::AT_LEVEL;
const PositionOffset_VerticalOffsetSimpleEnum PositionOffset::BELOW;
const PositionOffset_VerticalOffsetSimpleEnum PositionOffset::VerticalOffsetSimpleEnum_MIN;
const PositionOffset_VerticalOffsetSimpleEnum PositionOffset::VerticalOffsetSimpleEnum_MAX;
const int PositionOffset::VerticalOffsetSimpleEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionOffset::kLateralOffsetMFieldNumber;
const int PositionOffset::kLateralOffsetSimpleFieldNumber;
const int PositionOffset::kLongitudinalOffsetMFieldNumber;
const int PositionOffset::kLongitudinalOffsetSimpleFieldNumber;
const int PositionOffset::kVerticalOffsetMFieldNumber;
const int PositionOffset::kVerticalOffsetSimpleFieldNumber;
const int PositionOffset::kLateralOffsetAccuracyMFieldNumber;
const int PositionOffset::kLongitudinalOffsetAccuracyMFieldNumber;
const int PositionOffset::kVerticalOffsetAccuracyMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionOffset::PositionOffset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PositionOffset)
}

void PositionOffset::InitAsDefaultInstance() {
}

PositionOffset::PositionOffset(const PositionOffset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PositionOffset)
}

void PositionOffset::SharedCtor() {
  _cached_size_ = 0;
  lateraloffset_m_ = 0;
  lateraloffsetsimple_ = 1;
  longitudinaloffset_m_ = 0;
  longitudinaloffsetsimple_ = 1;
  verticaloffset_m_ = 0;
  verticaloffsetsimple_ = 1;
  lateraloffsetaccuracy_m_ = 0;
  longitudinaloffsetaccuracy_m_ = 0;
  verticaloffsetaccuracy_m_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionOffset::~PositionOffset() {
  // @@protoc_insertion_point(destructor:PositionOffset)
  SharedDtor();
}

void PositionOffset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PositionOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionOffset_descriptor_;
}

const PositionOffset& PositionOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

PositionOffset* PositionOffset::default_instance_ = NULL;

PositionOffset* PositionOffset::New(::google::protobuf::Arena* arena) const {
  PositionOffset* n = new PositionOffset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PositionOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:PositionOffset)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PositionOffset, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PositionOffset*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(lateraloffset_m_, longitudinaloffset_m_);
    ZR_(verticaloffset_m_, longitudinaloffsetaccuracy_m_);
    lateraloffsetsimple_ = 1;
    longitudinaloffsetsimple_ = 1;
    verticaloffsetsimple_ = 1;
  }
  verticaloffsetaccuracy_m_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PositionOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PositionOffset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lateralOffset_m = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateraloffset_m_)));
          set_has_lateraloffset_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lateralOffsetSimple;
        break;
      }

      // optional .PositionOffset.LateralOffsetSimpleEnum lateralOffsetSimple = 2;
      case 2: {
        if (tag == 16) {
         parse_lateralOffsetSimple:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PositionOffset_LateralOffsetSimpleEnum_IsValid(value)) {
            set_lateraloffsetsimple(static_cast< ::PositionOffset_LateralOffsetSimpleEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_longitudinalOffset_m;
        break;
      }

      // optional double longitudinalOffset_m = 3;
      case 3: {
        if (tag == 25) {
         parse_longitudinalOffset_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinaloffset_m_)));
          set_has_longitudinaloffset_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_longitudinalOffsetSimple;
        break;
      }

      // optional .PositionOffset.LongitudinalOffsetSimpleEnum longitudinalOffsetSimple = 4;
      case 4: {
        if (tag == 32) {
         parse_longitudinalOffsetSimple:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PositionOffset_LongitudinalOffsetSimpleEnum_IsValid(value)) {
            set_longitudinaloffsetsimple(static_cast< ::PositionOffset_LongitudinalOffsetSimpleEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_verticalOffset_m;
        break;
      }

      // optional double verticalOffset_m = 5;
      case 5: {
        if (tag == 41) {
         parse_verticalOffset_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &verticaloffset_m_)));
          set_has_verticaloffset_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_verticalOffsetSimple;
        break;
      }

      // optional .PositionOffset.VerticalOffsetSimpleEnum verticalOffsetSimple = 6;
      case 6: {
        if (tag == 48) {
         parse_verticalOffsetSimple:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PositionOffset_VerticalOffsetSimpleEnum_IsValid(value)) {
            set_verticaloffsetsimple(static_cast< ::PositionOffset_VerticalOffsetSimpleEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_lateralOffsetAccuracy_m;
        break;
      }

      // optional double lateralOffsetAccuracy_m = 7;
      case 7: {
        if (tag == 57) {
         parse_lateralOffsetAccuracy_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateraloffsetaccuracy_m_)));
          set_has_lateraloffsetaccuracy_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_longitudinalOffsetAccuracy_m;
        break;
      }

      // optional double longitudinalOffsetAccuracy_m = 8;
      case 8: {
        if (tag == 65) {
         parse_longitudinalOffsetAccuracy_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinaloffsetaccuracy_m_)));
          set_has_longitudinaloffsetaccuracy_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_verticalOffsetAccuracy_m;
        break;
      }

      // optional double verticalOffsetAccuracy_m = 9;
      case 9: {
        if (tag == 73) {
         parse_verticalOffsetAccuracy_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &verticaloffsetaccuracy_m_)));
          set_has_verticaloffsetaccuracy_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PositionOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PositionOffset)
  return false;
#undef DO_
}

void PositionOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PositionOffset)
  // optional double lateralOffset_m = 1;
  if (has_lateraloffset_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lateraloffset_m(), output);
  }

  // optional .PositionOffset.LateralOffsetSimpleEnum lateralOffsetSimple = 2;
  if (has_lateraloffsetsimple()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lateraloffsetsimple(), output);
  }

  // optional double longitudinalOffset_m = 3;
  if (has_longitudinaloffset_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitudinaloffset_m(), output);
  }

  // optional .PositionOffset.LongitudinalOffsetSimpleEnum longitudinalOffsetSimple = 4;
  if (has_longitudinaloffsetsimple()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->longitudinaloffsetsimple(), output);
  }

  // optional double verticalOffset_m = 5;
  if (has_verticaloffset_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->verticaloffset_m(), output);
  }

  // optional .PositionOffset.VerticalOffsetSimpleEnum verticalOffsetSimple = 6;
  if (has_verticaloffsetsimple()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->verticaloffsetsimple(), output);
  }

  // optional double lateralOffsetAccuracy_m = 7;
  if (has_lateraloffsetaccuracy_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lateraloffsetaccuracy_m(), output);
  }

  // optional double longitudinalOffsetAccuracy_m = 8;
  if (has_longitudinaloffsetaccuracy_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->longitudinaloffsetaccuracy_m(), output);
  }

  // optional double verticalOffsetAccuracy_m = 9;
  if (has_verticaloffsetaccuracy_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->verticaloffsetaccuracy_m(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PositionOffset)
}

::google::protobuf::uint8* PositionOffset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PositionOffset)
  // optional double lateralOffset_m = 1;
  if (has_lateraloffset_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lateraloffset_m(), target);
  }

  // optional .PositionOffset.LateralOffsetSimpleEnum lateralOffsetSimple = 2;
  if (has_lateraloffsetsimple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lateraloffsetsimple(), target);
  }

  // optional double longitudinalOffset_m = 3;
  if (has_longitudinaloffset_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitudinaloffset_m(), target);
  }

  // optional .PositionOffset.LongitudinalOffsetSimpleEnum longitudinalOffsetSimple = 4;
  if (has_longitudinaloffsetsimple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->longitudinaloffsetsimple(), target);
  }

  // optional double verticalOffset_m = 5;
  if (has_verticaloffset_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->verticaloffset_m(), target);
  }

  // optional .PositionOffset.VerticalOffsetSimpleEnum verticalOffsetSimple = 6;
  if (has_verticaloffsetsimple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->verticaloffsetsimple(), target);
  }

  // optional double lateralOffsetAccuracy_m = 7;
  if (has_lateraloffsetaccuracy_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lateraloffsetaccuracy_m(), target);
  }

  // optional double longitudinalOffsetAccuracy_m = 8;
  if (has_longitudinaloffsetaccuracy_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->longitudinaloffsetaccuracy_m(), target);
  }

  // optional double verticalOffsetAccuracy_m = 9;
  if (has_verticaloffsetaccuracy_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->verticaloffsetaccuracy_m(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PositionOffset)
  return target;
}

int PositionOffset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PositionOffset)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double lateralOffset_m = 1;
    if (has_lateraloffset_m()) {
      total_size += 1 + 8;
    }

    // optional .PositionOffset.LateralOffsetSimpleEnum lateralOffsetSimple = 2;
    if (has_lateraloffsetsimple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lateraloffsetsimple());
    }

    // optional double longitudinalOffset_m = 3;
    if (has_longitudinaloffset_m()) {
      total_size += 1 + 8;
    }

    // optional .PositionOffset.LongitudinalOffsetSimpleEnum longitudinalOffsetSimple = 4;
    if (has_longitudinaloffsetsimple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->longitudinaloffsetsimple());
    }

    // optional double verticalOffset_m = 5;
    if (has_verticaloffset_m()) {
      total_size += 1 + 8;
    }

    // optional .PositionOffset.VerticalOffsetSimpleEnum verticalOffsetSimple = 6;
    if (has_verticaloffsetsimple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->verticaloffsetsimple());
    }

    // optional double lateralOffsetAccuracy_m = 7;
    if (has_lateraloffsetaccuracy_m()) {
      total_size += 1 + 8;
    }

    // optional double longitudinalOffsetAccuracy_m = 8;
    if (has_longitudinaloffsetaccuracy_m()) {
      total_size += 1 + 8;
    }

  }
  // optional double verticalOffsetAccuracy_m = 9;
  if (has_verticaloffsetaccuracy_m()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionOffset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PositionOffset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PositionOffset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionOffset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PositionOffset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PositionOffset)
    MergeFrom(*source);
  }
}

void PositionOffset::MergeFrom(const PositionOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PositionOffset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lateraloffset_m()) {
      set_lateraloffset_m(from.lateraloffset_m());
    }
    if (from.has_lateraloffsetsimple()) {
      set_lateraloffsetsimple(from.lateraloffsetsimple());
    }
    if (from.has_longitudinaloffset_m()) {
      set_longitudinaloffset_m(from.longitudinaloffset_m());
    }
    if (from.has_longitudinaloffsetsimple()) {
      set_longitudinaloffsetsimple(from.longitudinaloffsetsimple());
    }
    if (from.has_verticaloffset_m()) {
      set_verticaloffset_m(from.verticaloffset_m());
    }
    if (from.has_verticaloffsetsimple()) {
      set_verticaloffsetsimple(from.verticaloffsetsimple());
    }
    if (from.has_lateraloffsetaccuracy_m()) {
      set_lateraloffsetaccuracy_m(from.lateraloffsetaccuracy_m());
    }
    if (from.has_longitudinaloffsetaccuracy_m()) {
      set_longitudinaloffsetaccuracy_m(from.longitudinaloffsetaccuracy_m());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_verticaloffsetaccuracy_m()) {
      set_verticaloffsetaccuracy_m(from.verticaloffsetaccuracy_m());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PositionOffset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PositionOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionOffset::CopyFrom(const PositionOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PositionOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionOffset::IsInitialized() const {

  return true;
}

void PositionOffset::Swap(PositionOffset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionOffset::InternalSwap(PositionOffset* other) {
  std::swap(lateraloffset_m_, other->lateraloffset_m_);
  std::swap(lateraloffsetsimple_, other->lateraloffsetsimple_);
  std::swap(longitudinaloffset_m_, other->longitudinaloffset_m_);
  std::swap(longitudinaloffsetsimple_, other->longitudinaloffsetsimple_);
  std::swap(verticaloffset_m_, other->verticaloffset_m_);
  std::swap(verticaloffsetsimple_, other->verticaloffsetsimple_);
  std::swap(lateraloffsetaccuracy_m_, other->lateraloffsetaccuracy_m_);
  std::swap(longitudinaloffsetaccuracy_m_, other->longitudinaloffsetaccuracy_m_);
  std::swap(verticaloffsetaccuracy_m_, other->verticaloffsetaccuracy_m_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PositionOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionOffset_descriptor_;
  metadata.reflection = PositionOffset_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PositionOffset

// optional double lateralOffset_m = 1;
bool PositionOffset::has_lateraloffset_m() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PositionOffset::set_has_lateraloffset_m() {
  _has_bits_[0] |= 0x00000001u;
}
void PositionOffset::clear_has_lateraloffset_m() {
  _has_bits_[0] &= ~0x00000001u;
}
void PositionOffset::clear_lateraloffset_m() {
  lateraloffset_m_ = 0;
  clear_has_lateraloffset_m();
}
 double PositionOffset::lateraloffset_m() const {
  // @@protoc_insertion_point(field_get:PositionOffset.lateralOffset_m)
  return lateraloffset_m_;
}
 void PositionOffset::set_lateraloffset_m(double value) {
  set_has_lateraloffset_m();
  lateraloffset_m_ = value;
  // @@protoc_insertion_point(field_set:PositionOffset.lateralOffset_m)
}

// optional .PositionOffset.LateralOffsetSimpleEnum lateralOffsetSimple = 2;
bool PositionOffset::has_lateraloffsetsimple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PositionOffset::set_has_lateraloffsetsimple() {
  _has_bits_[0] |= 0x00000002u;
}
void PositionOffset::clear_has_lateraloffsetsimple() {
  _has_bits_[0] &= ~0x00000002u;
}
void PositionOffset::clear_lateraloffsetsimple() {
  lateraloffsetsimple_ = 1;
  clear_has_lateraloffsetsimple();
}
 ::PositionOffset_LateralOffsetSimpleEnum PositionOffset::lateraloffsetsimple() const {
  // @@protoc_insertion_point(field_get:PositionOffset.lateralOffsetSimple)
  return static_cast< ::PositionOffset_LateralOffsetSimpleEnum >(lateraloffsetsimple_);
}
 void PositionOffset::set_lateraloffsetsimple(::PositionOffset_LateralOffsetSimpleEnum value) {
  assert(::PositionOffset_LateralOffsetSimpleEnum_IsValid(value));
  set_has_lateraloffsetsimple();
  lateraloffsetsimple_ = value;
  // @@protoc_insertion_point(field_set:PositionOffset.lateralOffsetSimple)
}

// optional double longitudinalOffset_m = 3;
bool PositionOffset::has_longitudinaloffset_m() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PositionOffset::set_has_longitudinaloffset_m() {
  _has_bits_[0] |= 0x00000004u;
}
void PositionOffset::clear_has_longitudinaloffset_m() {
  _has_bits_[0] &= ~0x00000004u;
}
void PositionOffset::clear_longitudinaloffset_m() {
  longitudinaloffset_m_ = 0;
  clear_has_longitudinaloffset_m();
}
 double PositionOffset::longitudinaloffset_m() const {
  // @@protoc_insertion_point(field_get:PositionOffset.longitudinalOffset_m)
  return longitudinaloffset_m_;
}
 void PositionOffset::set_longitudinaloffset_m(double value) {
  set_has_longitudinaloffset_m();
  longitudinaloffset_m_ = value;
  // @@protoc_insertion_point(field_set:PositionOffset.longitudinalOffset_m)
}

// optional .PositionOffset.LongitudinalOffsetSimpleEnum longitudinalOffsetSimple = 4;
bool PositionOffset::has_longitudinaloffsetsimple() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PositionOffset::set_has_longitudinaloffsetsimple() {
  _has_bits_[0] |= 0x00000008u;
}
void PositionOffset::clear_has_longitudinaloffsetsimple() {
  _has_bits_[0] &= ~0x00000008u;
}
void PositionOffset::clear_longitudinaloffsetsimple() {
  longitudinaloffsetsimple_ = 1;
  clear_has_longitudinaloffsetsimple();
}
 ::PositionOffset_LongitudinalOffsetSimpleEnum PositionOffset::longitudinaloffsetsimple() const {
  // @@protoc_insertion_point(field_get:PositionOffset.longitudinalOffsetSimple)
  return static_cast< ::PositionOffset_LongitudinalOffsetSimpleEnum >(longitudinaloffsetsimple_);
}
 void PositionOffset::set_longitudinaloffsetsimple(::PositionOffset_LongitudinalOffsetSimpleEnum value) {
  assert(::PositionOffset_LongitudinalOffsetSimpleEnum_IsValid(value));
  set_has_longitudinaloffsetsimple();
  longitudinaloffsetsimple_ = value;
  // @@protoc_insertion_point(field_set:PositionOffset.longitudinalOffsetSimple)
}

// optional double verticalOffset_m = 5;
bool PositionOffset::has_verticaloffset_m() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PositionOffset::set_has_verticaloffset_m() {
  _has_bits_[0] |= 0x00000010u;
}
void PositionOffset::clear_has_verticaloffset_m() {
  _has_bits_[0] &= ~0x00000010u;
}
void PositionOffset::clear_verticaloffset_m() {
  verticaloffset_m_ = 0;
  clear_has_verticaloffset_m();
}
 double PositionOffset::verticaloffset_m() const {
  // @@protoc_insertion_point(field_get:PositionOffset.verticalOffset_m)
  return verticaloffset_m_;
}
 void PositionOffset::set_verticaloffset_m(double value) {
  set_has_verticaloffset_m();
  verticaloffset_m_ = value;
  // @@protoc_insertion_point(field_set:PositionOffset.verticalOffset_m)
}

// optional .PositionOffset.VerticalOffsetSimpleEnum verticalOffsetSimple = 6;
bool PositionOffset::has_verticaloffsetsimple() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PositionOffset::set_has_verticaloffsetsimple() {
  _has_bits_[0] |= 0x00000020u;
}
void PositionOffset::clear_has_verticaloffsetsimple() {
  _has_bits_[0] &= ~0x00000020u;
}
void PositionOffset::clear_verticaloffsetsimple() {
  verticaloffsetsimple_ = 1;
  clear_has_verticaloffsetsimple();
}
 ::PositionOffset_VerticalOffsetSimpleEnum PositionOffset::verticaloffsetsimple() const {
  // @@protoc_insertion_point(field_get:PositionOffset.verticalOffsetSimple)
  return static_cast< ::PositionOffset_VerticalOffsetSimpleEnum >(verticaloffsetsimple_);
}
 void PositionOffset::set_verticaloffsetsimple(::PositionOffset_VerticalOffsetSimpleEnum value) {
  assert(::PositionOffset_VerticalOffsetSimpleEnum_IsValid(value));
  set_has_verticaloffsetsimple();
  verticaloffsetsimple_ = value;
  // @@protoc_insertion_point(field_set:PositionOffset.verticalOffsetSimple)
}

// optional double lateralOffsetAccuracy_m = 7;
bool PositionOffset::has_lateraloffsetaccuracy_m() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PositionOffset::set_has_lateraloffsetaccuracy_m() {
  _has_bits_[0] |= 0x00000040u;
}
void PositionOffset::clear_has_lateraloffsetaccuracy_m() {
  _has_bits_[0] &= ~0x00000040u;
}
void PositionOffset::clear_lateraloffsetaccuracy_m() {
  lateraloffsetaccuracy_m_ = 0;
  clear_has_lateraloffsetaccuracy_m();
}
 double PositionOffset::lateraloffsetaccuracy_m() const {
  // @@protoc_insertion_point(field_get:PositionOffset.lateralOffsetAccuracy_m)
  return lateraloffsetaccuracy_m_;
}
 void PositionOffset::set_lateraloffsetaccuracy_m(double value) {
  set_has_lateraloffsetaccuracy_m();
  lateraloffsetaccuracy_m_ = value;
  // @@protoc_insertion_point(field_set:PositionOffset.lateralOffsetAccuracy_m)
}

// optional double longitudinalOffsetAccuracy_m = 8;
bool PositionOffset::has_longitudinaloffsetaccuracy_m() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PositionOffset::set_has_longitudinaloffsetaccuracy_m() {
  _has_bits_[0] |= 0x00000080u;
}
void PositionOffset::clear_has_longitudinaloffsetaccuracy_m() {
  _has_bits_[0] &= ~0x00000080u;
}
void PositionOffset::clear_longitudinaloffsetaccuracy_m() {
  longitudinaloffsetaccuracy_m_ = 0;
  clear_has_longitudinaloffsetaccuracy_m();
}
 double PositionOffset::longitudinaloffsetaccuracy_m() const {
  // @@protoc_insertion_point(field_get:PositionOffset.longitudinalOffsetAccuracy_m)
  return longitudinaloffsetaccuracy_m_;
}
 void PositionOffset::set_longitudinaloffsetaccuracy_m(double value) {
  set_has_longitudinaloffsetaccuracy_m();
  longitudinaloffsetaccuracy_m_ = value;
  // @@protoc_insertion_point(field_set:PositionOffset.longitudinalOffsetAccuracy_m)
}

// optional double verticalOffsetAccuracy_m = 9;
bool PositionOffset::has_verticaloffsetaccuracy_m() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PositionOffset::set_has_verticaloffsetaccuracy_m() {
  _has_bits_[0] |= 0x00000100u;
}
void PositionOffset::clear_has_verticaloffsetaccuracy_m() {
  _has_bits_[0] &= ~0x00000100u;
}
void PositionOffset::clear_verticaloffsetaccuracy_m() {
  verticaloffsetaccuracy_m_ = 0;
  clear_has_verticaloffsetaccuracy_m();
}
 double PositionOffset::verticaloffsetaccuracy_m() const {
  // @@protoc_insertion_point(field_get:PositionOffset.verticalOffsetAccuracy_m)
  return verticaloffsetaccuracy_m_;
}
 void PositionOffset::set_verticaloffsetaccuracy_m(double value) {
  set_has_verticaloffsetaccuracy_m();
  verticaloffsetaccuracy_m_ = value;
  // @@protoc_insertion_point(field_set:PositionOffset.verticalOffsetAccuracy_m)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* RoadSignRestriction_RestrictionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadSignRestriction_RestrictionType_descriptor_;
}
bool RoadSignRestriction_RestrictionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 9999:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadSignRestriction_RestrictionType RoadSignRestriction::RAIN;
const RoadSignRestriction_RestrictionType RoadSignRestriction::SNOW;
const RoadSignRestriction_RestrictionType RoadSignRestriction::TIME;
const RoadSignRestriction_RestrictionType RoadSignRestriction::SEASON;
const RoadSignRestriction_RestrictionType RoadSignRestriction::FOG;
const RoadSignRestriction_RestrictionType RoadSignRestriction::SCHOOL;
const RoadSignRestriction_RestrictionType RoadSignRestriction::TRUCKS;
const RoadSignRestriction_RestrictionType RoadSignRestriction::TRAILER;
const RoadSignRestriction_RestrictionType RoadSignRestriction::STARTING_IN;
const RoadSignRestriction_RestrictionType RoadSignRestriction::VALID_FOR;
const RoadSignRestriction_RestrictionType RoadSignRestriction::IN_RIGHT_DIRECTION;
const RoadSignRestriction_RestrictionType RoadSignRestriction::IN_LEFT_DIRECTION;
const RoadSignRestriction_RestrictionType RoadSignRestriction::ZONE;
const RoadSignRestriction_RestrictionType RoadSignRestriction::ANY_PICTURE;
const RoadSignRestriction_RestrictionType RoadSignRestriction::ANY_TEXT;
const RoadSignRestriction_RestrictionType RoadSignRestriction::ANY_RESTRICTION;
const RoadSignRestriction_RestrictionType RoadSignRestriction::GARBAGE;
const RoadSignRestriction_RestrictionType RoadSignRestriction::NIGHT;
const RoadSignRestriction_RestrictionType RoadSignRestriction::WORKDAYS;
const RoadSignRestriction_RestrictionType RoadSignRestriction::WORKDAYS_AND_TIME;
const RoadSignRestriction_RestrictionType RoadSignRestriction::MON2FRI_AND_TIME;
const RoadSignRestriction_RestrictionType RoadSignRestriction::MOTORCYCLE;
const RoadSignRestriction_RestrictionType RoadSignRestriction::PASSENGER_CAR_TRAILER;
const RoadSignRestriction_RestrictionType RoadSignRestriction::TRACTORS_MAY_BE_PASSED;
const RoadSignRestriction_RestrictionType RoadSignRestriction::TRUCK_BUS_CAR_TRAILER;
const RoadSignRestriction_RestrictionType RoadSignRestriction::WEIGHT;
const RoadSignRestriction_RestrictionType RoadSignRestriction::WET;
const RoadSignRestriction_RestrictionType RoadSignRestriction::ICY;
const RoadSignRestriction_RestrictionType RoadSignRestriction::X_WAY;
const RoadSignRestriction_RestrictionType RoadSignRestriction::PASSENGER_CAR;
const RoadSignRestriction_RestrictionType RoadSignRestriction::UNKNOWN_RESTRICTION;
const RoadSignRestriction_RestrictionType RoadSignRestriction::RestrictionType_MIN;
const RoadSignRestriction_RestrictionType RoadSignRestriction::RestrictionType_MAX;
const int RoadSignRestriction::RestrictionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadSignRestriction::kRestrictionTypeFieldNumber;
const int RoadSignRestriction::kRestrictionValueFieldNumber;
const int RoadSignRestriction::kRestrictionConfidencePercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadSignRestriction::RoadSignRestriction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoadSignRestriction)
}

void RoadSignRestriction::InitAsDefaultInstance() {
}

RoadSignRestriction::RoadSignRestriction(const RoadSignRestriction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoadSignRestriction)
}

void RoadSignRestriction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  restrictiontype_ = 1;
  restrictionvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  restrictionconfidence_percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadSignRestriction::~RoadSignRestriction() {
  // @@protoc_insertion_point(destructor:RoadSignRestriction)
  SharedDtor();
}

void RoadSignRestriction::SharedDtor() {
  restrictionvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoadSignRestriction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadSignRestriction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadSignRestriction_descriptor_;
}

const RoadSignRestriction& RoadSignRestriction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

RoadSignRestriction* RoadSignRestriction::default_instance_ = NULL;

RoadSignRestriction* RoadSignRestriction::New(::google::protobuf::Arena* arena) const {
  RoadSignRestriction* n = new RoadSignRestriction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadSignRestriction::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadSignRestriction)
  if (_has_bits_[0 / 32] & 7u) {
    restrictiontype_ = 1;
    if (has_restrictionvalue()) {
      restrictionvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    restrictionconfidence_percent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoadSignRestriction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoadSignRestriction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RoadSignRestriction.RestrictionType restrictionType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RoadSignRestriction_RestrictionType_IsValid(value)) {
            set_restrictiontype(static_cast< ::RoadSignRestriction_RestrictionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_restrictionValue;
        break;
      }

      // optional string restrictionValue = 2;
      case 2: {
        if (tag == 18) {
         parse_restrictionValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_restrictionvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->restrictionvalue().data(), this->restrictionvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RoadSignRestriction.restrictionValue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_restrictionConfidence_percent;
        break;
      }

      // optional uint32 restrictionConfidence_percent = 3;
      case 3: {
        if (tag == 24) {
         parse_restrictionConfidence_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restrictionconfidence_percent_)));
          set_has_restrictionconfidence_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoadSignRestriction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoadSignRestriction)
  return false;
#undef DO_
}

void RoadSignRestriction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoadSignRestriction)
  // required .RoadSignRestriction.RestrictionType restrictionType = 1;
  if (has_restrictiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->restrictiontype(), output);
  }

  // optional string restrictionValue = 2;
  if (has_restrictionvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->restrictionvalue().data(), this->restrictionvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RoadSignRestriction.restrictionValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->restrictionvalue(), output);
  }

  // optional uint32 restrictionConfidence_percent = 3;
  if (has_restrictionconfidence_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->restrictionconfidence_percent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoadSignRestriction)
}

::google::protobuf::uint8* RoadSignRestriction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadSignRestriction)
  // required .RoadSignRestriction.RestrictionType restrictionType = 1;
  if (has_restrictiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->restrictiontype(), target);
  }

  // optional string restrictionValue = 2;
  if (has_restrictionvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->restrictionvalue().data(), this->restrictionvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RoadSignRestriction.restrictionValue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->restrictionvalue(), target);
  }

  // optional uint32 restrictionConfidence_percent = 3;
  if (has_restrictionconfidence_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->restrictionconfidence_percent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadSignRestriction)
  return target;
}

int RoadSignRestriction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RoadSignRestriction)
  int total_size = 0;

  // required .RoadSignRestriction.RestrictionType restrictionType = 1;
  if (has_restrictiontype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->restrictiontype());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string restrictionValue = 2;
    if (has_restrictionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->restrictionvalue());
    }

    // optional uint32 restrictionConfidence_percent = 3;
    if (has_restrictionconfidence_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restrictionconfidence_percent());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadSignRestriction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadSignRestriction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoadSignRestriction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadSignRestriction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadSignRestriction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadSignRestriction)
    MergeFrom(*source);
  }
}

void RoadSignRestriction::MergeFrom(const RoadSignRestriction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadSignRestriction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_restrictiontype()) {
      set_restrictiontype(from.restrictiontype());
    }
    if (from.has_restrictionvalue()) {
      set_has_restrictionvalue();
      restrictionvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.restrictionvalue_);
    }
    if (from.has_restrictionconfidence_percent()) {
      set_restrictionconfidence_percent(from.restrictionconfidence_percent());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoadSignRestriction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadSignRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSignRestriction::CopyFrom(const RoadSignRestriction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadSignRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSignRestriction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoadSignRestriction::Swap(RoadSignRestriction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadSignRestriction::InternalSwap(RoadSignRestriction* other) {
  std::swap(restrictiontype_, other->restrictiontype_);
  restrictionvalue_.Swap(&other->restrictionvalue_);
  std::swap(restrictionconfidence_percent_, other->restrictionconfidence_percent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadSignRestriction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadSignRestriction_descriptor_;
  metadata.reflection = RoadSignRestriction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadSignRestriction

// required .RoadSignRestriction.RestrictionType restrictionType = 1;
bool RoadSignRestriction::has_restrictiontype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadSignRestriction::set_has_restrictiontype() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadSignRestriction::clear_has_restrictiontype() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadSignRestriction::clear_restrictiontype() {
  restrictiontype_ = 1;
  clear_has_restrictiontype();
}
 ::RoadSignRestriction_RestrictionType RoadSignRestriction::restrictiontype() const {
  // @@protoc_insertion_point(field_get:RoadSignRestriction.restrictionType)
  return static_cast< ::RoadSignRestriction_RestrictionType >(restrictiontype_);
}
 void RoadSignRestriction::set_restrictiontype(::RoadSignRestriction_RestrictionType value) {
  assert(::RoadSignRestriction_RestrictionType_IsValid(value));
  set_has_restrictiontype();
  restrictiontype_ = value;
  // @@protoc_insertion_point(field_set:RoadSignRestriction.restrictionType)
}

// optional string restrictionValue = 2;
bool RoadSignRestriction::has_restrictionvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoadSignRestriction::set_has_restrictionvalue() {
  _has_bits_[0] |= 0x00000002u;
}
void RoadSignRestriction::clear_has_restrictionvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoadSignRestriction::clear_restrictionvalue() {
  restrictionvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_restrictionvalue();
}
 const ::std::string& RoadSignRestriction::restrictionvalue() const {
  // @@protoc_insertion_point(field_get:RoadSignRestriction.restrictionValue)
  return restrictionvalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoadSignRestriction::set_restrictionvalue(const ::std::string& value) {
  set_has_restrictionvalue();
  restrictionvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RoadSignRestriction.restrictionValue)
}
 void RoadSignRestriction::set_restrictionvalue(const char* value) {
  set_has_restrictionvalue();
  restrictionvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoadSignRestriction.restrictionValue)
}
 void RoadSignRestriction::set_restrictionvalue(const char* value, size_t size) {
  set_has_restrictionvalue();
  restrictionvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoadSignRestriction.restrictionValue)
}
 ::std::string* RoadSignRestriction::mutable_restrictionvalue() {
  set_has_restrictionvalue();
  // @@protoc_insertion_point(field_mutable:RoadSignRestriction.restrictionValue)
  return restrictionvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoadSignRestriction::release_restrictionvalue() {
  // @@protoc_insertion_point(field_release:RoadSignRestriction.restrictionValue)
  clear_has_restrictionvalue();
  return restrictionvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoadSignRestriction::set_allocated_restrictionvalue(::std::string* restrictionvalue) {
  if (restrictionvalue != NULL) {
    set_has_restrictionvalue();
  } else {
    clear_has_restrictionvalue();
  }
  restrictionvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), restrictionvalue);
  // @@protoc_insertion_point(field_set_allocated:RoadSignRestriction.restrictionValue)
}

// optional uint32 restrictionConfidence_percent = 3;
bool RoadSignRestriction::has_restrictionconfidence_percent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoadSignRestriction::set_has_restrictionconfidence_percent() {
  _has_bits_[0] |= 0x00000004u;
}
void RoadSignRestriction::clear_has_restrictionconfidence_percent() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoadSignRestriction::clear_restrictionconfidence_percent() {
  restrictionconfidence_percent_ = 0u;
  clear_has_restrictionconfidence_percent();
}
 ::google::protobuf::uint32 RoadSignRestriction::restrictionconfidence_percent() const {
  // @@protoc_insertion_point(field_get:RoadSignRestriction.restrictionConfidence_percent)
  return restrictionconfidence_percent_;
}
 void RoadSignRestriction::set_restrictionconfidence_percent(::google::protobuf::uint32 value) {
  set_has_restrictionconfidence_percent();
  restrictionconfidence_percent_ = value;
  // @@protoc_insertion_point(field_set:RoadSignRestriction.restrictionConfidence_percent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SignRecognition_RoadSignTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignRecognition_RoadSignTypeEnum_descriptor_;
}
bool SignRecognition_RoadSignTypeEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1014:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1022:
    case 1023:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1119:
    case 1120:
    case 1121:
    case 1122:
    case 1123:
    case 1124:
    case 1125:
    case 1126:
    case 1127:
    case 1128:
    case 1129:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1134:
    case 1135:
    case 1136:
    case 1137:
    case 1138:
    case 1139:
    case 1140:
    case 1141:
    case 1142:
    case 1143:
    case 1144:
    case 1145:
    case 1146:
    case 1147:
    case 1148:
    case 1149:
    case 1150:
    case 1151:
    case 1152:
    case 1153:
    case 1154:
    case 1155:
    case 1156:
    case 1157:
    case 1158:
    case 1159:
    case 1160:
    case 1161:
    case 1162:
    case 1163:
    case 1164:
    case 1165:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
    case 1207:
    case 9999:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SignRecognition_RoadSignTypeEnum SignRecognition::SPEED_LIMIT_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::SPEED_LIMIT_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_OVERTAKING_PASSENGER_CARS_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_OVERTAKING_PASSENGER_CARS_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_OVERTAKING_TRUCKS_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_OVERTAKING_TRUCKS_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::ALL_RESTRICTIONS_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::CITY_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::CITY_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::MOTORWAY_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::MOTORWAY_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::CONSTRUCTION_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::CONSTRUCTION_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::PROTECTED_OVERTAKING_EXTRALANE;
const SignRecognition_RoadSignTypeEnum SignRecognition::PROTECTED_OVERTAKING_EXTRALANE_RIGHTSIDE;
const SignRecognition_RoadSignTypeEnum SignRecognition::PROTECTED_OVERTAKING_EXTRALANE_LEFTSIDE;
const SignRecognition_RoadSignTypeEnum SignRecognition::LANE_MERGE_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::LANE_MERGE_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::LANE_MERGE_CENTER;
const SignRecognition_RoadSignTypeEnum SignRecognition::RAILWAY_CROSSING_PROTECTED;
const SignRecognition_RoadSignTypeEnum SignRecognition::RAILWAY_CROSSING_UNPROTECTED;
const SignRecognition_RoadSignTypeEnum SignRecognition::ROAD_NARROWS;
const SignRecognition_RoadSignTypeEnum SignRecognition::SHARP_CURVE;
const SignRecognition_RoadSignTypeEnum SignRecognition::SHARP_CURVE_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::SHARP_CURVE_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::WINDING_ROAD_STARTING_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::WINDING_ROAD_STARTING_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::STEEP_HILL;
const SignRecognition_RoadSignTypeEnum SignRecognition::STEEP_HILL_UPWARDS;
const SignRecognition_RoadSignTypeEnum SignRecognition::STEEP_HILL_DOWNWARDS;
const SignRecognition_RoadSignTypeEnum SignRecognition::STOP_SIGN;
const SignRecognition_RoadSignTypeEnum SignRecognition::LATERAL_WIND;
const SignRecognition_RoadSignTypeEnum SignRecognition::GENERAL_WARNING;
const SignRecognition_RoadSignTypeEnum SignRecognition::RISK_OF_GROUNDING;
const SignRecognition_RoadSignTypeEnum SignRecognition::ANIMAL_CROSSING;
const SignRecognition_RoadSignTypeEnum SignRecognition::ICY_CONDITIONS;
const SignRecognition_RoadSignTypeEnum SignRecognition::SLIPPERY_ROAD;
const SignRecognition_RoadSignTypeEnum SignRecognition::FALLING_ROCKS;
const SignRecognition_RoadSignTypeEnum SignRecognition::SCHOOL_ZONE;
const SignRecognition_RoadSignTypeEnum SignRecognition::TRAMWAY_CROSSING;
const SignRecognition_RoadSignTypeEnum SignRecognition::CONGESTION_HAZARD;
const SignRecognition_RoadSignTypeEnum SignRecognition::ACCIDENT_HAZARD;
const SignRecognition_RoadSignTypeEnum SignRecognition::PRIORITY_OVER_ONCOMING_TRAFFIC;
const SignRecognition_RoadSignTypeEnum SignRecognition::YIELD_TO_ONCOMING_TRAFFIC;
const SignRecognition_RoadSignTypeEnum SignRecognition::PREFERENCE_ROAD_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::PREFERENCE_ROAD_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::ENVIRONMENTAL_ZONE_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::ENVIRONMENTAL_ZONE_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::RESIDENTIAL_AREA_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::RESIDENTIAL_AREA_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::HIGHWAY_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::HIGHWAY_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::ZONE_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::ZONE_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::ROUNDABOUT;
const SignRecognition_RoadSignTypeEnum SignRecognition::PASS_THIS_SIDE_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::PASS_THIS_SIDE_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_ENTRY;
const SignRecognition_RoadSignTypeEnum SignRecognition::ENVIRONMENTAL_ZONE_GREEN_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::UNEVEN_ROAD;
const SignRecognition_RoadSignTypeEnum SignRecognition::GENERAL_PRIORITIES_RULE;
const SignRecognition_RoadSignTypeEnum SignRecognition::DANGER_NARROW_ROAD;
const SignRecognition_RoadSignTypeEnum SignRecognition::DANGER_CHILDREN;
const SignRecognition_RoadSignTypeEnum SignRecognition::DANGER_PEDESTRIANS;
const SignRecognition_RoadSignTypeEnum SignRecognition::DANGER_CYCLIST;
const SignRecognition_RoadSignTypeEnum SignRecognition::ROAD_NARROWS_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::ROAD_NARROWS_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::GRAVEL;
const SignRecognition_RoadSignTypeEnum SignRecognition::CONTRAFLOW_TRAFFIC;
const SignRecognition_RoadSignTypeEnum SignRecognition::DRAWBRIDGE;
const SignRecognition_RoadSignTypeEnum SignRecognition::QUAYWALL;
const SignRecognition_RoadSignTypeEnum SignRecognition::TRAFFICLIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::ZEBRA_CROSSING_HAZARD;
const SignRecognition_RoadSignTypeEnum SignRecognition::CATTLE_CROSSING;
const SignRecognition_RoadSignTypeEnum SignRecognition::PLANES_CROSSING;
const SignRecognition_RoadSignTypeEnum SignRecognition::BUS_CROSSING;
const SignRecognition_RoadSignTypeEnum SignRecognition::PRECEDENCE_FOR_CONTRAFLOW_TRAFFIC;
const SignRecognition_RoadSignTypeEnum SignRecognition::TURN_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::TURN_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_TURN;
const SignRecognition_RoadSignTypeEnum SignRecognition::TURN_LEFT_OR_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::DRIVE_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::DRIVE_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_TURN_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_TURN_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::ONEWAY_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::ONEWAY_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::BUSSTOP;
const SignRecognition_RoadSignTypeEnum SignRecognition::BICYCLE_LANE;
const SignRecognition_RoadSignTypeEnum SignRecognition::HORSERIDING_LANE;
const SignRecognition_RoadSignTypeEnum SignRecognition::PEDESTRIAN_LANE;
const SignRecognition_RoadSignTypeEnum SignRecognition::PEDESTRIAN_AND_BICYCLE_LANE;
const SignRecognition_RoadSignTypeEnum SignRecognition::BICYCLE_BESIDES_PEDESTRIAN_LANE;
const SignRecognition_RoadSignTypeEnum SignRecognition::PEDESTRIAN_BESIDES_BICYCLE_LANE;
const SignRecognition_RoadSignTypeEnum SignRecognition::PEDESTRIAN_ZONE_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::PEDESTRIAN_ZONE_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::BICYCLE_ZONE_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::BICYCLE_ZONE_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_PARKING_ZONE_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_PARKING_ZONE_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::BUS_LANE;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_MOTORVEHICLES;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_TRUCKS;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_BICYCLE;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_MOTORCYCLE;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_SCOOTER;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_HORSERIDING;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_PEDESTRIANS;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_MOTORVEHICLES_AND_MOTORCYCLE;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_DANGEROUSGOODS;
const SignRecognition_RoadSignTypeEnum SignRecognition::RESTRICTED_WEIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::RESTRICTED_AXLE_WEIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::RESTRICTED_WIDTH;
const SignRecognition_RoadSignTypeEnum SignRecognition::RESTRICTED_HEIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::RESTRICTED_LENGTH;
const SignRecognition_RoadSignTypeEnum SignRecognition::SNOW_CHAINS_MANDATORY;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_WATER_HAZARDOUS_GOODS;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_UTURN;
const SignRecognition_RoadSignTypeEnum SignRecognition::PROHIBITED_MINIMUM_GAP_DECEED;
const SignRecognition_RoadSignTypeEnum SignRecognition::MANDATORY_MINIMUM_SPEED_START;
const SignRecognition_RoadSignTypeEnum SignRecognition::MANDATORY_MINIMUM_SPEED_END;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_STOPPING_TO_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_STOPPING_TO_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_STOPPING_TO_BOTH;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_STOPPING;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_PARKING_TO_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_PARKING_TO_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_PARKING_TO_BOTH;
const SignRecognition_RoadSignTypeEnum SignRecognition::NO_PARKING;
const SignRecognition_RoadSignTypeEnum SignRecognition::PRIORITY_OVER_CONTRAFLOW_TRAFFIC;
const SignRecognition_RoadSignTypeEnum SignRecognition::ZEBRA_CROSSING;
const SignRecognition_RoadSignTypeEnum SignRecognition::HAF_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::HAF_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::ROADMARK_ARROW_STRAIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::ROADMARK_ARROW_LEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::ROADMARK_ARROW_RIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::ROADMARK_ARROW_STRAIGHTLEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::ROADMARK_ARROW_STRAIGHTRIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::ROADMARK_ARROW_LEFTRIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::ROADMARK_ARROW_MERGELEFT;
const SignRecognition_RoadSignTypeEnum SignRecognition::ROADMARK_ARROW_MERGERIGHT;
const SignRecognition_RoadSignTypeEnum SignRecognition::UNKNOWN_SIGN;
const SignRecognition_RoadSignTypeEnum SignRecognition::RoadSignTypeEnum_MIN;
const SignRecognition_RoadSignTypeEnum SignRecognition::RoadSignTypeEnum_MAX;
const int SignRecognition::RoadSignTypeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SignRecognition_RoadSignPermanencyEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignRecognition_RoadSignPermanencyEnum_descriptor_;
}
bool SignRecognition_RoadSignPermanencyEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SignRecognition_RoadSignPermanencyEnum SignRecognition::STATIC;
const SignRecognition_RoadSignPermanencyEnum SignRecognition::VARIABLE;
const SignRecognition_RoadSignPermanencyEnum SignRecognition::RoadSignPermanencyEnum_MIN;
const SignRecognition_RoadSignPermanencyEnum SignRecognition::RoadSignPermanencyEnum_MAX;
const int SignRecognition::RoadSignPermanencyEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SignRecognition_RoadSignDependenciesEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignRecognition_RoadSignDependenciesEnum_descriptor_;
}
bool SignRecognition_RoadSignDependenciesEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 9999:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SignRecognition_RoadSignDependenciesEnum SignRecognition::RAIN;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::SNOW;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::TIME;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::SEASON;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::FOG;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::SCHOOL;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::TRUCKS;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::TRAILER;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::ANY_PICTURE;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::ANY_TEXT;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::ANY_RESTRICTION;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::GARBAGE;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::NIGHT;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::WORKDAYS;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::WORKDAYS_AND_TIME;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::MON2FRI_AND_TIME;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::MOTORCYCLE;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::PASSENGER_CAR_TRAILER;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::TRACTORS_MAY_BE_PASSED;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::TRUCK_BUS_CAR_TRAILER;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::WEIGHT;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::WET;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::ICY;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::X_WAY;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::PASSENGER_CAR;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::UNKNOWN_DEPENDENCY;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::RoadSignDependenciesEnum_MIN;
const SignRecognition_RoadSignDependenciesEnum SignRecognition::RoadSignDependenciesEnum_MAX;
const int SignRecognition::RoadSignDependenciesEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SignRecognition_RoadSignValidityEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignRecognition_RoadSignValidityEnum_descriptor_;
}
bool SignRecognition_RoadSignValidityEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 9999:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SignRecognition_RoadSignValidityEnum SignRecognition::STARTING_IN;
const SignRecognition_RoadSignValidityEnum SignRecognition::VALID_FOR;
const SignRecognition_RoadSignValidityEnum SignRecognition::IN_RIGHT_DIRECTION;
const SignRecognition_RoadSignValidityEnum SignRecognition::IN_LEFT_DIRECTION;
const SignRecognition_RoadSignValidityEnum SignRecognition::ZONE;
const SignRecognition_RoadSignValidityEnum SignRecognition::UNKNOWN_VALIDITY;
const SignRecognition_RoadSignValidityEnum SignRecognition::RoadSignValidityEnum_MIN;
const SignRecognition_RoadSignValidityEnum SignRecognition::RoadSignValidityEnum_MAX;
const int SignRecognition::RoadSignValidityEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SignRecognition_RoadSignRecognitionTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignRecognition_RoadSignRecognitionTypeEnum_descriptor_;
}
bool SignRecognition_RoadSignRecognitionTypeEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SignRecognition_RoadSignRecognitionTypeEnum SignRecognition::SIGN_DETECTED;
const SignRecognition_RoadSignRecognitionTypeEnum SignRecognition::SIGN_NOT_DETECTED;
const SignRecognition_RoadSignRecognitionTypeEnum SignRecognition::RoadSignRecognitionTypeEnum_MIN;
const SignRecognition_RoadSignRecognitionTypeEnum SignRecognition::RoadSignRecognitionTypeEnum_MAX;
const int SignRecognition::RoadSignRecognitionTypeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignRecognition::kTimeStampUTCMsFieldNumber;
const int SignRecognition::kPositionOffsetFieldNumber;
const int SignRecognition::kRoadSignTypeFieldNumber;
const int SignRecognition::kRoadSignPermanencyFieldNumber;
const int SignRecognition::kRoadSignValueFieldNumber;
const int SignRecognition::kRoadSignDependenciesFieldNumber;
const int SignRecognition::kRoadSignValidityFieldNumber;
const int SignRecognition::kRoadSignValidityValueFieldNumber;
const int SignRecognition::kRoadSignRecognitionTypeFieldNumber;
const int SignRecognition::kDetectedObjectIDFieldNumber;
const int SignRecognition::kMediaIDFieldNumber;
const int SignRecognition::kRoadSignRecognitionConfidencePercentFieldNumber;
const int SignRecognition::kRoadSignRestrictionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignRecognition::SignRecognition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignRecognition)
}

void SignRecognition::InitAsDefaultInstance() {
  positionoffset_ = const_cast< ::PositionOffset*>(&::PositionOffset::default_instance());
}

SignRecognition::SignRecognition(const SignRecognition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SignRecognition)
}

void SignRecognition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  positionoffset_ = NULL;
  roadsigntype_ = 1;
  roadsignpermanency_ = 1;
  roadsignvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roadsigndependencies_ = 1;
  roadsignvalidity_ = 1;
  roadsignvalidityvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roadsignrecognitiontype_ = 1;
  detectedobjectid_ = GOOGLE_LONGLONG(0);
  mediaid_ = GOOGLE_LONGLONG(0);
  roadsignrecognitionconfidence_percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignRecognition::~SignRecognition() {
  // @@protoc_insertion_point(destructor:SignRecognition)
  SharedDtor();
}

void SignRecognition::SharedDtor() {
  roadsignvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roadsignvalidityvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete positionoffset_;
  }
}

void SignRecognition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignRecognition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignRecognition_descriptor_;
}

const SignRecognition& SignRecognition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

SignRecognition* SignRecognition::default_instance_ = NULL;

SignRecognition* SignRecognition::New(::google::protobuf::Arena* arena) const {
  SignRecognition* n = new SignRecognition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignRecognition::Clear() {
// @@protoc_insertion_point(message_clear_start:SignRecognition)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SignRecognition, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SignRecognition*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    timestamputc_ms_ = GOOGLE_LONGLONG(0);
    if (has_positionoffset()) {
      if (positionoffset_ != NULL) positionoffset_->::PositionOffset::Clear();
    }
    roadsigntype_ = 1;
    roadsignpermanency_ = 1;
    if (has_roadsignvalue()) {
      roadsignvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    roadsigndependencies_ = 1;
    roadsignvalidity_ = 1;
    if (has_roadsignvalidityvalue()) {
      roadsignvalidityvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(roadsignrecognitionconfidence_percent_, mediaid_);
    roadsignrecognitiontype_ = 1;
    detectedobjectid_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  roadsignrestrictions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SignRecognition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignRecognition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_positionOffset;
        break;
      }

      // optional .PositionOffset positionOffset = 2;
      case 2: {
        if (tag == 18) {
         parse_positionOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionoffset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roadSignType;
        break;
      }

      // required .SignRecognition.RoadSignTypeEnum roadSignType = 3;
      case 3: {
        if (tag == 24) {
         parse_roadSignType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SignRecognition_RoadSignTypeEnum_IsValid(value)) {
            set_roadsigntype(static_cast< ::SignRecognition_RoadSignTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roadSignPermanency;
        break;
      }

      // optional .SignRecognition.RoadSignPermanencyEnum roadSignPermanency = 4;
      case 4: {
        if (tag == 32) {
         parse_roadSignPermanency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SignRecognition_RoadSignPermanencyEnum_IsValid(value)) {
            set_roadsignpermanency(static_cast< ::SignRecognition_RoadSignPermanencyEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_roadSignValue;
        break;
      }

      // optional string roadSignValue = 5;
      case 5: {
        if (tag == 42) {
         parse_roadSignValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roadsignvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roadsignvalue().data(), this->roadsignvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SignRecognition.roadSignValue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_roadSignDependencies;
        break;
      }

      // optional .SignRecognition.RoadSignDependenciesEnum roadSignDependencies = 6;
      case 6: {
        if (tag == 48) {
         parse_roadSignDependencies:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SignRecognition_RoadSignDependenciesEnum_IsValid(value)) {
            set_roadsigndependencies(static_cast< ::SignRecognition_RoadSignDependenciesEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_roadSignValidity;
        break;
      }

      // optional .SignRecognition.RoadSignValidityEnum roadSignValidity = 7;
      case 7: {
        if (tag == 56) {
         parse_roadSignValidity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SignRecognition_RoadSignValidityEnum_IsValid(value)) {
            set_roadsignvalidity(static_cast< ::SignRecognition_RoadSignValidityEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_roadSignValidityValue;
        break;
      }

      // optional string roadSignValidityValue = 8;
      case 8: {
        if (tag == 66) {
         parse_roadSignValidityValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roadsignvalidityvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roadsignvalidityvalue().data(), this->roadsignvalidityvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SignRecognition.roadSignValidityValue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_roadSignRecognitionType;
        break;
      }

      // optional .SignRecognition.RoadSignRecognitionTypeEnum roadSignRecognitionType = 9;
      case 9: {
        if (tag == 72) {
         parse_roadSignRecognitionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SignRecognition_RoadSignRecognitionTypeEnum_IsValid(value)) {
            set_roadsignrecognitiontype(static_cast< ::SignRecognition_RoadSignRecognitionTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_detectedObjectID;
        break;
      }

      // optional int64 detectedObjectID = 10;
      case 10: {
        if (tag == 80) {
         parse_detectedObjectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &detectedobjectid_)));
          set_has_detectedobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mediaID;
        break;
      }

      // optional int64 mediaID = 11;
      case 11: {
        if (tag == 88) {
         parse_mediaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mediaid_)));
          set_has_mediaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_roadSignRecognitionConfidence_percent;
        break;
      }

      // optional uint32 roadSignRecognitionConfidence_percent = 12;
      case 12: {
        if (tag == 96) {
         parse_roadSignRecognitionConfidence_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roadsignrecognitionconfidence_percent_)));
          set_has_roadsignrecognitionconfidence_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_roadSignRestrictions;
        break;
      }

      // repeated .RoadSignRestriction roadSignRestrictions = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_roadSignRestrictions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_roadSignRestrictions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_roadsignrestrictions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_loop_roadSignRestrictions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignRecognition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignRecognition)
  return false;
#undef DO_
}

void SignRecognition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignRecognition)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // optional .PositionOffset positionOffset = 2;
  if (has_positionoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->positionoffset_, output);
  }

  // required .SignRecognition.RoadSignTypeEnum roadSignType = 3;
  if (has_roadsigntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->roadsigntype(), output);
  }

  // optional .SignRecognition.RoadSignPermanencyEnum roadSignPermanency = 4;
  if (has_roadsignpermanency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->roadsignpermanency(), output);
  }

  // optional string roadSignValue = 5;
  if (has_roadsignvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roadsignvalue().data(), this->roadsignvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SignRecognition.roadSignValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->roadsignvalue(), output);
  }

  // optional .SignRecognition.RoadSignDependenciesEnum roadSignDependencies = 6;
  if (has_roadsigndependencies()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->roadsigndependencies(), output);
  }

  // optional .SignRecognition.RoadSignValidityEnum roadSignValidity = 7;
  if (has_roadsignvalidity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->roadsignvalidity(), output);
  }

  // optional string roadSignValidityValue = 8;
  if (has_roadsignvalidityvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roadsignvalidityvalue().data(), this->roadsignvalidityvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SignRecognition.roadSignValidityValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->roadsignvalidityvalue(), output);
  }

  // optional .SignRecognition.RoadSignRecognitionTypeEnum roadSignRecognitionType = 9;
  if (has_roadsignrecognitiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->roadsignrecognitiontype(), output);
  }

  // optional int64 detectedObjectID = 10;
  if (has_detectedobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->detectedobjectid(), output);
  }

  // optional int64 mediaID = 11;
  if (has_mediaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->mediaid(), output);
  }

  // optional uint32 roadSignRecognitionConfidence_percent = 12;
  if (has_roadsignrecognitionconfidence_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->roadsignrecognitionconfidence_percent(), output);
  }

  // repeated .RoadSignRestriction roadSignRestrictions = 1001;
  for (unsigned int i = 0, n = this->roadsignrestrictions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->roadsignrestrictions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SignRecognition)
}

::google::protobuf::uint8* SignRecognition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SignRecognition)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // optional .PositionOffset positionOffset = 2;
  if (has_positionoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->positionoffset_, false, target);
  }

  // required .SignRecognition.RoadSignTypeEnum roadSignType = 3;
  if (has_roadsigntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->roadsigntype(), target);
  }

  // optional .SignRecognition.RoadSignPermanencyEnum roadSignPermanency = 4;
  if (has_roadsignpermanency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->roadsignpermanency(), target);
  }

  // optional string roadSignValue = 5;
  if (has_roadsignvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roadsignvalue().data(), this->roadsignvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SignRecognition.roadSignValue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roadsignvalue(), target);
  }

  // optional .SignRecognition.RoadSignDependenciesEnum roadSignDependencies = 6;
  if (has_roadsigndependencies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->roadsigndependencies(), target);
  }

  // optional .SignRecognition.RoadSignValidityEnum roadSignValidity = 7;
  if (has_roadsignvalidity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->roadsignvalidity(), target);
  }

  // optional string roadSignValidityValue = 8;
  if (has_roadsignvalidityvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roadsignvalidityvalue().data(), this->roadsignvalidityvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SignRecognition.roadSignValidityValue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->roadsignvalidityvalue(), target);
  }

  // optional .SignRecognition.RoadSignRecognitionTypeEnum roadSignRecognitionType = 9;
  if (has_roadsignrecognitiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->roadsignrecognitiontype(), target);
  }

  // optional int64 detectedObjectID = 10;
  if (has_detectedobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->detectedobjectid(), target);
  }

  // optional int64 mediaID = 11;
  if (has_mediaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->mediaid(), target);
  }

  // optional uint32 roadSignRecognitionConfidence_percent = 12;
  if (has_roadsignrecognitionconfidence_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->roadsignrecognitionconfidence_percent(), target);
  }

  // repeated .RoadSignRestriction roadSignRestrictions = 1001;
  for (unsigned int i = 0, n = this->roadsignrestrictions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1001, this->roadsignrestrictions(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignRecognition)
  return target;
}

int SignRecognition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SignRecognition)
  int total_size = 0;

  if (has_timestamputc_ms()) {
    // required int64 timeStampUTC_ms = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }

  if (has_roadsigntype()) {
    // required .SignRecognition.RoadSignTypeEnum roadSignType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->roadsigntype());
  }

  return total_size;
}
int SignRecognition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SignRecognition)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int64 timeStampUTC_ms = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());

    // required .SignRecognition.RoadSignTypeEnum roadSignType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->roadsigntype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 250u) {
    // optional .PositionOffset positionOffset = 2;
    if (has_positionoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->positionoffset_);
    }

    // optional .SignRecognition.RoadSignPermanencyEnum roadSignPermanency = 4;
    if (has_roadsignpermanency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roadsignpermanency());
    }

    // optional string roadSignValue = 5;
    if (has_roadsignvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roadsignvalue());
    }

    // optional .SignRecognition.RoadSignDependenciesEnum roadSignDependencies = 6;
    if (has_roadsigndependencies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roadsigndependencies());
    }

    // optional .SignRecognition.RoadSignValidityEnum roadSignValidity = 7;
    if (has_roadsignvalidity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roadsignvalidity());
    }

    // optional string roadSignValidityValue = 8;
    if (has_roadsignvalidityvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roadsignvalidityvalue());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .SignRecognition.RoadSignRecognitionTypeEnum roadSignRecognitionType = 9;
    if (has_roadsignrecognitiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roadsignrecognitiontype());
    }

    // optional int64 detectedObjectID = 10;
    if (has_detectedobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->detectedobjectid());
    }

    // optional int64 mediaID = 11;
    if (has_mediaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mediaid());
    }

    // optional uint32 roadSignRecognitionConfidence_percent = 12;
    if (has_roadsignrecognitionconfidence_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roadsignrecognitionconfidence_percent());
    }

  }
  // repeated .RoadSignRestriction roadSignRestrictions = 1001;
  total_size += 2 * this->roadsignrestrictions_size();
  for (int i = 0; i < this->roadsignrestrictions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roadsignrestrictions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignRecognition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignRecognition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SignRecognition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SignRecognition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignRecognition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignRecognition)
    MergeFrom(*source);
  }
}

void SignRecognition::MergeFrom(const SignRecognition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignRecognition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  roadsignrestrictions_.MergeFrom(from.roadsignrestrictions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
    if (from.has_positionoffset()) {
      mutable_positionoffset()->::PositionOffset::MergeFrom(from.positionoffset());
    }
    if (from.has_roadsigntype()) {
      set_roadsigntype(from.roadsigntype());
    }
    if (from.has_roadsignpermanency()) {
      set_roadsignpermanency(from.roadsignpermanency());
    }
    if (from.has_roadsignvalue()) {
      set_has_roadsignvalue();
      roadsignvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roadsignvalue_);
    }
    if (from.has_roadsigndependencies()) {
      set_roadsigndependencies(from.roadsigndependencies());
    }
    if (from.has_roadsignvalidity()) {
      set_roadsignvalidity(from.roadsignvalidity());
    }
    if (from.has_roadsignvalidityvalue()) {
      set_has_roadsignvalidityvalue();
      roadsignvalidityvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roadsignvalidityvalue_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roadsignrecognitiontype()) {
      set_roadsignrecognitiontype(from.roadsignrecognitiontype());
    }
    if (from.has_detectedobjectid()) {
      set_detectedobjectid(from.detectedobjectid());
    }
    if (from.has_mediaid()) {
      set_mediaid(from.mediaid());
    }
    if (from.has_roadsignrecognitionconfidence_percent()) {
      set_roadsignrecognitionconfidence_percent(from.roadsignrecognitionconfidence_percent());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SignRecognition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignRecognition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignRecognition::CopyFrom(const SignRecognition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignRecognition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignRecognition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->roadsignrestrictions())) return false;
  return true;
}

void SignRecognition::Swap(SignRecognition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignRecognition::InternalSwap(SignRecognition* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  std::swap(positionoffset_, other->positionoffset_);
  std::swap(roadsigntype_, other->roadsigntype_);
  std::swap(roadsignpermanency_, other->roadsignpermanency_);
  roadsignvalue_.Swap(&other->roadsignvalue_);
  std::swap(roadsigndependencies_, other->roadsigndependencies_);
  std::swap(roadsignvalidity_, other->roadsignvalidity_);
  roadsignvalidityvalue_.Swap(&other->roadsignvalidityvalue_);
  std::swap(roadsignrecognitiontype_, other->roadsignrecognitiontype_);
  std::swap(detectedobjectid_, other->detectedobjectid_);
  std::swap(mediaid_, other->mediaid_);
  std::swap(roadsignrecognitionconfidence_percent_, other->roadsignrecognitionconfidence_percent_);
  roadsignrestrictions_.UnsafeArenaSwap(&other->roadsignrestrictions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignRecognition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignRecognition_descriptor_;
  metadata.reflection = SignRecognition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignRecognition

// required int64 timeStampUTC_ms = 1;
bool SignRecognition::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignRecognition::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void SignRecognition::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignRecognition::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 SignRecognition::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:SignRecognition.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void SignRecognition::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:SignRecognition.timeStampUTC_ms)
}

// optional .PositionOffset positionOffset = 2;
bool SignRecognition::has_positionoffset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignRecognition::set_has_positionoffset() {
  _has_bits_[0] |= 0x00000002u;
}
void SignRecognition::clear_has_positionoffset() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignRecognition::clear_positionoffset() {
  if (positionoffset_ != NULL) positionoffset_->::PositionOffset::Clear();
  clear_has_positionoffset();
}
const ::PositionOffset& SignRecognition::positionoffset() const {
  // @@protoc_insertion_point(field_get:SignRecognition.positionOffset)
  return positionoffset_ != NULL ? *positionoffset_ : *default_instance_->positionoffset_;
}
::PositionOffset* SignRecognition::mutable_positionoffset() {
  set_has_positionoffset();
  if (positionoffset_ == NULL) {
    positionoffset_ = new ::PositionOffset;
  }
  // @@protoc_insertion_point(field_mutable:SignRecognition.positionOffset)
  return positionoffset_;
}
::PositionOffset* SignRecognition::release_positionoffset() {
  // @@protoc_insertion_point(field_release:SignRecognition.positionOffset)
  clear_has_positionoffset();
  ::PositionOffset* temp = positionoffset_;
  positionoffset_ = NULL;
  return temp;
}
void SignRecognition::set_allocated_positionoffset(::PositionOffset* positionoffset) {
  delete positionoffset_;
  positionoffset_ = positionoffset;
  if (positionoffset) {
    set_has_positionoffset();
  } else {
    clear_has_positionoffset();
  }
  // @@protoc_insertion_point(field_set_allocated:SignRecognition.positionOffset)
}

// required .SignRecognition.RoadSignTypeEnum roadSignType = 3;
bool SignRecognition::has_roadsigntype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SignRecognition::set_has_roadsigntype() {
  _has_bits_[0] |= 0x00000004u;
}
void SignRecognition::clear_has_roadsigntype() {
  _has_bits_[0] &= ~0x00000004u;
}
void SignRecognition::clear_roadsigntype() {
  roadsigntype_ = 1;
  clear_has_roadsigntype();
}
 ::SignRecognition_RoadSignTypeEnum SignRecognition::roadsigntype() const {
  // @@protoc_insertion_point(field_get:SignRecognition.roadSignType)
  return static_cast< ::SignRecognition_RoadSignTypeEnum >(roadsigntype_);
}
 void SignRecognition::set_roadsigntype(::SignRecognition_RoadSignTypeEnum value) {
  assert(::SignRecognition_RoadSignTypeEnum_IsValid(value));
  set_has_roadsigntype();
  roadsigntype_ = value;
  // @@protoc_insertion_point(field_set:SignRecognition.roadSignType)
}

// optional .SignRecognition.RoadSignPermanencyEnum roadSignPermanency = 4;
bool SignRecognition::has_roadsignpermanency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SignRecognition::set_has_roadsignpermanency() {
  _has_bits_[0] |= 0x00000008u;
}
void SignRecognition::clear_has_roadsignpermanency() {
  _has_bits_[0] &= ~0x00000008u;
}
void SignRecognition::clear_roadsignpermanency() {
  roadsignpermanency_ = 1;
  clear_has_roadsignpermanency();
}
 ::SignRecognition_RoadSignPermanencyEnum SignRecognition::roadsignpermanency() const {
  // @@protoc_insertion_point(field_get:SignRecognition.roadSignPermanency)
  return static_cast< ::SignRecognition_RoadSignPermanencyEnum >(roadsignpermanency_);
}
 void SignRecognition::set_roadsignpermanency(::SignRecognition_RoadSignPermanencyEnum value) {
  assert(::SignRecognition_RoadSignPermanencyEnum_IsValid(value));
  set_has_roadsignpermanency();
  roadsignpermanency_ = value;
  // @@protoc_insertion_point(field_set:SignRecognition.roadSignPermanency)
}

// optional string roadSignValue = 5;
bool SignRecognition::has_roadsignvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SignRecognition::set_has_roadsignvalue() {
  _has_bits_[0] |= 0x00000010u;
}
void SignRecognition::clear_has_roadsignvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
void SignRecognition::clear_roadsignvalue() {
  roadsignvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roadsignvalue();
}
 const ::std::string& SignRecognition::roadsignvalue() const {
  // @@protoc_insertion_point(field_get:SignRecognition.roadSignValue)
  return roadsignvalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignRecognition::set_roadsignvalue(const ::std::string& value) {
  set_has_roadsignvalue();
  roadsignvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignRecognition.roadSignValue)
}
 void SignRecognition::set_roadsignvalue(const char* value) {
  set_has_roadsignvalue();
  roadsignvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignRecognition.roadSignValue)
}
 void SignRecognition::set_roadsignvalue(const char* value, size_t size) {
  set_has_roadsignvalue();
  roadsignvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignRecognition.roadSignValue)
}
 ::std::string* SignRecognition::mutable_roadsignvalue() {
  set_has_roadsignvalue();
  // @@protoc_insertion_point(field_mutable:SignRecognition.roadSignValue)
  return roadsignvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SignRecognition::release_roadsignvalue() {
  // @@protoc_insertion_point(field_release:SignRecognition.roadSignValue)
  clear_has_roadsignvalue();
  return roadsignvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignRecognition::set_allocated_roadsignvalue(::std::string* roadsignvalue) {
  if (roadsignvalue != NULL) {
    set_has_roadsignvalue();
  } else {
    clear_has_roadsignvalue();
  }
  roadsignvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roadsignvalue);
  // @@protoc_insertion_point(field_set_allocated:SignRecognition.roadSignValue)
}

// optional .SignRecognition.RoadSignDependenciesEnum roadSignDependencies = 6;
bool SignRecognition::has_roadsigndependencies() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SignRecognition::set_has_roadsigndependencies() {
  _has_bits_[0] |= 0x00000020u;
}
void SignRecognition::clear_has_roadsigndependencies() {
  _has_bits_[0] &= ~0x00000020u;
}
void SignRecognition::clear_roadsigndependencies() {
  roadsigndependencies_ = 1;
  clear_has_roadsigndependencies();
}
 ::SignRecognition_RoadSignDependenciesEnum SignRecognition::roadsigndependencies() const {
  // @@protoc_insertion_point(field_get:SignRecognition.roadSignDependencies)
  return static_cast< ::SignRecognition_RoadSignDependenciesEnum >(roadsigndependencies_);
}
 void SignRecognition::set_roadsigndependencies(::SignRecognition_RoadSignDependenciesEnum value) {
  assert(::SignRecognition_RoadSignDependenciesEnum_IsValid(value));
  set_has_roadsigndependencies();
  roadsigndependencies_ = value;
  // @@protoc_insertion_point(field_set:SignRecognition.roadSignDependencies)
}

// optional .SignRecognition.RoadSignValidityEnum roadSignValidity = 7;
bool SignRecognition::has_roadsignvalidity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SignRecognition::set_has_roadsignvalidity() {
  _has_bits_[0] |= 0x00000040u;
}
void SignRecognition::clear_has_roadsignvalidity() {
  _has_bits_[0] &= ~0x00000040u;
}
void SignRecognition::clear_roadsignvalidity() {
  roadsignvalidity_ = 1;
  clear_has_roadsignvalidity();
}
 ::SignRecognition_RoadSignValidityEnum SignRecognition::roadsignvalidity() const {
  // @@protoc_insertion_point(field_get:SignRecognition.roadSignValidity)
  return static_cast< ::SignRecognition_RoadSignValidityEnum >(roadsignvalidity_);
}
 void SignRecognition::set_roadsignvalidity(::SignRecognition_RoadSignValidityEnum value) {
  assert(::SignRecognition_RoadSignValidityEnum_IsValid(value));
  set_has_roadsignvalidity();
  roadsignvalidity_ = value;
  // @@protoc_insertion_point(field_set:SignRecognition.roadSignValidity)
}

// optional string roadSignValidityValue = 8;
bool SignRecognition::has_roadsignvalidityvalue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SignRecognition::set_has_roadsignvalidityvalue() {
  _has_bits_[0] |= 0x00000080u;
}
void SignRecognition::clear_has_roadsignvalidityvalue() {
  _has_bits_[0] &= ~0x00000080u;
}
void SignRecognition::clear_roadsignvalidityvalue() {
  roadsignvalidityvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roadsignvalidityvalue();
}
 const ::std::string& SignRecognition::roadsignvalidityvalue() const {
  // @@protoc_insertion_point(field_get:SignRecognition.roadSignValidityValue)
  return roadsignvalidityvalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignRecognition::set_roadsignvalidityvalue(const ::std::string& value) {
  set_has_roadsignvalidityvalue();
  roadsignvalidityvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignRecognition.roadSignValidityValue)
}
 void SignRecognition::set_roadsignvalidityvalue(const char* value) {
  set_has_roadsignvalidityvalue();
  roadsignvalidityvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignRecognition.roadSignValidityValue)
}
 void SignRecognition::set_roadsignvalidityvalue(const char* value, size_t size) {
  set_has_roadsignvalidityvalue();
  roadsignvalidityvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignRecognition.roadSignValidityValue)
}
 ::std::string* SignRecognition::mutable_roadsignvalidityvalue() {
  set_has_roadsignvalidityvalue();
  // @@protoc_insertion_point(field_mutable:SignRecognition.roadSignValidityValue)
  return roadsignvalidityvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SignRecognition::release_roadsignvalidityvalue() {
  // @@protoc_insertion_point(field_release:SignRecognition.roadSignValidityValue)
  clear_has_roadsignvalidityvalue();
  return roadsignvalidityvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignRecognition::set_allocated_roadsignvalidityvalue(::std::string* roadsignvalidityvalue) {
  if (roadsignvalidityvalue != NULL) {
    set_has_roadsignvalidityvalue();
  } else {
    clear_has_roadsignvalidityvalue();
  }
  roadsignvalidityvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roadsignvalidityvalue);
  // @@protoc_insertion_point(field_set_allocated:SignRecognition.roadSignValidityValue)
}

// optional .SignRecognition.RoadSignRecognitionTypeEnum roadSignRecognitionType = 9;
bool SignRecognition::has_roadsignrecognitiontype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SignRecognition::set_has_roadsignrecognitiontype() {
  _has_bits_[0] |= 0x00000100u;
}
void SignRecognition::clear_has_roadsignrecognitiontype() {
  _has_bits_[0] &= ~0x00000100u;
}
void SignRecognition::clear_roadsignrecognitiontype() {
  roadsignrecognitiontype_ = 1;
  clear_has_roadsignrecognitiontype();
}
 ::SignRecognition_RoadSignRecognitionTypeEnum SignRecognition::roadsignrecognitiontype() const {
  // @@protoc_insertion_point(field_get:SignRecognition.roadSignRecognitionType)
  return static_cast< ::SignRecognition_RoadSignRecognitionTypeEnum >(roadsignrecognitiontype_);
}
 void SignRecognition::set_roadsignrecognitiontype(::SignRecognition_RoadSignRecognitionTypeEnum value) {
  assert(::SignRecognition_RoadSignRecognitionTypeEnum_IsValid(value));
  set_has_roadsignrecognitiontype();
  roadsignrecognitiontype_ = value;
  // @@protoc_insertion_point(field_set:SignRecognition.roadSignRecognitionType)
}

// optional int64 detectedObjectID = 10;
bool SignRecognition::has_detectedobjectid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SignRecognition::set_has_detectedobjectid() {
  _has_bits_[0] |= 0x00000200u;
}
void SignRecognition::clear_has_detectedobjectid() {
  _has_bits_[0] &= ~0x00000200u;
}
void SignRecognition::clear_detectedobjectid() {
  detectedobjectid_ = GOOGLE_LONGLONG(0);
  clear_has_detectedobjectid();
}
 ::google::protobuf::int64 SignRecognition::detectedobjectid() const {
  // @@protoc_insertion_point(field_get:SignRecognition.detectedObjectID)
  return detectedobjectid_;
}
 void SignRecognition::set_detectedobjectid(::google::protobuf::int64 value) {
  set_has_detectedobjectid();
  detectedobjectid_ = value;
  // @@protoc_insertion_point(field_set:SignRecognition.detectedObjectID)
}

// optional int64 mediaID = 11;
bool SignRecognition::has_mediaid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SignRecognition::set_has_mediaid() {
  _has_bits_[0] |= 0x00000400u;
}
void SignRecognition::clear_has_mediaid() {
  _has_bits_[0] &= ~0x00000400u;
}
void SignRecognition::clear_mediaid() {
  mediaid_ = GOOGLE_LONGLONG(0);
  clear_has_mediaid();
}
 ::google::protobuf::int64 SignRecognition::mediaid() const {
  // @@protoc_insertion_point(field_get:SignRecognition.mediaID)
  return mediaid_;
}
 void SignRecognition::set_mediaid(::google::protobuf::int64 value) {
  set_has_mediaid();
  mediaid_ = value;
  // @@protoc_insertion_point(field_set:SignRecognition.mediaID)
}

// optional uint32 roadSignRecognitionConfidence_percent = 12;
bool SignRecognition::has_roadsignrecognitionconfidence_percent() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SignRecognition::set_has_roadsignrecognitionconfidence_percent() {
  _has_bits_[0] |= 0x00000800u;
}
void SignRecognition::clear_has_roadsignrecognitionconfidence_percent() {
  _has_bits_[0] &= ~0x00000800u;
}
void SignRecognition::clear_roadsignrecognitionconfidence_percent() {
  roadsignrecognitionconfidence_percent_ = 0u;
  clear_has_roadsignrecognitionconfidence_percent();
}
 ::google::protobuf::uint32 SignRecognition::roadsignrecognitionconfidence_percent() const {
  // @@protoc_insertion_point(field_get:SignRecognition.roadSignRecognitionConfidence_percent)
  return roadsignrecognitionconfidence_percent_;
}
 void SignRecognition::set_roadsignrecognitionconfidence_percent(::google::protobuf::uint32 value) {
  set_has_roadsignrecognitionconfidence_percent();
  roadsignrecognitionconfidence_percent_ = value;
  // @@protoc_insertion_point(field_set:SignRecognition.roadSignRecognitionConfidence_percent)
}

// repeated .RoadSignRestriction roadSignRestrictions = 1001;
int SignRecognition::roadsignrestrictions_size() const {
  return roadsignrestrictions_.size();
}
void SignRecognition::clear_roadsignrestrictions() {
  roadsignrestrictions_.Clear();
}
const ::RoadSignRestriction& SignRecognition::roadsignrestrictions(int index) const {
  // @@protoc_insertion_point(field_get:SignRecognition.roadSignRestrictions)
  return roadsignrestrictions_.Get(index);
}
::RoadSignRestriction* SignRecognition::mutable_roadsignrestrictions(int index) {
  // @@protoc_insertion_point(field_mutable:SignRecognition.roadSignRestrictions)
  return roadsignrestrictions_.Mutable(index);
}
::RoadSignRestriction* SignRecognition::add_roadsignrestrictions() {
  // @@protoc_insertion_point(field_add:SignRecognition.roadSignRestrictions)
  return roadsignrestrictions_.Add();
}
::google::protobuf::RepeatedPtrField< ::RoadSignRestriction >*
SignRecognition::mutable_roadsignrestrictions() {
  // @@protoc_insertion_point(field_mutable_list:SignRecognition.roadSignRestrictions)
  return &roadsignrestrictions_;
}
const ::google::protobuf::RepeatedPtrField< ::RoadSignRestriction >&
SignRecognition::roadsignrestrictions() const {
  // @@protoc_insertion_point(field_list:SignRecognition.roadSignRestrictions)
  return roadsignrestrictions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LinePoint_LinePointTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinePoint_LinePointTypeEnum_descriptor_;
}
bool LinePoint_LinePointTypeEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LinePoint_LinePointTypeEnum LinePoint::START;
const LinePoint_LinePointTypeEnum LinePoint::END;
const LinePoint_LinePointTypeEnum LinePoint::MIDDLE;
const LinePoint_LinePointTypeEnum LinePoint::LinePointTypeEnum_MIN;
const LinePoint_LinePointTypeEnum LinePoint::LinePointTypeEnum_MAX;
const int LinePoint::LinePointTypeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinePoint::kPositionOffsetFieldNumber;
const int LinePoint::kLinePointTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinePoint::LinePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinePoint)
}

void LinePoint::InitAsDefaultInstance() {
  positionoffset_ = const_cast< ::PositionOffset*>(&::PositionOffset::default_instance());
}

LinePoint::LinePoint(const LinePoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinePoint)
}

void LinePoint::SharedCtor() {
  _cached_size_ = 0;
  positionoffset_ = NULL;
  linepointtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinePoint::~LinePoint() {
  // @@protoc_insertion_point(destructor:LinePoint)
  SharedDtor();
}

void LinePoint::SharedDtor() {
  if (this != default_instance_) {
    delete positionoffset_;
  }
}

void LinePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinePoint_descriptor_;
}

const LinePoint& LinePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

LinePoint* LinePoint::default_instance_ = NULL;

LinePoint* LinePoint::New(::google::protobuf::Arena* arena) const {
  LinePoint* n = new LinePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:LinePoint)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_positionoffset()) {
      if (positionoffset_ != NULL) positionoffset_->::PositionOffset::Clear();
    }
    linepointtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LinePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PositionOffset positionOffset = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionoffset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_linePointType;
        break;
      }

      // optional .LinePoint.LinePointTypeEnum linePointType = 2;
      case 2: {
        if (tag == 16) {
         parse_linePointType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LinePoint_LinePointTypeEnum_IsValid(value)) {
            set_linepointtype(static_cast< ::LinePoint_LinePointTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinePoint)
  return false;
#undef DO_
}

void LinePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinePoint)
  // required .PositionOffset positionOffset = 1;
  if (has_positionoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->positionoffset_, output);
  }

  // optional .LinePoint.LinePointTypeEnum linePointType = 2;
  if (has_linepointtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->linepointtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinePoint)
}

::google::protobuf::uint8* LinePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinePoint)
  // required .PositionOffset positionOffset = 1;
  if (has_positionoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->positionoffset_, false, target);
  }

  // optional .LinePoint.LinePointTypeEnum linePointType = 2;
  if (has_linepointtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->linepointtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinePoint)
  return target;
}

int LinePoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LinePoint)
  int total_size = 0;

  // required .PositionOffset positionOffset = 1;
  if (has_positionoffset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->positionoffset_);
  }
  // optional .LinePoint.LinePointTypeEnum linePointType = 2;
  if (has_linepointtype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->linepointtype());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LinePoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LinePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinePoint)
    MergeFrom(*source);
  }
}

void LinePoint::MergeFrom(const LinePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_positionoffset()) {
      mutable_positionoffset()->::PositionOffset::MergeFrom(from.positionoffset());
    }
    if (from.has_linepointtype()) {
      set_linepointtype(from.linepointtype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LinePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinePoint::CopyFrom(const LinePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinePoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LinePoint::Swap(LinePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinePoint::InternalSwap(LinePoint* other) {
  std::swap(positionoffset_, other->positionoffset_);
  std::swap(linepointtype_, other->linepointtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinePoint_descriptor_;
  metadata.reflection = LinePoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinePoint

// required .PositionOffset positionOffset = 1;
bool LinePoint::has_positionoffset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LinePoint::set_has_positionoffset() {
  _has_bits_[0] |= 0x00000001u;
}
void LinePoint::clear_has_positionoffset() {
  _has_bits_[0] &= ~0x00000001u;
}
void LinePoint::clear_positionoffset() {
  if (positionoffset_ != NULL) positionoffset_->::PositionOffset::Clear();
  clear_has_positionoffset();
}
const ::PositionOffset& LinePoint::positionoffset() const {
  // @@protoc_insertion_point(field_get:LinePoint.positionOffset)
  return positionoffset_ != NULL ? *positionoffset_ : *default_instance_->positionoffset_;
}
::PositionOffset* LinePoint::mutable_positionoffset() {
  set_has_positionoffset();
  if (positionoffset_ == NULL) {
    positionoffset_ = new ::PositionOffset;
  }
  // @@protoc_insertion_point(field_mutable:LinePoint.positionOffset)
  return positionoffset_;
}
::PositionOffset* LinePoint::release_positionoffset() {
  // @@protoc_insertion_point(field_release:LinePoint.positionOffset)
  clear_has_positionoffset();
  ::PositionOffset* temp = positionoffset_;
  positionoffset_ = NULL;
  return temp;
}
void LinePoint::set_allocated_positionoffset(::PositionOffset* positionoffset) {
  delete positionoffset_;
  positionoffset_ = positionoffset;
  if (positionoffset) {
    set_has_positionoffset();
  } else {
    clear_has_positionoffset();
  }
  // @@protoc_insertion_point(field_set_allocated:LinePoint.positionOffset)
}

// optional .LinePoint.LinePointTypeEnum linePointType = 2;
bool LinePoint::has_linepointtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LinePoint::set_has_linepointtype() {
  _has_bits_[0] |= 0x00000002u;
}
void LinePoint::clear_has_linepointtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void LinePoint::clear_linepointtype() {
  linepointtype_ = 1;
  clear_has_linepointtype();
}
 ::LinePoint_LinePointTypeEnum LinePoint::linepointtype() const {
  // @@protoc_insertion_point(field_get:LinePoint.linePointType)
  return static_cast< ::LinePoint_LinePointTypeEnum >(linepointtype_);
}
 void LinePoint::set_linepointtype(::LinePoint_LinePointTypeEnum value) {
  assert(::LinePoint_LinePointTypeEnum_IsValid(value));
  set_has_linepointtype();
  linepointtype_ = value;
  // @@protoc_insertion_point(field_set:LinePoint.linePointType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LaneBoundaryRecognition_LaneBoundaryTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneBoundaryRecognition_LaneBoundaryTypeEnum_descriptor_;
}
bool LaneBoundaryRecognition_LaneBoundaryTypeEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::SINGLE_SOLID_PAINT;
const LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::DOUBLE_SOLID_PAINT;
const LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::LONG_DASHED_PAINT;
const LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::SHORT_DASHED_PAINT;
const LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::SHADED_AREA_PAINT;
const LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::DASHED_BLOCKS;
const LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::DOUBLE_LINE_DASHED_SOLID_PAINT;
const LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::DOUBLE_LINE_SOLID_DASHED_PAINT;
const LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::PHYSICAL_DIVIDER;
const LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::DOUBLE_DASHED_LINES;
const LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::LaneBoundaryTypeEnum_MIN;
const LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::LaneBoundaryTypeEnum_MAX;
const int LaneBoundaryRecognition::LaneBoundaryTypeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneBoundaryRecognition_LaneBoundaryColorEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneBoundaryRecognition_LaneBoundaryColorEnum_descriptor_;
}
bool LaneBoundaryRecognition_LaneBoundaryColorEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundaryRecognition_LaneBoundaryColorEnum LaneBoundaryRecognition::WHITE;
const LaneBoundaryRecognition_LaneBoundaryColorEnum LaneBoundaryRecognition::YELLOW;
const LaneBoundaryRecognition_LaneBoundaryColorEnum LaneBoundaryRecognition::BLUE;
const LaneBoundaryRecognition_LaneBoundaryColorEnum LaneBoundaryRecognition::LaneBoundaryColorEnum_MIN;
const LaneBoundaryRecognition_LaneBoundaryColorEnum LaneBoundaryRecognition::LaneBoundaryColorEnum_MAX;
const int LaneBoundaryRecognition::LaneBoundaryColorEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundaryRecognition::kTimeStampUTCMsFieldNumber;
const int LaneBoundaryRecognition::kPositionOffsetFieldNumber;
const int LaneBoundaryRecognition::kLaneBoundaryTypeFieldNumber;
const int LaneBoundaryRecognition::kLaneBoundaryColorFieldNumber;
const int LaneBoundaryRecognition::kCurvature1PmFieldNumber;
const int LaneBoundaryRecognition::kLaneMarkerWidthMmFieldNumber;
const int LaneBoundaryRecognition::kLaneMarkerWidthAccuracyMmFieldNumber;
const int LaneBoundaryRecognition::kLaneDeclinationDegFieldNumber;
const int LaneBoundaryRecognition::kLaneDeclinationAccuracyDegFieldNumber;
const int LaneBoundaryRecognition::kLaneBoundaryTypeConfidencePercentFieldNumber;
const int LaneBoundaryRecognition::kLinePointFieldNumber;
const int LaneBoundaryRecognition::kLMOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundaryRecognition::LaneBoundaryRecognition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LaneBoundaryRecognition)
}

void LaneBoundaryRecognition::InitAsDefaultInstance() {
  positionoffset_ = const_cast< ::PositionOffset*>(&::PositionOffset::default_instance());
  lm_orientation_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
}

LaneBoundaryRecognition::LaneBoundaryRecognition(const LaneBoundaryRecognition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LaneBoundaryRecognition)
}

void LaneBoundaryRecognition::SharedCtor() {
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  positionoffset_ = NULL;
  laneboundarytype_ = 1;
  laneboundarycolor_ = 1;
  curvature_1pm_ = 0;
  lanemarkerwidth_mm_ = 0;
  lanemarkerwidthaccuracy_mm_ = 0;
  lanedeclination_deg_ = 0;
  lanedeclinationaccuracy_deg_ = 0;
  laneboundarytypeconfidence_percent_ = 0;
  lm_orientation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneBoundaryRecognition::~LaneBoundaryRecognition() {
  // @@protoc_insertion_point(destructor:LaneBoundaryRecognition)
  SharedDtor();
}

void LaneBoundaryRecognition::SharedDtor() {
  if (this != default_instance_) {
    delete positionoffset_;
    delete lm_orientation_;
  }
}

void LaneBoundaryRecognition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneBoundaryRecognition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneBoundaryRecognition_descriptor_;
}

const LaneBoundaryRecognition& LaneBoundaryRecognition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

LaneBoundaryRecognition* LaneBoundaryRecognition::default_instance_ = NULL;

LaneBoundaryRecognition* LaneBoundaryRecognition::New(::google::protobuf::Arena* arena) const {
  LaneBoundaryRecognition* n = new LaneBoundaryRecognition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneBoundaryRecognition::Clear() {
// @@protoc_insertion_point(message_clear_start:LaneBoundaryRecognition)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LaneBoundaryRecognition, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LaneBoundaryRecognition*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(curvature_1pm_, lanedeclination_deg_);
    timestamputc_ms_ = GOOGLE_LONGLONG(0);
    if (has_positionoffset()) {
      if (positionoffset_ != NULL) positionoffset_->::PositionOffset::Clear();
    }
    laneboundarytype_ = 1;
    laneboundarycolor_ = 1;
  }
  if (_has_bits_[8 / 32] & 2816u) {
    lanedeclinationaccuracy_deg_ = 0;
    laneboundarytypeconfidence_percent_ = 0;
    if (has_lm_orientation()) {
      if (lm_orientation_ != NULL) lm_orientation_->::Vector3D::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  linepoint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LaneBoundaryRecognition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LaneBoundaryRecognition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_positionOffset;
        break;
      }

      // required .PositionOffset positionOffset = 2;
      case 2: {
        if (tag == 18) {
         parse_positionOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionoffset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_laneBoundaryType;
        break;
      }

      // optional .LaneBoundaryRecognition.LaneBoundaryTypeEnum laneBoundaryType = 3;
      case 3: {
        if (tag == 24) {
         parse_laneBoundaryType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LaneBoundaryRecognition_LaneBoundaryTypeEnum_IsValid(value)) {
            set_laneboundarytype(static_cast< ::LaneBoundaryRecognition_LaneBoundaryTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_laneBoundaryColor;
        break;
      }

      // optional .LaneBoundaryRecognition.LaneBoundaryColorEnum laneBoundaryColor = 4;
      case 4: {
        if (tag == 32) {
         parse_laneBoundaryColor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LaneBoundaryRecognition_LaneBoundaryColorEnum_IsValid(value)) {
            set_laneboundarycolor(static_cast< ::LaneBoundaryRecognition_LaneBoundaryColorEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_curvature_1pm;
        break;
      }

      // optional double curvature_1pm = 5;
      case 5: {
        if (tag == 41) {
         parse_curvature_1pm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_1pm_)));
          set_has_curvature_1pm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_laneMarkerWidth_mm;
        break;
      }

      // optional int32 laneMarkerWidth_mm = 6;
      case 6: {
        if (tag == 48) {
         parse_laneMarkerWidth_mm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lanemarkerwidth_mm_)));
          set_has_lanemarkerwidth_mm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_laneMarkerWidthAccuracy_mm;
        break;
      }

      // optional int32 laneMarkerWidthAccuracy_mm = 7;
      case 7: {
        if (tag == 56) {
         parse_laneMarkerWidthAccuracy_mm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lanemarkerwidthaccuracy_mm_)));
          set_has_lanemarkerwidthaccuracy_mm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_laneDeclination_deg;
        break;
      }

      // optional double laneDeclination_deg = 8;
      case 8: {
        if (tag == 65) {
         parse_laneDeclination_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lanedeclination_deg_)));
          set_has_lanedeclination_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_laneDeclinationAccuracy_deg;
        break;
      }

      // optional double laneDeclinationAccuracy_deg = 9;
      case 9: {
        if (tag == 73) {
         parse_laneDeclinationAccuracy_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lanedeclinationaccuracy_deg_)));
          set_has_lanedeclinationaccuracy_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_laneBoundaryTypeConfidence_percent;
        break;
      }

      // optional int32 laneBoundaryTypeConfidence_percent = 10;
      case 10: {
        if (tag == 80) {
         parse_laneBoundaryTypeConfidence_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laneboundarytypeconfidence_percent_)));
          set_has_laneboundarytypeconfidence_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_linePoint;
        break;
      }

      // repeated .LinePoint linePoint = 1000;
      case 1000: {
        if (tag == 8002) {
         parse_linePoint:
          DO_(input->IncrementRecursionDepth());
         parse_loop_linePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_linepoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_loop_linePoint;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(8010)) goto parse_LM_Orientation;
        break;
      }

      // optional .Vector3D LM_Orientation = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_LM_Orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lm_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LaneBoundaryRecognition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LaneBoundaryRecognition)
  return false;
#undef DO_
}

void LaneBoundaryRecognition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LaneBoundaryRecognition)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // required .PositionOffset positionOffset = 2;
  if (has_positionoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->positionoffset_, output);
  }

  // optional .LaneBoundaryRecognition.LaneBoundaryTypeEnum laneBoundaryType = 3;
  if (has_laneboundarytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->laneboundarytype(), output);
  }

  // optional .LaneBoundaryRecognition.LaneBoundaryColorEnum laneBoundaryColor = 4;
  if (has_laneboundarycolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->laneboundarycolor(), output);
  }

  // optional double curvature_1pm = 5;
  if (has_curvature_1pm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->curvature_1pm(), output);
  }

  // optional int32 laneMarkerWidth_mm = 6;
  if (has_lanemarkerwidth_mm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lanemarkerwidth_mm(), output);
  }

  // optional int32 laneMarkerWidthAccuracy_mm = 7;
  if (has_lanemarkerwidthaccuracy_mm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lanemarkerwidthaccuracy_mm(), output);
  }

  // optional double laneDeclination_deg = 8;
  if (has_lanedeclination_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lanedeclination_deg(), output);
  }

  // optional double laneDeclinationAccuracy_deg = 9;
  if (has_lanedeclinationaccuracy_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->lanedeclinationaccuracy_deg(), output);
  }

  // optional int32 laneBoundaryTypeConfidence_percent = 10;
  if (has_laneboundarytypeconfidence_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->laneboundarytypeconfidence_percent(), output);
  }

  // repeated .LinePoint linePoint = 1000;
  for (unsigned int i = 0, n = this->linepoint_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->linepoint(i), output);
  }

  // optional .Vector3D LM_Orientation = 1001;
  if (has_lm_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, *this->lm_orientation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LaneBoundaryRecognition)
}

::google::protobuf::uint8* LaneBoundaryRecognition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LaneBoundaryRecognition)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // required .PositionOffset positionOffset = 2;
  if (has_positionoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->positionoffset_, false, target);
  }

  // optional .LaneBoundaryRecognition.LaneBoundaryTypeEnum laneBoundaryType = 3;
  if (has_laneboundarytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->laneboundarytype(), target);
  }

  // optional .LaneBoundaryRecognition.LaneBoundaryColorEnum laneBoundaryColor = 4;
  if (has_laneboundarycolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->laneboundarycolor(), target);
  }

  // optional double curvature_1pm = 5;
  if (has_curvature_1pm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->curvature_1pm(), target);
  }

  // optional int32 laneMarkerWidth_mm = 6;
  if (has_lanemarkerwidth_mm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lanemarkerwidth_mm(), target);
  }

  // optional int32 laneMarkerWidthAccuracy_mm = 7;
  if (has_lanemarkerwidthaccuracy_mm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lanemarkerwidthaccuracy_mm(), target);
  }

  // optional double laneDeclination_deg = 8;
  if (has_lanedeclination_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lanedeclination_deg(), target);
  }

  // optional double laneDeclinationAccuracy_deg = 9;
  if (has_lanedeclinationaccuracy_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->lanedeclinationaccuracy_deg(), target);
  }

  // optional int32 laneBoundaryTypeConfidence_percent = 10;
  if (has_laneboundarytypeconfidence_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->laneboundarytypeconfidence_percent(), target);
  }

  // repeated .LinePoint linePoint = 1000;
  for (unsigned int i = 0, n = this->linepoint_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1000, this->linepoint(i), false, target);
  }

  // optional .Vector3D LM_Orientation = 1001;
  if (has_lm_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1001, *this->lm_orientation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LaneBoundaryRecognition)
  return target;
}

int LaneBoundaryRecognition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LaneBoundaryRecognition)
  int total_size = 0;

  if (has_timestamputc_ms()) {
    // required int64 timeStampUTC_ms = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }

  if (has_positionoffset()) {
    // required .PositionOffset positionOffset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->positionoffset_);
  }

  return total_size;
}
int LaneBoundaryRecognition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LaneBoundaryRecognition)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 timeStampUTC_ms = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());

    // required .PositionOffset positionOffset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->positionoffset_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional .LaneBoundaryRecognition.LaneBoundaryTypeEnum laneBoundaryType = 3;
    if (has_laneboundarytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->laneboundarytype());
    }

    // optional .LaneBoundaryRecognition.LaneBoundaryColorEnum laneBoundaryColor = 4;
    if (has_laneboundarycolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->laneboundarycolor());
    }

    // optional double curvature_1pm = 5;
    if (has_curvature_1pm()) {
      total_size += 1 + 8;
    }

    // optional int32 laneMarkerWidth_mm = 6;
    if (has_lanemarkerwidth_mm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lanemarkerwidth_mm());
    }

    // optional int32 laneMarkerWidthAccuracy_mm = 7;
    if (has_lanemarkerwidthaccuracy_mm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lanemarkerwidthaccuracy_mm());
    }

    // optional double laneDeclination_deg = 8;
    if (has_lanedeclination_deg()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 2816u) {
    // optional double laneDeclinationAccuracy_deg = 9;
    if (has_lanedeclinationaccuracy_deg()) {
      total_size += 1 + 8;
    }

    // optional int32 laneBoundaryTypeConfidence_percent = 10;
    if (has_laneboundarytypeconfidence_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laneboundarytypeconfidence_percent());
    }

    // optional .Vector3D LM_Orientation = 1001;
    if (has_lm_orientation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lm_orientation_);
    }

  }
  // repeated .LinePoint linePoint = 1000;
  total_size += 2 * this->linepoint_size();
  for (int i = 0; i < this->linepoint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->linepoint(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneBoundaryRecognition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LaneBoundaryRecognition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LaneBoundaryRecognition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundaryRecognition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LaneBoundaryRecognition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LaneBoundaryRecognition)
    MergeFrom(*source);
  }
}

void LaneBoundaryRecognition::MergeFrom(const LaneBoundaryRecognition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LaneBoundaryRecognition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  linepoint_.MergeFrom(from.linepoint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
    if (from.has_positionoffset()) {
      mutable_positionoffset()->::PositionOffset::MergeFrom(from.positionoffset());
    }
    if (from.has_laneboundarytype()) {
      set_laneboundarytype(from.laneboundarytype());
    }
    if (from.has_laneboundarycolor()) {
      set_laneboundarycolor(from.laneboundarycolor());
    }
    if (from.has_curvature_1pm()) {
      set_curvature_1pm(from.curvature_1pm());
    }
    if (from.has_lanemarkerwidth_mm()) {
      set_lanemarkerwidth_mm(from.lanemarkerwidth_mm());
    }
    if (from.has_lanemarkerwidthaccuracy_mm()) {
      set_lanemarkerwidthaccuracy_mm(from.lanemarkerwidthaccuracy_mm());
    }
    if (from.has_lanedeclination_deg()) {
      set_lanedeclination_deg(from.lanedeclination_deg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lanedeclinationaccuracy_deg()) {
      set_lanedeclinationaccuracy_deg(from.lanedeclinationaccuracy_deg());
    }
    if (from.has_laneboundarytypeconfidence_percent()) {
      set_laneboundarytypeconfidence_percent(from.laneboundarytypeconfidence_percent());
    }
    if (from.has_lm_orientation()) {
      mutable_lm_orientation()->::Vector3D::MergeFrom(from.lm_orientation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LaneBoundaryRecognition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LaneBoundaryRecognition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundaryRecognition::CopyFrom(const LaneBoundaryRecognition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LaneBoundaryRecognition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundaryRecognition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->linepoint())) return false;
  if (has_lm_orientation()) {
    if (!this->lm_orientation_->IsInitialized()) return false;
  }
  return true;
}

void LaneBoundaryRecognition::Swap(LaneBoundaryRecognition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneBoundaryRecognition::InternalSwap(LaneBoundaryRecognition* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  std::swap(positionoffset_, other->positionoffset_);
  std::swap(laneboundarytype_, other->laneboundarytype_);
  std::swap(laneboundarycolor_, other->laneboundarycolor_);
  std::swap(curvature_1pm_, other->curvature_1pm_);
  std::swap(lanemarkerwidth_mm_, other->lanemarkerwidth_mm_);
  std::swap(lanemarkerwidthaccuracy_mm_, other->lanemarkerwidthaccuracy_mm_);
  std::swap(lanedeclination_deg_, other->lanedeclination_deg_);
  std::swap(lanedeclinationaccuracy_deg_, other->lanedeclinationaccuracy_deg_);
  std::swap(laneboundarytypeconfidence_percent_, other->laneboundarytypeconfidence_percent_);
  linepoint_.UnsafeArenaSwap(&other->linepoint_);
  std::swap(lm_orientation_, other->lm_orientation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneBoundaryRecognition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneBoundaryRecognition_descriptor_;
  metadata.reflection = LaneBoundaryRecognition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneBoundaryRecognition

// required int64 timeStampUTC_ms = 1;
bool LaneBoundaryRecognition::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneBoundaryRecognition::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneBoundaryRecognition::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneBoundaryRecognition::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 LaneBoundaryRecognition::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:LaneBoundaryRecognition.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void LaneBoundaryRecognition::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:LaneBoundaryRecognition.timeStampUTC_ms)
}

// required .PositionOffset positionOffset = 2;
bool LaneBoundaryRecognition::has_positionoffset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneBoundaryRecognition::set_has_positionoffset() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneBoundaryRecognition::clear_has_positionoffset() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneBoundaryRecognition::clear_positionoffset() {
  if (positionoffset_ != NULL) positionoffset_->::PositionOffset::Clear();
  clear_has_positionoffset();
}
const ::PositionOffset& LaneBoundaryRecognition::positionoffset() const {
  // @@protoc_insertion_point(field_get:LaneBoundaryRecognition.positionOffset)
  return positionoffset_ != NULL ? *positionoffset_ : *default_instance_->positionoffset_;
}
::PositionOffset* LaneBoundaryRecognition::mutable_positionoffset() {
  set_has_positionoffset();
  if (positionoffset_ == NULL) {
    positionoffset_ = new ::PositionOffset;
  }
  // @@protoc_insertion_point(field_mutable:LaneBoundaryRecognition.positionOffset)
  return positionoffset_;
}
::PositionOffset* LaneBoundaryRecognition::release_positionoffset() {
  // @@protoc_insertion_point(field_release:LaneBoundaryRecognition.positionOffset)
  clear_has_positionoffset();
  ::PositionOffset* temp = positionoffset_;
  positionoffset_ = NULL;
  return temp;
}
void LaneBoundaryRecognition::set_allocated_positionoffset(::PositionOffset* positionoffset) {
  delete positionoffset_;
  positionoffset_ = positionoffset;
  if (positionoffset) {
    set_has_positionoffset();
  } else {
    clear_has_positionoffset();
  }
  // @@protoc_insertion_point(field_set_allocated:LaneBoundaryRecognition.positionOffset)
}

// optional .LaneBoundaryRecognition.LaneBoundaryTypeEnum laneBoundaryType = 3;
bool LaneBoundaryRecognition::has_laneboundarytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneBoundaryRecognition::set_has_laneboundarytype() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneBoundaryRecognition::clear_has_laneboundarytype() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneBoundaryRecognition::clear_laneboundarytype() {
  laneboundarytype_ = 1;
  clear_has_laneboundarytype();
}
 ::LaneBoundaryRecognition_LaneBoundaryTypeEnum LaneBoundaryRecognition::laneboundarytype() const {
  // @@protoc_insertion_point(field_get:LaneBoundaryRecognition.laneBoundaryType)
  return static_cast< ::LaneBoundaryRecognition_LaneBoundaryTypeEnum >(laneboundarytype_);
}
 void LaneBoundaryRecognition::set_laneboundarytype(::LaneBoundaryRecognition_LaneBoundaryTypeEnum value) {
  assert(::LaneBoundaryRecognition_LaneBoundaryTypeEnum_IsValid(value));
  set_has_laneboundarytype();
  laneboundarytype_ = value;
  // @@protoc_insertion_point(field_set:LaneBoundaryRecognition.laneBoundaryType)
}

// optional .LaneBoundaryRecognition.LaneBoundaryColorEnum laneBoundaryColor = 4;
bool LaneBoundaryRecognition::has_laneboundarycolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneBoundaryRecognition::set_has_laneboundarycolor() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneBoundaryRecognition::clear_has_laneboundarycolor() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneBoundaryRecognition::clear_laneboundarycolor() {
  laneboundarycolor_ = 1;
  clear_has_laneboundarycolor();
}
 ::LaneBoundaryRecognition_LaneBoundaryColorEnum LaneBoundaryRecognition::laneboundarycolor() const {
  // @@protoc_insertion_point(field_get:LaneBoundaryRecognition.laneBoundaryColor)
  return static_cast< ::LaneBoundaryRecognition_LaneBoundaryColorEnum >(laneboundarycolor_);
}
 void LaneBoundaryRecognition::set_laneboundarycolor(::LaneBoundaryRecognition_LaneBoundaryColorEnum value) {
  assert(::LaneBoundaryRecognition_LaneBoundaryColorEnum_IsValid(value));
  set_has_laneboundarycolor();
  laneboundarycolor_ = value;
  // @@protoc_insertion_point(field_set:LaneBoundaryRecognition.laneBoundaryColor)
}

// optional double curvature_1pm = 5;
bool LaneBoundaryRecognition::has_curvature_1pm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LaneBoundaryRecognition::set_has_curvature_1pm() {
  _has_bits_[0] |= 0x00000010u;
}
void LaneBoundaryRecognition::clear_has_curvature_1pm() {
  _has_bits_[0] &= ~0x00000010u;
}
void LaneBoundaryRecognition::clear_curvature_1pm() {
  curvature_1pm_ = 0;
  clear_has_curvature_1pm();
}
 double LaneBoundaryRecognition::curvature_1pm() const {
  // @@protoc_insertion_point(field_get:LaneBoundaryRecognition.curvature_1pm)
  return curvature_1pm_;
}
 void LaneBoundaryRecognition::set_curvature_1pm(double value) {
  set_has_curvature_1pm();
  curvature_1pm_ = value;
  // @@protoc_insertion_point(field_set:LaneBoundaryRecognition.curvature_1pm)
}

// optional int32 laneMarkerWidth_mm = 6;
bool LaneBoundaryRecognition::has_lanemarkerwidth_mm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LaneBoundaryRecognition::set_has_lanemarkerwidth_mm() {
  _has_bits_[0] |= 0x00000020u;
}
void LaneBoundaryRecognition::clear_has_lanemarkerwidth_mm() {
  _has_bits_[0] &= ~0x00000020u;
}
void LaneBoundaryRecognition::clear_lanemarkerwidth_mm() {
  lanemarkerwidth_mm_ = 0;
  clear_has_lanemarkerwidth_mm();
}
 ::google::protobuf::int32 LaneBoundaryRecognition::lanemarkerwidth_mm() const {
  // @@protoc_insertion_point(field_get:LaneBoundaryRecognition.laneMarkerWidth_mm)
  return lanemarkerwidth_mm_;
}
 void LaneBoundaryRecognition::set_lanemarkerwidth_mm(::google::protobuf::int32 value) {
  set_has_lanemarkerwidth_mm();
  lanemarkerwidth_mm_ = value;
  // @@protoc_insertion_point(field_set:LaneBoundaryRecognition.laneMarkerWidth_mm)
}

// optional int32 laneMarkerWidthAccuracy_mm = 7;
bool LaneBoundaryRecognition::has_lanemarkerwidthaccuracy_mm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LaneBoundaryRecognition::set_has_lanemarkerwidthaccuracy_mm() {
  _has_bits_[0] |= 0x00000040u;
}
void LaneBoundaryRecognition::clear_has_lanemarkerwidthaccuracy_mm() {
  _has_bits_[0] &= ~0x00000040u;
}
void LaneBoundaryRecognition::clear_lanemarkerwidthaccuracy_mm() {
  lanemarkerwidthaccuracy_mm_ = 0;
  clear_has_lanemarkerwidthaccuracy_mm();
}
 ::google::protobuf::int32 LaneBoundaryRecognition::lanemarkerwidthaccuracy_mm() const {
  // @@protoc_insertion_point(field_get:LaneBoundaryRecognition.laneMarkerWidthAccuracy_mm)
  return lanemarkerwidthaccuracy_mm_;
}
 void LaneBoundaryRecognition::set_lanemarkerwidthaccuracy_mm(::google::protobuf::int32 value) {
  set_has_lanemarkerwidthaccuracy_mm();
  lanemarkerwidthaccuracy_mm_ = value;
  // @@protoc_insertion_point(field_set:LaneBoundaryRecognition.laneMarkerWidthAccuracy_mm)
}

// optional double laneDeclination_deg = 8;
bool LaneBoundaryRecognition::has_lanedeclination_deg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LaneBoundaryRecognition::set_has_lanedeclination_deg() {
  _has_bits_[0] |= 0x00000080u;
}
void LaneBoundaryRecognition::clear_has_lanedeclination_deg() {
  _has_bits_[0] &= ~0x00000080u;
}
void LaneBoundaryRecognition::clear_lanedeclination_deg() {
  lanedeclination_deg_ = 0;
  clear_has_lanedeclination_deg();
}
 double LaneBoundaryRecognition::lanedeclination_deg() const {
  // @@protoc_insertion_point(field_get:LaneBoundaryRecognition.laneDeclination_deg)
  return lanedeclination_deg_;
}
 void LaneBoundaryRecognition::set_lanedeclination_deg(double value) {
  set_has_lanedeclination_deg();
  lanedeclination_deg_ = value;
  // @@protoc_insertion_point(field_set:LaneBoundaryRecognition.laneDeclination_deg)
}

// optional double laneDeclinationAccuracy_deg = 9;
bool LaneBoundaryRecognition::has_lanedeclinationaccuracy_deg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LaneBoundaryRecognition::set_has_lanedeclinationaccuracy_deg() {
  _has_bits_[0] |= 0x00000100u;
}
void LaneBoundaryRecognition::clear_has_lanedeclinationaccuracy_deg() {
  _has_bits_[0] &= ~0x00000100u;
}
void LaneBoundaryRecognition::clear_lanedeclinationaccuracy_deg() {
  lanedeclinationaccuracy_deg_ = 0;
  clear_has_lanedeclinationaccuracy_deg();
}
 double LaneBoundaryRecognition::lanedeclinationaccuracy_deg() const {
  // @@protoc_insertion_point(field_get:LaneBoundaryRecognition.laneDeclinationAccuracy_deg)
  return lanedeclinationaccuracy_deg_;
}
 void LaneBoundaryRecognition::set_lanedeclinationaccuracy_deg(double value) {
  set_has_lanedeclinationaccuracy_deg();
  lanedeclinationaccuracy_deg_ = value;
  // @@protoc_insertion_point(field_set:LaneBoundaryRecognition.laneDeclinationAccuracy_deg)
}

// optional int32 laneBoundaryTypeConfidence_percent = 10;
bool LaneBoundaryRecognition::has_laneboundarytypeconfidence_percent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LaneBoundaryRecognition::set_has_laneboundarytypeconfidence_percent() {
  _has_bits_[0] |= 0x00000200u;
}
void LaneBoundaryRecognition::clear_has_laneboundarytypeconfidence_percent() {
  _has_bits_[0] &= ~0x00000200u;
}
void LaneBoundaryRecognition::clear_laneboundarytypeconfidence_percent() {
  laneboundarytypeconfidence_percent_ = 0;
  clear_has_laneboundarytypeconfidence_percent();
}
 ::google::protobuf::int32 LaneBoundaryRecognition::laneboundarytypeconfidence_percent() const {
  // @@protoc_insertion_point(field_get:LaneBoundaryRecognition.laneBoundaryTypeConfidence_percent)
  return laneboundarytypeconfidence_percent_;
}
 void LaneBoundaryRecognition::set_laneboundarytypeconfidence_percent(::google::protobuf::int32 value) {
  set_has_laneboundarytypeconfidence_percent();
  laneboundarytypeconfidence_percent_ = value;
  // @@protoc_insertion_point(field_set:LaneBoundaryRecognition.laneBoundaryTypeConfidence_percent)
}

// repeated .LinePoint linePoint = 1000;
int LaneBoundaryRecognition::linepoint_size() const {
  return linepoint_.size();
}
void LaneBoundaryRecognition::clear_linepoint() {
  linepoint_.Clear();
}
const ::LinePoint& LaneBoundaryRecognition::linepoint(int index) const {
  // @@protoc_insertion_point(field_get:LaneBoundaryRecognition.linePoint)
  return linepoint_.Get(index);
}
::LinePoint* LaneBoundaryRecognition::mutable_linepoint(int index) {
  // @@protoc_insertion_point(field_mutable:LaneBoundaryRecognition.linePoint)
  return linepoint_.Mutable(index);
}
::LinePoint* LaneBoundaryRecognition::add_linepoint() {
  // @@protoc_insertion_point(field_add:LaneBoundaryRecognition.linePoint)
  return linepoint_.Add();
}
::google::protobuf::RepeatedPtrField< ::LinePoint >*
LaneBoundaryRecognition::mutable_linepoint() {
  // @@protoc_insertion_point(field_mutable_list:LaneBoundaryRecognition.linePoint)
  return &linepoint_;
}
const ::google::protobuf::RepeatedPtrField< ::LinePoint >&
LaneBoundaryRecognition::linepoint() const {
  // @@protoc_insertion_point(field_list:LaneBoundaryRecognition.linePoint)
  return linepoint_;
}

// optional .Vector3D LM_Orientation = 1001;
bool LaneBoundaryRecognition::has_lm_orientation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LaneBoundaryRecognition::set_has_lm_orientation() {
  _has_bits_[0] |= 0x00000800u;
}
void LaneBoundaryRecognition::clear_has_lm_orientation() {
  _has_bits_[0] &= ~0x00000800u;
}
void LaneBoundaryRecognition::clear_lm_orientation() {
  if (lm_orientation_ != NULL) lm_orientation_->::Vector3D::Clear();
  clear_has_lm_orientation();
}
const ::Vector3D& LaneBoundaryRecognition::lm_orientation() const {
  // @@protoc_insertion_point(field_get:LaneBoundaryRecognition.LM_Orientation)
  return lm_orientation_ != NULL ? *lm_orientation_ : *default_instance_->lm_orientation_;
}
::Vector3D* LaneBoundaryRecognition::mutable_lm_orientation() {
  set_has_lm_orientation();
  if (lm_orientation_ == NULL) {
    lm_orientation_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:LaneBoundaryRecognition.LM_Orientation)
  return lm_orientation_;
}
::Vector3D* LaneBoundaryRecognition::release_lm_orientation() {
  // @@protoc_insertion_point(field_release:LaneBoundaryRecognition.LM_Orientation)
  clear_has_lm_orientation();
  ::Vector3D* temp = lm_orientation_;
  lm_orientation_ = NULL;
  return temp;
}
void LaneBoundaryRecognition::set_allocated_lm_orientation(::Vector3D* lm_orientation) {
  delete lm_orientation_;
  lm_orientation_ = lm_orientation;
  if (lm_orientation) {
    set_has_lm_orientation();
  } else {
    clear_has_lm_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:LaneBoundaryRecognition.LM_Orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TireSlippageEvent::TireSlippageEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TireSlippageEvent)
}

void TireSlippageEvent::InitAsDefaultInstance() {
}

TireSlippageEvent::TireSlippageEvent(const TireSlippageEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TireSlippageEvent)
}

void TireSlippageEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TireSlippageEvent::~TireSlippageEvent() {
  // @@protoc_insertion_point(destructor:TireSlippageEvent)
  SharedDtor();
}

void TireSlippageEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TireSlippageEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TireSlippageEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TireSlippageEvent_descriptor_;
}

const TireSlippageEvent& TireSlippageEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

TireSlippageEvent* TireSlippageEvent::default_instance_ = NULL;

TireSlippageEvent* TireSlippageEvent::New(::google::protobuf::Arena* arena) const {
  TireSlippageEvent* n = new TireSlippageEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TireSlippageEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:TireSlippageEvent)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TireSlippageEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TireSlippageEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TireSlippageEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TireSlippageEvent)
  return false;
#undef DO_
}

void TireSlippageEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TireSlippageEvent)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TireSlippageEvent)
}

::google::protobuf::uint8* TireSlippageEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TireSlippageEvent)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TireSlippageEvent)
  return target;
}

int TireSlippageEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TireSlippageEvent)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TireSlippageEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TireSlippageEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TireSlippageEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TireSlippageEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TireSlippageEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TireSlippageEvent)
    MergeFrom(*source);
  }
}

void TireSlippageEvent::MergeFrom(const TireSlippageEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TireSlippageEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TireSlippageEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TireSlippageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TireSlippageEvent::CopyFrom(const TireSlippageEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TireSlippageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TireSlippageEvent::IsInitialized() const {

  return true;
}

void TireSlippageEvent::Swap(TireSlippageEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TireSlippageEvent::InternalSwap(TireSlippageEvent* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TireSlippageEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TireSlippageEvent_descriptor_;
  metadata.reflection = TireSlippageEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TireSlippageEvent

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrashDetectedEvent::kVehicleIsDrivableFieldNumber;
const int CrashDetectedEvent::kAirbagsDeployedFieldNumber;
const int CrashDetectedEvent::kECallActivatedFieldNumber;
const int CrashDetectedEvent::kVehicleIsObstacleOnRoadFieldNumber;
const int CrashDetectedEvent::kMaxAccelerationVectorMps2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrashDetectedEvent::CrashDetectedEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrashDetectedEvent)
}

void CrashDetectedEvent::InitAsDefaultInstance() {
  maxaccelerationvector_mps2_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
}

CrashDetectedEvent::CrashDetectedEvent(const CrashDetectedEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrashDetectedEvent)
}

void CrashDetectedEvent::SharedCtor() {
  _cached_size_ = 0;
  vehicleisdrivable_ = false;
  airbagsdeployed_ = false;
  ecallactivated_ = false;
  vehicleisobstacleonroad_ = false;
  maxaccelerationvector_mps2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrashDetectedEvent::~CrashDetectedEvent() {
  // @@protoc_insertion_point(destructor:CrashDetectedEvent)
  SharedDtor();
}

void CrashDetectedEvent::SharedDtor() {
  if (this != default_instance_) {
    delete maxaccelerationvector_mps2_;
  }
}

void CrashDetectedEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrashDetectedEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrashDetectedEvent_descriptor_;
}

const CrashDetectedEvent& CrashDetectedEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

CrashDetectedEvent* CrashDetectedEvent::default_instance_ = NULL;

CrashDetectedEvent* CrashDetectedEvent::New(::google::protobuf::Arena* arena) const {
  CrashDetectedEvent* n = new CrashDetectedEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrashDetectedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CrashDetectedEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CrashDetectedEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CrashDetectedEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(vehicleisdrivable_, vehicleisobstacleonroad_);
    if (has_maxaccelerationvector_mps2()) {
      if (maxaccelerationvector_mps2_ != NULL) maxaccelerationvector_mps2_->::Vector3D::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CrashDetectedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrashDetectedEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool vehicleIsDrivable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vehicleisdrivable_)));
          set_has_vehicleisdrivable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_airbagsDeployed;
        break;
      }

      // optional bool airbagsDeployed = 2;
      case 2: {
        if (tag == 16) {
         parse_airbagsDeployed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &airbagsdeployed_)));
          set_has_airbagsdeployed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eCallActivated;
        break;
      }

      // optional bool eCallActivated = 3;
      case 3: {
        if (tag == 24) {
         parse_eCallActivated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ecallactivated_)));
          set_has_ecallactivated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vehicleIsObstacleOnRoad;
        break;
      }

      // optional bool vehicleIsObstacleOnRoad = 4;
      case 4: {
        if (tag == 32) {
         parse_vehicleIsObstacleOnRoad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vehicleisobstacleonroad_)));
          set_has_vehicleisobstacleonroad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_maxAccelerationVector_mps2;
        break;
      }

      // optional .Vector3D maxAccelerationVector_mps2 = 5;
      case 5: {
        if (tag == 42) {
         parse_maxAccelerationVector_mps2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxaccelerationvector_mps2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CrashDetectedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrashDetectedEvent)
  return false;
#undef DO_
}

void CrashDetectedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrashDetectedEvent)
  // optional bool vehicleIsDrivable = 1;
  if (has_vehicleisdrivable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->vehicleisdrivable(), output);
  }

  // optional bool airbagsDeployed = 2;
  if (has_airbagsdeployed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->airbagsdeployed(), output);
  }

  // optional bool eCallActivated = 3;
  if (has_ecallactivated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ecallactivated(), output);
  }

  // optional bool vehicleIsObstacleOnRoad = 4;
  if (has_vehicleisobstacleonroad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->vehicleisobstacleonroad(), output);
  }

  // optional .Vector3D maxAccelerationVector_mps2 = 5;
  if (has_maxaccelerationvector_mps2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->maxaccelerationvector_mps2_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CrashDetectedEvent)
}

::google::protobuf::uint8* CrashDetectedEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrashDetectedEvent)
  // optional bool vehicleIsDrivable = 1;
  if (has_vehicleisdrivable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->vehicleisdrivable(), target);
  }

  // optional bool airbagsDeployed = 2;
  if (has_airbagsdeployed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->airbagsdeployed(), target);
  }

  // optional bool eCallActivated = 3;
  if (has_ecallactivated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ecallactivated(), target);
  }

  // optional bool vehicleIsObstacleOnRoad = 4;
  if (has_vehicleisobstacleonroad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->vehicleisobstacleonroad(), target);
  }

  // optional .Vector3D maxAccelerationVector_mps2 = 5;
  if (has_maxaccelerationvector_mps2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->maxaccelerationvector_mps2_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CrashDetectedEvent)
  return target;
}

int CrashDetectedEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CrashDetectedEvent)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional bool vehicleIsDrivable = 1;
    if (has_vehicleisdrivable()) {
      total_size += 1 + 1;
    }

    // optional bool airbagsDeployed = 2;
    if (has_airbagsdeployed()) {
      total_size += 1 + 1;
    }

    // optional bool eCallActivated = 3;
    if (has_ecallactivated()) {
      total_size += 1 + 1;
    }

    // optional bool vehicleIsObstacleOnRoad = 4;
    if (has_vehicleisobstacleonroad()) {
      total_size += 1 + 1;
    }

    // optional .Vector3D maxAccelerationVector_mps2 = 5;
    if (has_maxaccelerationvector_mps2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->maxaccelerationvector_mps2_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrashDetectedEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CrashDetectedEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CrashDetectedEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CrashDetectedEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CrashDetectedEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CrashDetectedEvent)
    MergeFrom(*source);
  }
}

void CrashDetectedEvent::MergeFrom(const CrashDetectedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CrashDetectedEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vehicleisdrivable()) {
      set_vehicleisdrivable(from.vehicleisdrivable());
    }
    if (from.has_airbagsdeployed()) {
      set_airbagsdeployed(from.airbagsdeployed());
    }
    if (from.has_ecallactivated()) {
      set_ecallactivated(from.ecallactivated());
    }
    if (from.has_vehicleisobstacleonroad()) {
      set_vehicleisobstacleonroad(from.vehicleisobstacleonroad());
    }
    if (from.has_maxaccelerationvector_mps2()) {
      mutable_maxaccelerationvector_mps2()->::Vector3D::MergeFrom(from.maxaccelerationvector_mps2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CrashDetectedEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CrashDetectedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrashDetectedEvent::CopyFrom(const CrashDetectedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CrashDetectedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrashDetectedEvent::IsInitialized() const {

  if (has_maxaccelerationvector_mps2()) {
    if (!this->maxaccelerationvector_mps2_->IsInitialized()) return false;
  }
  return true;
}

void CrashDetectedEvent::Swap(CrashDetectedEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrashDetectedEvent::InternalSwap(CrashDetectedEvent* other) {
  std::swap(vehicleisdrivable_, other->vehicleisdrivable_);
  std::swap(airbagsdeployed_, other->airbagsdeployed_);
  std::swap(ecallactivated_, other->ecallactivated_);
  std::swap(vehicleisobstacleonroad_, other->vehicleisobstacleonroad_);
  std::swap(maxaccelerationvector_mps2_, other->maxaccelerationvector_mps2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrashDetectedEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrashDetectedEvent_descriptor_;
  metadata.reflection = CrashDetectedEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrashDetectedEvent

// optional bool vehicleIsDrivable = 1;
bool CrashDetectedEvent::has_vehicleisdrivable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CrashDetectedEvent::set_has_vehicleisdrivable() {
  _has_bits_[0] |= 0x00000001u;
}
void CrashDetectedEvent::clear_has_vehicleisdrivable() {
  _has_bits_[0] &= ~0x00000001u;
}
void CrashDetectedEvent::clear_vehicleisdrivable() {
  vehicleisdrivable_ = false;
  clear_has_vehicleisdrivable();
}
 bool CrashDetectedEvent::vehicleisdrivable() const {
  // @@protoc_insertion_point(field_get:CrashDetectedEvent.vehicleIsDrivable)
  return vehicleisdrivable_;
}
 void CrashDetectedEvent::set_vehicleisdrivable(bool value) {
  set_has_vehicleisdrivable();
  vehicleisdrivable_ = value;
  // @@protoc_insertion_point(field_set:CrashDetectedEvent.vehicleIsDrivable)
}

// optional bool airbagsDeployed = 2;
bool CrashDetectedEvent::has_airbagsdeployed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CrashDetectedEvent::set_has_airbagsdeployed() {
  _has_bits_[0] |= 0x00000002u;
}
void CrashDetectedEvent::clear_has_airbagsdeployed() {
  _has_bits_[0] &= ~0x00000002u;
}
void CrashDetectedEvent::clear_airbagsdeployed() {
  airbagsdeployed_ = false;
  clear_has_airbagsdeployed();
}
 bool CrashDetectedEvent::airbagsdeployed() const {
  // @@protoc_insertion_point(field_get:CrashDetectedEvent.airbagsDeployed)
  return airbagsdeployed_;
}
 void CrashDetectedEvent::set_airbagsdeployed(bool value) {
  set_has_airbagsdeployed();
  airbagsdeployed_ = value;
  // @@protoc_insertion_point(field_set:CrashDetectedEvent.airbagsDeployed)
}

// optional bool eCallActivated = 3;
bool CrashDetectedEvent::has_ecallactivated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CrashDetectedEvent::set_has_ecallactivated() {
  _has_bits_[0] |= 0x00000004u;
}
void CrashDetectedEvent::clear_has_ecallactivated() {
  _has_bits_[0] &= ~0x00000004u;
}
void CrashDetectedEvent::clear_ecallactivated() {
  ecallactivated_ = false;
  clear_has_ecallactivated();
}
 bool CrashDetectedEvent::ecallactivated() const {
  // @@protoc_insertion_point(field_get:CrashDetectedEvent.eCallActivated)
  return ecallactivated_;
}
 void CrashDetectedEvent::set_ecallactivated(bool value) {
  set_has_ecallactivated();
  ecallactivated_ = value;
  // @@protoc_insertion_point(field_set:CrashDetectedEvent.eCallActivated)
}

// optional bool vehicleIsObstacleOnRoad = 4;
bool CrashDetectedEvent::has_vehicleisobstacleonroad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CrashDetectedEvent::set_has_vehicleisobstacleonroad() {
  _has_bits_[0] |= 0x00000008u;
}
void CrashDetectedEvent::clear_has_vehicleisobstacleonroad() {
  _has_bits_[0] &= ~0x00000008u;
}
void CrashDetectedEvent::clear_vehicleisobstacleonroad() {
  vehicleisobstacleonroad_ = false;
  clear_has_vehicleisobstacleonroad();
}
 bool CrashDetectedEvent::vehicleisobstacleonroad() const {
  // @@protoc_insertion_point(field_get:CrashDetectedEvent.vehicleIsObstacleOnRoad)
  return vehicleisobstacleonroad_;
}
 void CrashDetectedEvent::set_vehicleisobstacleonroad(bool value) {
  set_has_vehicleisobstacleonroad();
  vehicleisobstacleonroad_ = value;
  // @@protoc_insertion_point(field_set:CrashDetectedEvent.vehicleIsObstacleOnRoad)
}

// optional .Vector3D maxAccelerationVector_mps2 = 5;
bool CrashDetectedEvent::has_maxaccelerationvector_mps2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CrashDetectedEvent::set_has_maxaccelerationvector_mps2() {
  _has_bits_[0] |= 0x00000010u;
}
void CrashDetectedEvent::clear_has_maxaccelerationvector_mps2() {
  _has_bits_[0] &= ~0x00000010u;
}
void CrashDetectedEvent::clear_maxaccelerationvector_mps2() {
  if (maxaccelerationvector_mps2_ != NULL) maxaccelerationvector_mps2_->::Vector3D::Clear();
  clear_has_maxaccelerationvector_mps2();
}
const ::Vector3D& CrashDetectedEvent::maxaccelerationvector_mps2() const {
  // @@protoc_insertion_point(field_get:CrashDetectedEvent.maxAccelerationVector_mps2)
  return maxaccelerationvector_mps2_ != NULL ? *maxaccelerationvector_mps2_ : *default_instance_->maxaccelerationvector_mps2_;
}
::Vector3D* CrashDetectedEvent::mutable_maxaccelerationvector_mps2() {
  set_has_maxaccelerationvector_mps2();
  if (maxaccelerationvector_mps2_ == NULL) {
    maxaccelerationvector_mps2_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:CrashDetectedEvent.maxAccelerationVector_mps2)
  return maxaccelerationvector_mps2_;
}
::Vector3D* CrashDetectedEvent::release_maxaccelerationvector_mps2() {
  // @@protoc_insertion_point(field_release:CrashDetectedEvent.maxAccelerationVector_mps2)
  clear_has_maxaccelerationvector_mps2();
  ::Vector3D* temp = maxaccelerationvector_mps2_;
  maxaccelerationvector_mps2_ = NULL;
  return temp;
}
void CrashDetectedEvent::set_allocated_maxaccelerationvector_mps2(::Vector3D* maxaccelerationvector_mps2) {
  delete maxaccelerationvector_mps2_;
  maxaccelerationvector_mps2_ = maxaccelerationvector_mps2;
  if (maxaccelerationvector_mps2) {
    set_has_maxaccelerationvector_mps2();
  } else {
    clear_has_maxaccelerationvector_mps2();
  }
  // @@protoc_insertion_point(field_set_allocated:CrashDetectedEvent.maxAccelerationVector_mps2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmergencyBrakingEvent::kMaxAccelerationVectorMps2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmergencyBrakingEvent::EmergencyBrakingEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EmergencyBrakingEvent)
}

void EmergencyBrakingEvent::InitAsDefaultInstance() {
  maxaccelerationvector_mps2_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
}

EmergencyBrakingEvent::EmergencyBrakingEvent(const EmergencyBrakingEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EmergencyBrakingEvent)
}

void EmergencyBrakingEvent::SharedCtor() {
  _cached_size_ = 0;
  maxaccelerationvector_mps2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmergencyBrakingEvent::~EmergencyBrakingEvent() {
  // @@protoc_insertion_point(destructor:EmergencyBrakingEvent)
  SharedDtor();
}

void EmergencyBrakingEvent::SharedDtor() {
  if (this != default_instance_) {
    delete maxaccelerationvector_mps2_;
  }
}

void EmergencyBrakingEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmergencyBrakingEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmergencyBrakingEvent_descriptor_;
}

const EmergencyBrakingEvent& EmergencyBrakingEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

EmergencyBrakingEvent* EmergencyBrakingEvent::default_instance_ = NULL;

EmergencyBrakingEvent* EmergencyBrakingEvent::New(::google::protobuf::Arena* arena) const {
  EmergencyBrakingEvent* n = new EmergencyBrakingEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmergencyBrakingEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:EmergencyBrakingEvent)
  if (has_maxaccelerationvector_mps2()) {
    if (maxaccelerationvector_mps2_ != NULL) maxaccelerationvector_mps2_->::Vector3D::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EmergencyBrakingEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EmergencyBrakingEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Vector3D maxAccelerationVector_mps2 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxaccelerationvector_mps2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EmergencyBrakingEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EmergencyBrakingEvent)
  return false;
#undef DO_
}

void EmergencyBrakingEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EmergencyBrakingEvent)
  // optional .Vector3D maxAccelerationVector_mps2 = 1;
  if (has_maxaccelerationvector_mps2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->maxaccelerationvector_mps2_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EmergencyBrakingEvent)
}

::google::protobuf::uint8* EmergencyBrakingEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EmergencyBrakingEvent)
  // optional .Vector3D maxAccelerationVector_mps2 = 1;
  if (has_maxaccelerationvector_mps2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->maxaccelerationvector_mps2_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EmergencyBrakingEvent)
  return target;
}

int EmergencyBrakingEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:EmergencyBrakingEvent)
  int total_size = 0;

  // optional .Vector3D maxAccelerationVector_mps2 = 1;
  if (has_maxaccelerationvector_mps2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->maxaccelerationvector_mps2_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmergencyBrakingEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EmergencyBrakingEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EmergencyBrakingEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EmergencyBrakingEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EmergencyBrakingEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EmergencyBrakingEvent)
    MergeFrom(*source);
  }
}

void EmergencyBrakingEvent::MergeFrom(const EmergencyBrakingEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EmergencyBrakingEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxaccelerationvector_mps2()) {
      mutable_maxaccelerationvector_mps2()->::Vector3D::MergeFrom(from.maxaccelerationvector_mps2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EmergencyBrakingEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EmergencyBrakingEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyBrakingEvent::CopyFrom(const EmergencyBrakingEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EmergencyBrakingEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyBrakingEvent::IsInitialized() const {

  if (has_maxaccelerationvector_mps2()) {
    if (!this->maxaccelerationvector_mps2_->IsInitialized()) return false;
  }
  return true;
}

void EmergencyBrakingEvent::Swap(EmergencyBrakingEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmergencyBrakingEvent::InternalSwap(EmergencyBrakingEvent* other) {
  std::swap(maxaccelerationvector_mps2_, other->maxaccelerationvector_mps2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmergencyBrakingEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmergencyBrakingEvent_descriptor_;
  metadata.reflection = EmergencyBrakingEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmergencyBrakingEvent

// optional .Vector3D maxAccelerationVector_mps2 = 1;
bool EmergencyBrakingEvent::has_maxaccelerationvector_mps2() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmergencyBrakingEvent::set_has_maxaccelerationvector_mps2() {
  _has_bits_[0] |= 0x00000001u;
}
void EmergencyBrakingEvent::clear_has_maxaccelerationvector_mps2() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmergencyBrakingEvent::clear_maxaccelerationvector_mps2() {
  if (maxaccelerationvector_mps2_ != NULL) maxaccelerationvector_mps2_->::Vector3D::Clear();
  clear_has_maxaccelerationvector_mps2();
}
const ::Vector3D& EmergencyBrakingEvent::maxaccelerationvector_mps2() const {
  // @@protoc_insertion_point(field_get:EmergencyBrakingEvent.maxAccelerationVector_mps2)
  return maxaccelerationvector_mps2_ != NULL ? *maxaccelerationvector_mps2_ : *default_instance_->maxaccelerationvector_mps2_;
}
::Vector3D* EmergencyBrakingEvent::mutable_maxaccelerationvector_mps2() {
  set_has_maxaccelerationvector_mps2();
  if (maxaccelerationvector_mps2_ == NULL) {
    maxaccelerationvector_mps2_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:EmergencyBrakingEvent.maxAccelerationVector_mps2)
  return maxaccelerationvector_mps2_;
}
::Vector3D* EmergencyBrakingEvent::release_maxaccelerationvector_mps2() {
  // @@protoc_insertion_point(field_release:EmergencyBrakingEvent.maxAccelerationVector_mps2)
  clear_has_maxaccelerationvector_mps2();
  ::Vector3D* temp = maxaccelerationvector_mps2_;
  maxaccelerationvector_mps2_ = NULL;
  return temp;
}
void EmergencyBrakingEvent::set_allocated_maxaccelerationvector_mps2(::Vector3D* maxaccelerationvector_mps2) {
  delete maxaccelerationvector_mps2_;
  maxaccelerationvector_mps2_ = maxaccelerationvector_mps2;
  if (maxaccelerationvector_mps2) {
    set_has_maxaccelerationvector_mps2();
  } else {
    clear_has_maxaccelerationvector_mps2();
  }
  // @@protoc_insertion_point(field_set_allocated:EmergencyBrakingEvent.maxAccelerationVector_mps2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicStabilityControlEvent::DynamicStabilityControlEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DynamicStabilityControlEvent)
}

void DynamicStabilityControlEvent::InitAsDefaultInstance() {
}

DynamicStabilityControlEvent::DynamicStabilityControlEvent(const DynamicStabilityControlEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DynamicStabilityControlEvent)
}

void DynamicStabilityControlEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynamicStabilityControlEvent::~DynamicStabilityControlEvent() {
  // @@protoc_insertion_point(destructor:DynamicStabilityControlEvent)
  SharedDtor();
}

void DynamicStabilityControlEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DynamicStabilityControlEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicStabilityControlEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynamicStabilityControlEvent_descriptor_;
}

const DynamicStabilityControlEvent& DynamicStabilityControlEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

DynamicStabilityControlEvent* DynamicStabilityControlEvent::default_instance_ = NULL;

DynamicStabilityControlEvent* DynamicStabilityControlEvent::New(::google::protobuf::Arena* arena) const {
  DynamicStabilityControlEvent* n = new DynamicStabilityControlEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DynamicStabilityControlEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:DynamicStabilityControlEvent)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DynamicStabilityControlEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DynamicStabilityControlEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DynamicStabilityControlEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DynamicStabilityControlEvent)
  return false;
#undef DO_
}

void DynamicStabilityControlEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DynamicStabilityControlEvent)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DynamicStabilityControlEvent)
}

::google::protobuf::uint8* DynamicStabilityControlEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynamicStabilityControlEvent)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynamicStabilityControlEvent)
  return target;
}

int DynamicStabilityControlEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DynamicStabilityControlEvent)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicStabilityControlEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynamicStabilityControlEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DynamicStabilityControlEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamicStabilityControlEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynamicStabilityControlEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynamicStabilityControlEvent)
    MergeFrom(*source);
  }
}

void DynamicStabilityControlEvent::MergeFrom(const DynamicStabilityControlEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynamicStabilityControlEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DynamicStabilityControlEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynamicStabilityControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicStabilityControlEvent::CopyFrom(const DynamicStabilityControlEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynamicStabilityControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicStabilityControlEvent::IsInitialized() const {

  return true;
}

void DynamicStabilityControlEvent::Swap(DynamicStabilityControlEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamicStabilityControlEvent::InternalSwap(DynamicStabilityControlEvent* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynamicStabilityControlEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynamicStabilityControlEvent_descriptor_;
  metadata.reflection = DynamicStabilityControlEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DynamicStabilityControlEvent

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AntiLockBrakingSystemEvent::AntiLockBrakingSystemEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AntiLockBrakingSystemEvent)
}

void AntiLockBrakingSystemEvent::InitAsDefaultInstance() {
}

AntiLockBrakingSystemEvent::AntiLockBrakingSystemEvent(const AntiLockBrakingSystemEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AntiLockBrakingSystemEvent)
}

void AntiLockBrakingSystemEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AntiLockBrakingSystemEvent::~AntiLockBrakingSystemEvent() {
  // @@protoc_insertion_point(destructor:AntiLockBrakingSystemEvent)
  SharedDtor();
}

void AntiLockBrakingSystemEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AntiLockBrakingSystemEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AntiLockBrakingSystemEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntiLockBrakingSystemEvent_descriptor_;
}

const AntiLockBrakingSystemEvent& AntiLockBrakingSystemEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

AntiLockBrakingSystemEvent* AntiLockBrakingSystemEvent::default_instance_ = NULL;

AntiLockBrakingSystemEvent* AntiLockBrakingSystemEvent::New(::google::protobuf::Arena* arena) const {
  AntiLockBrakingSystemEvent* n = new AntiLockBrakingSystemEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AntiLockBrakingSystemEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:AntiLockBrakingSystemEvent)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AntiLockBrakingSystemEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AntiLockBrakingSystemEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AntiLockBrakingSystemEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AntiLockBrakingSystemEvent)
  return false;
#undef DO_
}

void AntiLockBrakingSystemEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AntiLockBrakingSystemEvent)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AntiLockBrakingSystemEvent)
}

::google::protobuf::uint8* AntiLockBrakingSystemEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AntiLockBrakingSystemEvent)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AntiLockBrakingSystemEvent)
  return target;
}

int AntiLockBrakingSystemEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AntiLockBrakingSystemEvent)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AntiLockBrakingSystemEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AntiLockBrakingSystemEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AntiLockBrakingSystemEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AntiLockBrakingSystemEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AntiLockBrakingSystemEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AntiLockBrakingSystemEvent)
    MergeFrom(*source);
  }
}

void AntiLockBrakingSystemEvent::MergeFrom(const AntiLockBrakingSystemEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AntiLockBrakingSystemEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AntiLockBrakingSystemEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AntiLockBrakingSystemEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntiLockBrakingSystemEvent::CopyFrom(const AntiLockBrakingSystemEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AntiLockBrakingSystemEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntiLockBrakingSystemEvent::IsInitialized() const {

  return true;
}

void AntiLockBrakingSystemEvent::Swap(AntiLockBrakingSystemEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AntiLockBrakingSystemEvent::InternalSwap(AntiLockBrakingSystemEvent* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AntiLockBrakingSystemEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AntiLockBrakingSystemEvent_descriptor_;
  metadata.reflection = AntiLockBrakingSystemEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AntiLockBrakingSystemEvent

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElectronicStabilityControlEvent::kAntiSlipActionEventFieldNumber;
const int ElectronicStabilityControlEvent::kAntiLockActionEventFieldNumber;
const int ElectronicStabilityControlEvent::kElectronicStabilityControlEventFieldNumber;
const int ElectronicStabilityControlEvent::kRequestedAccelerationVectorMps2FieldNumber;
const int ElectronicStabilityControlEvent::kRequestedRotationRateVectorOmegaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElectronicStabilityControlEvent::ElectronicStabilityControlEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ElectronicStabilityControlEvent)
}

void ElectronicStabilityControlEvent::InitAsDefaultInstance() {
  requestedaccelerationvector_mps2_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
  requestedrotationratevector_omega_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
}

ElectronicStabilityControlEvent::ElectronicStabilityControlEvent(const ElectronicStabilityControlEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ElectronicStabilityControlEvent)
}

void ElectronicStabilityControlEvent::SharedCtor() {
  _cached_size_ = 0;
  antislipactionevent_ = false;
  antilockactionevent_ = false;
  electronicstabilitycontrolevent_ = false;
  requestedaccelerationvector_mps2_ = NULL;
  requestedrotationratevector_omega_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElectronicStabilityControlEvent::~ElectronicStabilityControlEvent() {
  // @@protoc_insertion_point(destructor:ElectronicStabilityControlEvent)
  SharedDtor();
}

void ElectronicStabilityControlEvent::SharedDtor() {
  if (this != default_instance_) {
    delete requestedaccelerationvector_mps2_;
    delete requestedrotationratevector_omega_;
  }
}

void ElectronicStabilityControlEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElectronicStabilityControlEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElectronicStabilityControlEvent_descriptor_;
}

const ElectronicStabilityControlEvent& ElectronicStabilityControlEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

ElectronicStabilityControlEvent* ElectronicStabilityControlEvent::default_instance_ = NULL;

ElectronicStabilityControlEvent* ElectronicStabilityControlEvent::New(::google::protobuf::Arena* arena) const {
  ElectronicStabilityControlEvent* n = new ElectronicStabilityControlEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ElectronicStabilityControlEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ElectronicStabilityControlEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ElectronicStabilityControlEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ElectronicStabilityControlEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(antislipactionevent_, electronicstabilitycontrolevent_);
    if (has_requestedaccelerationvector_mps2()) {
      if (requestedaccelerationvector_mps2_ != NULL) requestedaccelerationvector_mps2_->::Vector3D::Clear();
    }
    if (has_requestedrotationratevector_omega()) {
      if (requestedrotationratevector_omega_ != NULL) requestedrotationratevector_omega_->::Vector3D::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ElectronicStabilityControlEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ElectronicStabilityControlEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool antiSlipActionEvent = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &antislipactionevent_)));
          set_has_antislipactionevent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_antiLockActionEvent;
        break;
      }

      // optional bool antiLockActionEvent = 2;
      case 2: {
        if (tag == 16) {
         parse_antiLockActionEvent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &antilockactionevent_)));
          set_has_antilockactionevent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_electronicStabilityControlEvent;
        break;
      }

      // optional bool electronicStabilityControlEvent = 3;
      case 3: {
        if (tag == 24) {
         parse_electronicStabilityControlEvent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &electronicstabilitycontrolevent_)));
          set_has_electronicstabilitycontrolevent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_requestedAccelerationVector_mps2;
        break;
      }

      // optional .Vector3D requestedAccelerationVector_mps2 = 4;
      case 4: {
        if (tag == 34) {
         parse_requestedAccelerationVector_mps2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestedaccelerationvector_mps2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_requestedRotationRateVector_omega;
        break;
      }

      // optional .Vector3D requestedRotationRateVector_omega = 5;
      case 5: {
        if (tag == 42) {
         parse_requestedRotationRateVector_omega:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestedrotationratevector_omega()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ElectronicStabilityControlEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ElectronicStabilityControlEvent)
  return false;
#undef DO_
}

void ElectronicStabilityControlEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ElectronicStabilityControlEvent)
  // optional bool antiSlipActionEvent = 1;
  if (has_antislipactionevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->antislipactionevent(), output);
  }

  // optional bool antiLockActionEvent = 2;
  if (has_antilockactionevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->antilockactionevent(), output);
  }

  // optional bool electronicStabilityControlEvent = 3;
  if (has_electronicstabilitycontrolevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->electronicstabilitycontrolevent(), output);
  }

  // optional .Vector3D requestedAccelerationVector_mps2 = 4;
  if (has_requestedaccelerationvector_mps2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->requestedaccelerationvector_mps2_, output);
  }

  // optional .Vector3D requestedRotationRateVector_omega = 5;
  if (has_requestedrotationratevector_omega()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->requestedrotationratevector_omega_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ElectronicStabilityControlEvent)
}

::google::protobuf::uint8* ElectronicStabilityControlEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ElectronicStabilityControlEvent)
  // optional bool antiSlipActionEvent = 1;
  if (has_antislipactionevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->antislipactionevent(), target);
  }

  // optional bool antiLockActionEvent = 2;
  if (has_antilockactionevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->antilockactionevent(), target);
  }

  // optional bool electronicStabilityControlEvent = 3;
  if (has_electronicstabilitycontrolevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->electronicstabilitycontrolevent(), target);
  }

  // optional .Vector3D requestedAccelerationVector_mps2 = 4;
  if (has_requestedaccelerationvector_mps2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->requestedaccelerationvector_mps2_, false, target);
  }

  // optional .Vector3D requestedRotationRateVector_omega = 5;
  if (has_requestedrotationratevector_omega()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->requestedrotationratevector_omega_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ElectronicStabilityControlEvent)
  return target;
}

int ElectronicStabilityControlEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ElectronicStabilityControlEvent)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional bool antiSlipActionEvent = 1;
    if (has_antislipactionevent()) {
      total_size += 1 + 1;
    }

    // optional bool antiLockActionEvent = 2;
    if (has_antilockactionevent()) {
      total_size += 1 + 1;
    }

    // optional bool electronicStabilityControlEvent = 3;
    if (has_electronicstabilitycontrolevent()) {
      total_size += 1 + 1;
    }

    // optional .Vector3D requestedAccelerationVector_mps2 = 4;
    if (has_requestedaccelerationvector_mps2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->requestedaccelerationvector_mps2_);
    }

    // optional .Vector3D requestedRotationRateVector_omega = 5;
    if (has_requestedrotationratevector_omega()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->requestedrotationratevector_omega_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElectronicStabilityControlEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ElectronicStabilityControlEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ElectronicStabilityControlEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ElectronicStabilityControlEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ElectronicStabilityControlEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ElectronicStabilityControlEvent)
    MergeFrom(*source);
  }
}

void ElectronicStabilityControlEvent::MergeFrom(const ElectronicStabilityControlEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ElectronicStabilityControlEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_antislipactionevent()) {
      set_antislipactionevent(from.antislipactionevent());
    }
    if (from.has_antilockactionevent()) {
      set_antilockactionevent(from.antilockactionevent());
    }
    if (from.has_electronicstabilitycontrolevent()) {
      set_electronicstabilitycontrolevent(from.electronicstabilitycontrolevent());
    }
    if (from.has_requestedaccelerationvector_mps2()) {
      mutable_requestedaccelerationvector_mps2()->::Vector3D::MergeFrom(from.requestedaccelerationvector_mps2());
    }
    if (from.has_requestedrotationratevector_omega()) {
      mutable_requestedrotationratevector_omega()->::Vector3D::MergeFrom(from.requestedrotationratevector_omega());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ElectronicStabilityControlEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ElectronicStabilityControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectronicStabilityControlEvent::CopyFrom(const ElectronicStabilityControlEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ElectronicStabilityControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectronicStabilityControlEvent::IsInitialized() const {

  if (has_requestedaccelerationvector_mps2()) {
    if (!this->requestedaccelerationvector_mps2_->IsInitialized()) return false;
  }
  if (has_requestedrotationratevector_omega()) {
    if (!this->requestedrotationratevector_omega_->IsInitialized()) return false;
  }
  return true;
}

void ElectronicStabilityControlEvent::Swap(ElectronicStabilityControlEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElectronicStabilityControlEvent::InternalSwap(ElectronicStabilityControlEvent* other) {
  std::swap(antislipactionevent_, other->antislipactionevent_);
  std::swap(antilockactionevent_, other->antilockactionevent_);
  std::swap(electronicstabilitycontrolevent_, other->electronicstabilitycontrolevent_);
  std::swap(requestedaccelerationvector_mps2_, other->requestedaccelerationvector_mps2_);
  std::swap(requestedrotationratevector_omega_, other->requestedrotationratevector_omega_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ElectronicStabilityControlEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElectronicStabilityControlEvent_descriptor_;
  metadata.reflection = ElectronicStabilityControlEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ElectronicStabilityControlEvent

// optional bool antiSlipActionEvent = 1;
bool ElectronicStabilityControlEvent::has_antislipactionevent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ElectronicStabilityControlEvent::set_has_antislipactionevent() {
  _has_bits_[0] |= 0x00000001u;
}
void ElectronicStabilityControlEvent::clear_has_antislipactionevent() {
  _has_bits_[0] &= ~0x00000001u;
}
void ElectronicStabilityControlEvent::clear_antislipactionevent() {
  antislipactionevent_ = false;
  clear_has_antislipactionevent();
}
 bool ElectronicStabilityControlEvent::antislipactionevent() const {
  // @@protoc_insertion_point(field_get:ElectronicStabilityControlEvent.antiSlipActionEvent)
  return antislipactionevent_;
}
 void ElectronicStabilityControlEvent::set_antislipactionevent(bool value) {
  set_has_antislipactionevent();
  antislipactionevent_ = value;
  // @@protoc_insertion_point(field_set:ElectronicStabilityControlEvent.antiSlipActionEvent)
}

// optional bool antiLockActionEvent = 2;
bool ElectronicStabilityControlEvent::has_antilockactionevent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ElectronicStabilityControlEvent::set_has_antilockactionevent() {
  _has_bits_[0] |= 0x00000002u;
}
void ElectronicStabilityControlEvent::clear_has_antilockactionevent() {
  _has_bits_[0] &= ~0x00000002u;
}
void ElectronicStabilityControlEvent::clear_antilockactionevent() {
  antilockactionevent_ = false;
  clear_has_antilockactionevent();
}
 bool ElectronicStabilityControlEvent::antilockactionevent() const {
  // @@protoc_insertion_point(field_get:ElectronicStabilityControlEvent.antiLockActionEvent)
  return antilockactionevent_;
}
 void ElectronicStabilityControlEvent::set_antilockactionevent(bool value) {
  set_has_antilockactionevent();
  antilockactionevent_ = value;
  // @@protoc_insertion_point(field_set:ElectronicStabilityControlEvent.antiLockActionEvent)
}

// optional bool electronicStabilityControlEvent = 3;
bool ElectronicStabilityControlEvent::has_electronicstabilitycontrolevent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ElectronicStabilityControlEvent::set_has_electronicstabilitycontrolevent() {
  _has_bits_[0] |= 0x00000004u;
}
void ElectronicStabilityControlEvent::clear_has_electronicstabilitycontrolevent() {
  _has_bits_[0] &= ~0x00000004u;
}
void ElectronicStabilityControlEvent::clear_electronicstabilitycontrolevent() {
  electronicstabilitycontrolevent_ = false;
  clear_has_electronicstabilitycontrolevent();
}
 bool ElectronicStabilityControlEvent::electronicstabilitycontrolevent() const {
  // @@protoc_insertion_point(field_get:ElectronicStabilityControlEvent.electronicStabilityControlEvent)
  return electronicstabilitycontrolevent_;
}
 void ElectronicStabilityControlEvent::set_electronicstabilitycontrolevent(bool value) {
  set_has_electronicstabilitycontrolevent();
  electronicstabilitycontrolevent_ = value;
  // @@protoc_insertion_point(field_set:ElectronicStabilityControlEvent.electronicStabilityControlEvent)
}

// optional .Vector3D requestedAccelerationVector_mps2 = 4;
bool ElectronicStabilityControlEvent::has_requestedaccelerationvector_mps2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ElectronicStabilityControlEvent::set_has_requestedaccelerationvector_mps2() {
  _has_bits_[0] |= 0x00000008u;
}
void ElectronicStabilityControlEvent::clear_has_requestedaccelerationvector_mps2() {
  _has_bits_[0] &= ~0x00000008u;
}
void ElectronicStabilityControlEvent::clear_requestedaccelerationvector_mps2() {
  if (requestedaccelerationvector_mps2_ != NULL) requestedaccelerationvector_mps2_->::Vector3D::Clear();
  clear_has_requestedaccelerationvector_mps2();
}
const ::Vector3D& ElectronicStabilityControlEvent::requestedaccelerationvector_mps2() const {
  // @@protoc_insertion_point(field_get:ElectronicStabilityControlEvent.requestedAccelerationVector_mps2)
  return requestedaccelerationvector_mps2_ != NULL ? *requestedaccelerationvector_mps2_ : *default_instance_->requestedaccelerationvector_mps2_;
}
::Vector3D* ElectronicStabilityControlEvent::mutable_requestedaccelerationvector_mps2() {
  set_has_requestedaccelerationvector_mps2();
  if (requestedaccelerationvector_mps2_ == NULL) {
    requestedaccelerationvector_mps2_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:ElectronicStabilityControlEvent.requestedAccelerationVector_mps2)
  return requestedaccelerationvector_mps2_;
}
::Vector3D* ElectronicStabilityControlEvent::release_requestedaccelerationvector_mps2() {
  // @@protoc_insertion_point(field_release:ElectronicStabilityControlEvent.requestedAccelerationVector_mps2)
  clear_has_requestedaccelerationvector_mps2();
  ::Vector3D* temp = requestedaccelerationvector_mps2_;
  requestedaccelerationvector_mps2_ = NULL;
  return temp;
}
void ElectronicStabilityControlEvent::set_allocated_requestedaccelerationvector_mps2(::Vector3D* requestedaccelerationvector_mps2) {
  delete requestedaccelerationvector_mps2_;
  requestedaccelerationvector_mps2_ = requestedaccelerationvector_mps2;
  if (requestedaccelerationvector_mps2) {
    set_has_requestedaccelerationvector_mps2();
  } else {
    clear_has_requestedaccelerationvector_mps2();
  }
  // @@protoc_insertion_point(field_set_allocated:ElectronicStabilityControlEvent.requestedAccelerationVector_mps2)
}

// optional .Vector3D requestedRotationRateVector_omega = 5;
bool ElectronicStabilityControlEvent::has_requestedrotationratevector_omega() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ElectronicStabilityControlEvent::set_has_requestedrotationratevector_omega() {
  _has_bits_[0] |= 0x00000010u;
}
void ElectronicStabilityControlEvent::clear_has_requestedrotationratevector_omega() {
  _has_bits_[0] &= ~0x00000010u;
}
void ElectronicStabilityControlEvent::clear_requestedrotationratevector_omega() {
  if (requestedrotationratevector_omega_ != NULL) requestedrotationratevector_omega_->::Vector3D::Clear();
  clear_has_requestedrotationratevector_omega();
}
const ::Vector3D& ElectronicStabilityControlEvent::requestedrotationratevector_omega() const {
  // @@protoc_insertion_point(field_get:ElectronicStabilityControlEvent.requestedRotationRateVector_omega)
  return requestedrotationratevector_omega_ != NULL ? *requestedrotationratevector_omega_ : *default_instance_->requestedrotationratevector_omega_;
}
::Vector3D* ElectronicStabilityControlEvent::mutable_requestedrotationratevector_omega() {
  set_has_requestedrotationratevector_omega();
  if (requestedrotationratevector_omega_ == NULL) {
    requestedrotationratevector_omega_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:ElectronicStabilityControlEvent.requestedRotationRateVector_omega)
  return requestedrotationratevector_omega_;
}
::Vector3D* ElectronicStabilityControlEvent::release_requestedrotationratevector_omega() {
  // @@protoc_insertion_point(field_release:ElectronicStabilityControlEvent.requestedRotationRateVector_omega)
  clear_has_requestedrotationratevector_omega();
  ::Vector3D* temp = requestedrotationratevector_omega_;
  requestedrotationratevector_omega_ = NULL;
  return temp;
}
void ElectronicStabilityControlEvent::set_allocated_requestedrotationratevector_omega(::Vector3D* requestedrotationratevector_omega) {
  delete requestedrotationratevector_omega_;
  requestedrotationratevector_omega_ = requestedrotationratevector_omega;
  if (requestedrotationratevector_omega) {
    set_has_requestedrotationratevector_omega();
  } else {
    clear_has_requestedrotationratevector_omega();
  }
  // @@protoc_insertion_point(field_set_allocated:ElectronicStabilityControlEvent.requestedRotationRateVector_omega)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExceptionalVehicleState::kTimeStampUTCMsFieldNumber;
const int ExceptionalVehicleState::kTireSlippageFieldNumber;
const int ExceptionalVehicleState::kCrashDetectedFieldNumber;
const int ExceptionalVehicleState::kEmergencyBrakingFieldNumber;
const int ExceptionalVehicleState::kDynamicStabilityControlFieldNumber;
const int ExceptionalVehicleState::kAntiLockBrakingSystemFieldNumber;
const int ExceptionalVehicleState::kElectronicStabilityControlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExceptionalVehicleState::ExceptionalVehicleState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExceptionalVehicleState)
}

void ExceptionalVehicleState::InitAsDefaultInstance() {
  tireslippage_ = const_cast< ::TireSlippageEvent*>(&::TireSlippageEvent::default_instance());
  crashdetected_ = const_cast< ::CrashDetectedEvent*>(&::CrashDetectedEvent::default_instance());
  emergencybraking_ = const_cast< ::EmergencyBrakingEvent*>(&::EmergencyBrakingEvent::default_instance());
  dynamicstabilitycontrol_ = const_cast< ::DynamicStabilityControlEvent*>(&::DynamicStabilityControlEvent::default_instance());
  antilockbrakingsystem_ = const_cast< ::AntiLockBrakingSystemEvent*>(&::AntiLockBrakingSystemEvent::default_instance());
  electronicstabilitycontrol_ = const_cast< ::ElectronicStabilityControlEvent*>(&::ElectronicStabilityControlEvent::default_instance());
}

ExceptionalVehicleState::ExceptionalVehicleState(const ExceptionalVehicleState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ExceptionalVehicleState)
}

void ExceptionalVehicleState::SharedCtor() {
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  tireslippage_ = NULL;
  crashdetected_ = NULL;
  emergencybraking_ = NULL;
  dynamicstabilitycontrol_ = NULL;
  antilockbrakingsystem_ = NULL;
  electronicstabilitycontrol_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExceptionalVehicleState::~ExceptionalVehicleState() {
  // @@protoc_insertion_point(destructor:ExceptionalVehicleState)
  SharedDtor();
}

void ExceptionalVehicleState::SharedDtor() {
  if (this != default_instance_) {
    delete tireslippage_;
    delete crashdetected_;
    delete emergencybraking_;
    delete dynamicstabilitycontrol_;
    delete antilockbrakingsystem_;
    delete electronicstabilitycontrol_;
  }
}

void ExceptionalVehicleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExceptionalVehicleState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExceptionalVehicleState_descriptor_;
}

const ExceptionalVehicleState& ExceptionalVehicleState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

ExceptionalVehicleState* ExceptionalVehicleState::default_instance_ = NULL;

ExceptionalVehicleState* ExceptionalVehicleState::New(::google::protobuf::Arena* arena) const {
  ExceptionalVehicleState* n = new ExceptionalVehicleState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExceptionalVehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:ExceptionalVehicleState)
  if (_has_bits_[0 / 32] & 127u) {
    timestamputc_ms_ = GOOGLE_LONGLONG(0);
    if (has_tireslippage()) {
      if (tireslippage_ != NULL) tireslippage_->::TireSlippageEvent::Clear();
    }
    if (has_crashdetected()) {
      if (crashdetected_ != NULL) crashdetected_->::CrashDetectedEvent::Clear();
    }
    if (has_emergencybraking()) {
      if (emergencybraking_ != NULL) emergencybraking_->::EmergencyBrakingEvent::Clear();
    }
    if (has_dynamicstabilitycontrol()) {
      if (dynamicstabilitycontrol_ != NULL) dynamicstabilitycontrol_->::DynamicStabilityControlEvent::Clear();
    }
    if (has_antilockbrakingsystem()) {
      if (antilockbrakingsystem_ != NULL) antilockbrakingsystem_->::AntiLockBrakingSystemEvent::Clear();
    }
    if (has_electronicstabilitycontrol()) {
      if (electronicstabilitycontrol_ != NULL) electronicstabilitycontrol_->::ElectronicStabilityControlEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExceptionalVehicleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExceptionalVehicleState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tireSlippage;
        break;
      }

      // optional .TireSlippageEvent tireSlippage = 2 [deprecated = true];
      case 2: {
        if (tag == 18) {
         parse_tireSlippage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tireslippage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_crashDetected;
        break;
      }

      // optional .CrashDetectedEvent crashDetected = 3;
      case 3: {
        if (tag == 26) {
         parse_crashDetected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crashdetected()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_emergencyBraking;
        break;
      }

      // optional .EmergencyBrakingEvent emergencyBraking = 4;
      case 4: {
        if (tag == 34) {
         parse_emergencyBraking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emergencybraking()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dynamicStabilityControl;
        break;
      }

      // optional .DynamicStabilityControlEvent dynamicStabilityControl = 5 [deprecated = true];
      case 5: {
        if (tag == 42) {
         parse_dynamicStabilityControl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dynamicstabilitycontrol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_antiLockBrakingSystem;
        break;
      }

      // optional .AntiLockBrakingSystemEvent antiLockBrakingSystem = 6 [deprecated = true];
      case 6: {
        if (tag == 50) {
         parse_antiLockBrakingSystem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_antilockbrakingsystem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_electronicStabilityControl;
        break;
      }

      // optional .ElectronicStabilityControlEvent electronicStabilityControl = 7;
      case 7: {
        if (tag == 58) {
         parse_electronicStabilityControl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_electronicstabilitycontrol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExceptionalVehicleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExceptionalVehicleState)
  return false;
#undef DO_
}

void ExceptionalVehicleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExceptionalVehicleState)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // optional .TireSlippageEvent tireSlippage = 2 [deprecated = true];
  if (has_tireslippage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tireslippage_, output);
  }

  // optional .CrashDetectedEvent crashDetected = 3;
  if (has_crashdetected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->crashdetected_, output);
  }

  // optional .EmergencyBrakingEvent emergencyBraking = 4;
  if (has_emergencybraking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->emergencybraking_, output);
  }

  // optional .DynamicStabilityControlEvent dynamicStabilityControl = 5 [deprecated = true];
  if (has_dynamicstabilitycontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->dynamicstabilitycontrol_, output);
  }

  // optional .AntiLockBrakingSystemEvent antiLockBrakingSystem = 6 [deprecated = true];
  if (has_antilockbrakingsystem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->antilockbrakingsystem_, output);
  }

  // optional .ElectronicStabilityControlEvent electronicStabilityControl = 7;
  if (has_electronicstabilitycontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->electronicstabilitycontrol_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExceptionalVehicleState)
}

::google::protobuf::uint8* ExceptionalVehicleState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExceptionalVehicleState)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // optional .TireSlippageEvent tireSlippage = 2 [deprecated = true];
  if (has_tireslippage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tireslippage_, false, target);
  }

  // optional .CrashDetectedEvent crashDetected = 3;
  if (has_crashdetected()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->crashdetected_, false, target);
  }

  // optional .EmergencyBrakingEvent emergencyBraking = 4;
  if (has_emergencybraking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->emergencybraking_, false, target);
  }

  // optional .DynamicStabilityControlEvent dynamicStabilityControl = 5 [deprecated = true];
  if (has_dynamicstabilitycontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->dynamicstabilitycontrol_, false, target);
  }

  // optional .AntiLockBrakingSystemEvent antiLockBrakingSystem = 6 [deprecated = true];
  if (has_antilockbrakingsystem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->antilockbrakingsystem_, false, target);
  }

  // optional .ElectronicStabilityControlEvent electronicStabilityControl = 7;
  if (has_electronicstabilitycontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->electronicstabilitycontrol_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExceptionalVehicleState)
  return target;
}

int ExceptionalVehicleState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ExceptionalVehicleState)
  int total_size = 0;

  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }
  if (_has_bits_[1 / 32] & 126u) {
    // optional .TireSlippageEvent tireSlippage = 2 [deprecated = true];
    if (has_tireslippage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tireslippage_);
    }

    // optional .CrashDetectedEvent crashDetected = 3;
    if (has_crashdetected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crashdetected_);
    }

    // optional .EmergencyBrakingEvent emergencyBraking = 4;
    if (has_emergencybraking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->emergencybraking_);
    }

    // optional .DynamicStabilityControlEvent dynamicStabilityControl = 5 [deprecated = true];
    if (has_dynamicstabilitycontrol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dynamicstabilitycontrol_);
    }

    // optional .AntiLockBrakingSystemEvent antiLockBrakingSystem = 6 [deprecated = true];
    if (has_antilockbrakingsystem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->antilockbrakingsystem_);
    }

    // optional .ElectronicStabilityControlEvent electronicStabilityControl = 7;
    if (has_electronicstabilitycontrol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->electronicstabilitycontrol_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExceptionalVehicleState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ExceptionalVehicleState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExceptionalVehicleState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExceptionalVehicleState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ExceptionalVehicleState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ExceptionalVehicleState)
    MergeFrom(*source);
  }
}

void ExceptionalVehicleState::MergeFrom(const ExceptionalVehicleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExceptionalVehicleState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
    if (from.has_tireslippage()) {
      mutable_tireslippage()->::TireSlippageEvent::MergeFrom(from.tireslippage());
    }
    if (from.has_crashdetected()) {
      mutable_crashdetected()->::CrashDetectedEvent::MergeFrom(from.crashdetected());
    }
    if (from.has_emergencybraking()) {
      mutable_emergencybraking()->::EmergencyBrakingEvent::MergeFrom(from.emergencybraking());
    }
    if (from.has_dynamicstabilitycontrol()) {
      mutable_dynamicstabilitycontrol()->::DynamicStabilityControlEvent::MergeFrom(from.dynamicstabilitycontrol());
    }
    if (from.has_antilockbrakingsystem()) {
      mutable_antilockbrakingsystem()->::AntiLockBrakingSystemEvent::MergeFrom(from.antilockbrakingsystem());
    }
    if (from.has_electronicstabilitycontrol()) {
      mutable_electronicstabilitycontrol()->::ElectronicStabilityControlEvent::MergeFrom(from.electronicstabilitycontrol());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExceptionalVehicleState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ExceptionalVehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExceptionalVehicleState::CopyFrom(const ExceptionalVehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExceptionalVehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExceptionalVehicleState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_crashdetected()) {
    if (!this->crashdetected_->IsInitialized()) return false;
  }
  if (has_emergencybraking()) {
    if (!this->emergencybraking_->IsInitialized()) return false;
  }
  if (has_electronicstabilitycontrol()) {
    if (!this->electronicstabilitycontrol_->IsInitialized()) return false;
  }
  return true;
}

void ExceptionalVehicleState::Swap(ExceptionalVehicleState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExceptionalVehicleState::InternalSwap(ExceptionalVehicleState* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  std::swap(tireslippage_, other->tireslippage_);
  std::swap(crashdetected_, other->crashdetected_);
  std::swap(emergencybraking_, other->emergencybraking_);
  std::swap(dynamicstabilitycontrol_, other->dynamicstabilitycontrol_);
  std::swap(antilockbrakingsystem_, other->antilockbrakingsystem_);
  std::swap(electronicstabilitycontrol_, other->electronicstabilitycontrol_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExceptionalVehicleState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExceptionalVehicleState_descriptor_;
  metadata.reflection = ExceptionalVehicleState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExceptionalVehicleState

// required int64 timeStampUTC_ms = 1;
bool ExceptionalVehicleState::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExceptionalVehicleState::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void ExceptionalVehicleState::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExceptionalVehicleState::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 ExceptionalVehicleState::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:ExceptionalVehicleState.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void ExceptionalVehicleState::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:ExceptionalVehicleState.timeStampUTC_ms)
}

// optional .TireSlippageEvent tireSlippage = 2 [deprecated = true];
bool ExceptionalVehicleState::has_tireslippage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExceptionalVehicleState::set_has_tireslippage() {
  _has_bits_[0] |= 0x00000002u;
}
void ExceptionalVehicleState::clear_has_tireslippage() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExceptionalVehicleState::clear_tireslippage() {
  if (tireslippage_ != NULL) tireslippage_->::TireSlippageEvent::Clear();
  clear_has_tireslippage();
}
const ::TireSlippageEvent& ExceptionalVehicleState::tireslippage() const {
  // @@protoc_insertion_point(field_get:ExceptionalVehicleState.tireSlippage)
  return tireslippage_ != NULL ? *tireslippage_ : *default_instance_->tireslippage_;
}
::TireSlippageEvent* ExceptionalVehicleState::mutable_tireslippage() {
  set_has_tireslippage();
  if (tireslippage_ == NULL) {
    tireslippage_ = new ::TireSlippageEvent;
  }
  // @@protoc_insertion_point(field_mutable:ExceptionalVehicleState.tireSlippage)
  return tireslippage_;
}
::TireSlippageEvent* ExceptionalVehicleState::release_tireslippage() {
  // @@protoc_insertion_point(field_release:ExceptionalVehicleState.tireSlippage)
  clear_has_tireslippage();
  ::TireSlippageEvent* temp = tireslippage_;
  tireslippage_ = NULL;
  return temp;
}
void ExceptionalVehicleState::set_allocated_tireslippage(::TireSlippageEvent* tireslippage) {
  delete tireslippage_;
  tireslippage_ = tireslippage;
  if (tireslippage) {
    set_has_tireslippage();
  } else {
    clear_has_tireslippage();
  }
  // @@protoc_insertion_point(field_set_allocated:ExceptionalVehicleState.tireSlippage)
}

// optional .CrashDetectedEvent crashDetected = 3;
bool ExceptionalVehicleState::has_crashdetected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExceptionalVehicleState::set_has_crashdetected() {
  _has_bits_[0] |= 0x00000004u;
}
void ExceptionalVehicleState::clear_has_crashdetected() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExceptionalVehicleState::clear_crashdetected() {
  if (crashdetected_ != NULL) crashdetected_->::CrashDetectedEvent::Clear();
  clear_has_crashdetected();
}
const ::CrashDetectedEvent& ExceptionalVehicleState::crashdetected() const {
  // @@protoc_insertion_point(field_get:ExceptionalVehicleState.crashDetected)
  return crashdetected_ != NULL ? *crashdetected_ : *default_instance_->crashdetected_;
}
::CrashDetectedEvent* ExceptionalVehicleState::mutable_crashdetected() {
  set_has_crashdetected();
  if (crashdetected_ == NULL) {
    crashdetected_ = new ::CrashDetectedEvent;
  }
  // @@protoc_insertion_point(field_mutable:ExceptionalVehicleState.crashDetected)
  return crashdetected_;
}
::CrashDetectedEvent* ExceptionalVehicleState::release_crashdetected() {
  // @@protoc_insertion_point(field_release:ExceptionalVehicleState.crashDetected)
  clear_has_crashdetected();
  ::CrashDetectedEvent* temp = crashdetected_;
  crashdetected_ = NULL;
  return temp;
}
void ExceptionalVehicleState::set_allocated_crashdetected(::CrashDetectedEvent* crashdetected) {
  delete crashdetected_;
  crashdetected_ = crashdetected;
  if (crashdetected) {
    set_has_crashdetected();
  } else {
    clear_has_crashdetected();
  }
  // @@protoc_insertion_point(field_set_allocated:ExceptionalVehicleState.crashDetected)
}

// optional .EmergencyBrakingEvent emergencyBraking = 4;
bool ExceptionalVehicleState::has_emergencybraking() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ExceptionalVehicleState::set_has_emergencybraking() {
  _has_bits_[0] |= 0x00000008u;
}
void ExceptionalVehicleState::clear_has_emergencybraking() {
  _has_bits_[0] &= ~0x00000008u;
}
void ExceptionalVehicleState::clear_emergencybraking() {
  if (emergencybraking_ != NULL) emergencybraking_->::EmergencyBrakingEvent::Clear();
  clear_has_emergencybraking();
}
const ::EmergencyBrakingEvent& ExceptionalVehicleState::emergencybraking() const {
  // @@protoc_insertion_point(field_get:ExceptionalVehicleState.emergencyBraking)
  return emergencybraking_ != NULL ? *emergencybraking_ : *default_instance_->emergencybraking_;
}
::EmergencyBrakingEvent* ExceptionalVehicleState::mutable_emergencybraking() {
  set_has_emergencybraking();
  if (emergencybraking_ == NULL) {
    emergencybraking_ = new ::EmergencyBrakingEvent;
  }
  // @@protoc_insertion_point(field_mutable:ExceptionalVehicleState.emergencyBraking)
  return emergencybraking_;
}
::EmergencyBrakingEvent* ExceptionalVehicleState::release_emergencybraking() {
  // @@protoc_insertion_point(field_release:ExceptionalVehicleState.emergencyBraking)
  clear_has_emergencybraking();
  ::EmergencyBrakingEvent* temp = emergencybraking_;
  emergencybraking_ = NULL;
  return temp;
}
void ExceptionalVehicleState::set_allocated_emergencybraking(::EmergencyBrakingEvent* emergencybraking) {
  delete emergencybraking_;
  emergencybraking_ = emergencybraking;
  if (emergencybraking) {
    set_has_emergencybraking();
  } else {
    clear_has_emergencybraking();
  }
  // @@protoc_insertion_point(field_set_allocated:ExceptionalVehicleState.emergencyBraking)
}

// optional .DynamicStabilityControlEvent dynamicStabilityControl = 5 [deprecated = true];
bool ExceptionalVehicleState::has_dynamicstabilitycontrol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ExceptionalVehicleState::set_has_dynamicstabilitycontrol() {
  _has_bits_[0] |= 0x00000010u;
}
void ExceptionalVehicleState::clear_has_dynamicstabilitycontrol() {
  _has_bits_[0] &= ~0x00000010u;
}
void ExceptionalVehicleState::clear_dynamicstabilitycontrol() {
  if (dynamicstabilitycontrol_ != NULL) dynamicstabilitycontrol_->::DynamicStabilityControlEvent::Clear();
  clear_has_dynamicstabilitycontrol();
}
const ::DynamicStabilityControlEvent& ExceptionalVehicleState::dynamicstabilitycontrol() const {
  // @@protoc_insertion_point(field_get:ExceptionalVehicleState.dynamicStabilityControl)
  return dynamicstabilitycontrol_ != NULL ? *dynamicstabilitycontrol_ : *default_instance_->dynamicstabilitycontrol_;
}
::DynamicStabilityControlEvent* ExceptionalVehicleState::mutable_dynamicstabilitycontrol() {
  set_has_dynamicstabilitycontrol();
  if (dynamicstabilitycontrol_ == NULL) {
    dynamicstabilitycontrol_ = new ::DynamicStabilityControlEvent;
  }
  // @@protoc_insertion_point(field_mutable:ExceptionalVehicleState.dynamicStabilityControl)
  return dynamicstabilitycontrol_;
}
::DynamicStabilityControlEvent* ExceptionalVehicleState::release_dynamicstabilitycontrol() {
  // @@protoc_insertion_point(field_release:ExceptionalVehicleState.dynamicStabilityControl)
  clear_has_dynamicstabilitycontrol();
  ::DynamicStabilityControlEvent* temp = dynamicstabilitycontrol_;
  dynamicstabilitycontrol_ = NULL;
  return temp;
}
void ExceptionalVehicleState::set_allocated_dynamicstabilitycontrol(::DynamicStabilityControlEvent* dynamicstabilitycontrol) {
  delete dynamicstabilitycontrol_;
  dynamicstabilitycontrol_ = dynamicstabilitycontrol;
  if (dynamicstabilitycontrol) {
    set_has_dynamicstabilitycontrol();
  } else {
    clear_has_dynamicstabilitycontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:ExceptionalVehicleState.dynamicStabilityControl)
}

// optional .AntiLockBrakingSystemEvent antiLockBrakingSystem = 6 [deprecated = true];
bool ExceptionalVehicleState::has_antilockbrakingsystem() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ExceptionalVehicleState::set_has_antilockbrakingsystem() {
  _has_bits_[0] |= 0x00000020u;
}
void ExceptionalVehicleState::clear_has_antilockbrakingsystem() {
  _has_bits_[0] &= ~0x00000020u;
}
void ExceptionalVehicleState::clear_antilockbrakingsystem() {
  if (antilockbrakingsystem_ != NULL) antilockbrakingsystem_->::AntiLockBrakingSystemEvent::Clear();
  clear_has_antilockbrakingsystem();
}
const ::AntiLockBrakingSystemEvent& ExceptionalVehicleState::antilockbrakingsystem() const {
  // @@protoc_insertion_point(field_get:ExceptionalVehicleState.antiLockBrakingSystem)
  return antilockbrakingsystem_ != NULL ? *antilockbrakingsystem_ : *default_instance_->antilockbrakingsystem_;
}
::AntiLockBrakingSystemEvent* ExceptionalVehicleState::mutable_antilockbrakingsystem() {
  set_has_antilockbrakingsystem();
  if (antilockbrakingsystem_ == NULL) {
    antilockbrakingsystem_ = new ::AntiLockBrakingSystemEvent;
  }
  // @@protoc_insertion_point(field_mutable:ExceptionalVehicleState.antiLockBrakingSystem)
  return antilockbrakingsystem_;
}
::AntiLockBrakingSystemEvent* ExceptionalVehicleState::release_antilockbrakingsystem() {
  // @@protoc_insertion_point(field_release:ExceptionalVehicleState.antiLockBrakingSystem)
  clear_has_antilockbrakingsystem();
  ::AntiLockBrakingSystemEvent* temp = antilockbrakingsystem_;
  antilockbrakingsystem_ = NULL;
  return temp;
}
void ExceptionalVehicleState::set_allocated_antilockbrakingsystem(::AntiLockBrakingSystemEvent* antilockbrakingsystem) {
  delete antilockbrakingsystem_;
  antilockbrakingsystem_ = antilockbrakingsystem;
  if (antilockbrakingsystem) {
    set_has_antilockbrakingsystem();
  } else {
    clear_has_antilockbrakingsystem();
  }
  // @@protoc_insertion_point(field_set_allocated:ExceptionalVehicleState.antiLockBrakingSystem)
}

// optional .ElectronicStabilityControlEvent electronicStabilityControl = 7;
bool ExceptionalVehicleState::has_electronicstabilitycontrol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ExceptionalVehicleState::set_has_electronicstabilitycontrol() {
  _has_bits_[0] |= 0x00000040u;
}
void ExceptionalVehicleState::clear_has_electronicstabilitycontrol() {
  _has_bits_[0] &= ~0x00000040u;
}
void ExceptionalVehicleState::clear_electronicstabilitycontrol() {
  if (electronicstabilitycontrol_ != NULL) electronicstabilitycontrol_->::ElectronicStabilityControlEvent::Clear();
  clear_has_electronicstabilitycontrol();
}
const ::ElectronicStabilityControlEvent& ExceptionalVehicleState::electronicstabilitycontrol() const {
  // @@protoc_insertion_point(field_get:ExceptionalVehicleState.electronicStabilityControl)
  return electronicstabilitycontrol_ != NULL ? *electronicstabilitycontrol_ : *default_instance_->electronicstabilitycontrol_;
}
::ElectronicStabilityControlEvent* ExceptionalVehicleState::mutable_electronicstabilitycontrol() {
  set_has_electronicstabilitycontrol();
  if (electronicstabilitycontrol_ == NULL) {
    electronicstabilitycontrol_ = new ::ElectronicStabilityControlEvent;
  }
  // @@protoc_insertion_point(field_mutable:ExceptionalVehicleState.electronicStabilityControl)
  return electronicstabilitycontrol_;
}
::ElectronicStabilityControlEvent* ExceptionalVehicleState::release_electronicstabilitycontrol() {
  // @@protoc_insertion_point(field_release:ExceptionalVehicleState.electronicStabilityControl)
  clear_has_electronicstabilitycontrol();
  ::ElectronicStabilityControlEvent* temp = electronicstabilitycontrol_;
  electronicstabilitycontrol_ = NULL;
  return temp;
}
void ExceptionalVehicleState::set_allocated_electronicstabilitycontrol(::ElectronicStabilityControlEvent* electronicstabilitycontrol) {
  delete electronicstabilitycontrol_;
  electronicstabilitycontrol_ = electronicstabilitycontrol;
  if (electronicstabilitycontrol) {
    set_has_electronicstabilitycontrol();
  } else {
    clear_has_electronicstabilitycontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:ExceptionalVehicleState.electronicStabilityControl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProprietaryInfo::kTimeStampUTCMsFieldNumber;
const int ProprietaryInfo::kKeyValuePairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProprietaryInfo::ProprietaryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProprietaryInfo)
}

void ProprietaryInfo::InitAsDefaultInstance() {
}

ProprietaryInfo::ProprietaryInfo(const ProprietaryInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProprietaryInfo)
}

void ProprietaryInfo::SharedCtor() {
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProprietaryInfo::~ProprietaryInfo() {
  // @@protoc_insertion_point(destructor:ProprietaryInfo)
  SharedDtor();
}

void ProprietaryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProprietaryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProprietaryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProprietaryInfo_descriptor_;
}

const ProprietaryInfo& ProprietaryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

ProprietaryInfo* ProprietaryInfo::default_instance_ = NULL;

ProprietaryInfo* ProprietaryInfo::New(::google::protobuf::Arena* arena) const {
  ProprietaryInfo* n = new ProprietaryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProprietaryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProprietaryInfo)
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  keyvaluepairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProprietaryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProprietaryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keyValuePairs;
        break;
      }

      // repeated .KeyValuePairString keyValuePairs = 2;
      case 2: {
        if (tag == 18) {
         parse_keyValuePairs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_keyValuePairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keyvaluepairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_keyValuePairs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProprietaryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProprietaryInfo)
  return false;
#undef DO_
}

void ProprietaryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProprietaryInfo)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // repeated .KeyValuePairString keyValuePairs = 2;
  for (unsigned int i = 0, n = this->keyvaluepairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->keyvaluepairs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProprietaryInfo)
}

::google::protobuf::uint8* ProprietaryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProprietaryInfo)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // repeated .KeyValuePairString keyValuePairs = 2;
  for (unsigned int i = 0, n = this->keyvaluepairs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->keyvaluepairs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProprietaryInfo)
  return target;
}

int ProprietaryInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ProprietaryInfo)
  int total_size = 0;

  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }
  // repeated .KeyValuePairString keyValuePairs = 2;
  total_size += 1 * this->keyvaluepairs_size();
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyvaluepairs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProprietaryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProprietaryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProprietaryInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProprietaryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProprietaryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProprietaryInfo)
    MergeFrom(*source);
  }
}

void ProprietaryInfo::MergeFrom(const ProprietaryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProprietaryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  keyvaluepairs_.MergeFrom(from.keyvaluepairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProprietaryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProprietaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProprietaryInfo::CopyFrom(const ProprietaryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProprietaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProprietaryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->keyvaluepairs())) return false;
  return true;
}

void ProprietaryInfo::Swap(ProprietaryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProprietaryInfo::InternalSwap(ProprietaryInfo* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  keyvaluepairs_.UnsafeArenaSwap(&other->keyvaluepairs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProprietaryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProprietaryInfo_descriptor_;
  metadata.reflection = ProprietaryInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProprietaryInfo

// required int64 timeStampUTC_ms = 1;
bool ProprietaryInfo::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProprietaryInfo::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void ProprietaryInfo::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProprietaryInfo::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 ProprietaryInfo::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:ProprietaryInfo.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void ProprietaryInfo::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:ProprietaryInfo.timeStampUTC_ms)
}

// repeated .KeyValuePairString keyValuePairs = 2;
int ProprietaryInfo::keyvaluepairs_size() const {
  return keyvaluepairs_.size();
}
void ProprietaryInfo::clear_keyvaluepairs() {
  keyvaluepairs_.Clear();
}
const ::KeyValuePairString& ProprietaryInfo::keyvaluepairs(int index) const {
  // @@protoc_insertion_point(field_get:ProprietaryInfo.keyValuePairs)
  return keyvaluepairs_.Get(index);
}
::KeyValuePairString* ProprietaryInfo::mutable_keyvaluepairs(int index) {
  // @@protoc_insertion_point(field_mutable:ProprietaryInfo.keyValuePairs)
  return keyvaluepairs_.Mutable(index);
}
::KeyValuePairString* ProprietaryInfo::add_keyvaluepairs() {
  // @@protoc_insertion_point(field_add:ProprietaryInfo.keyValuePairs)
  return keyvaluepairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::KeyValuePairString >*
ProprietaryInfo::mutable_keyvaluepairs() {
  // @@protoc_insertion_point(field_mutable_list:ProprietaryInfo.keyValuePairs)
  return &keyvaluepairs_;
}
const ::google::protobuf::RepeatedPtrField< ::KeyValuePairString >&
ProprietaryInfo::keyvaluepairs() const {
  // @@protoc_insertion_point(field_list:ProprietaryInfo.keyValuePairs)
  return keyvaluepairs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* EnvironmentStatus_LightConditionsEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentStatus_LightConditionsEnum_descriptor_;
}
bool EnvironmentStatus_LightConditionsEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvironmentStatus_LightConditionsEnum EnvironmentStatus::GENERAL_DAYLIGHT;
const EnvironmentStatus_LightConditionsEnum EnvironmentStatus::GENERAL_DARK;
const EnvironmentStatus_LightConditionsEnum EnvironmentStatus::DAYLIGHT_SUN;
const EnvironmentStatus_LightConditionsEnum EnvironmentStatus::DAYLIGHT_CLOUD;
const EnvironmentStatus_LightConditionsEnum EnvironmentStatus::DUSK_OR_DAWN;
const EnvironmentStatus_LightConditionsEnum EnvironmentStatus::NIGHT_LUMINATED;
const EnvironmentStatus_LightConditionsEnum EnvironmentStatus::NIGHT_DARK;
const EnvironmentStatus_LightConditionsEnum EnvironmentStatus::LightConditionsEnum_MIN;
const EnvironmentStatus_LightConditionsEnum EnvironmentStatus::LightConditionsEnum_MAX;
const int EnvironmentStatus::LightConditionsEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnvironmentStatus_PrecipitationEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentStatus_PrecipitationEnum_descriptor_;
}
bool EnvironmentStatus_PrecipitationEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvironmentStatus_PrecipitationEnum EnvironmentStatus::NONE;
const EnvironmentStatus_PrecipitationEnum EnvironmentStatus::RAIN;
const EnvironmentStatus_PrecipitationEnum EnvironmentStatus::HAIL;
const EnvironmentStatus_PrecipitationEnum EnvironmentStatus::SNOW;
const EnvironmentStatus_PrecipitationEnum EnvironmentStatus::PrecipitationEnum_MIN;
const EnvironmentStatus_PrecipitationEnum EnvironmentStatus::PrecipitationEnum_MAX;
const int EnvironmentStatus::PrecipitationEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnvironmentStatus_RoadSurfaceTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentStatus_RoadSurfaceTypeEnum_descriptor_;
}
bool EnvironmentStatus_RoadSurfaceTypeEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvironmentStatus_RoadSurfaceTypeEnum EnvironmentStatus::ASPHALT;
const EnvironmentStatus_RoadSurfaceTypeEnum EnvironmentStatus::CONCRETE;
const EnvironmentStatus_RoadSurfaceTypeEnum EnvironmentStatus::PAVED;
const EnvironmentStatus_RoadSurfaceTypeEnum EnvironmentStatus::GRAVEL;
const EnvironmentStatus_RoadSurfaceTypeEnum EnvironmentStatus::ICEORSNOW;
const EnvironmentStatus_RoadSurfaceTypeEnum EnvironmentStatus::UNKNOWN;
const EnvironmentStatus_RoadSurfaceTypeEnum EnvironmentStatus::RoadSurfaceTypeEnum_MIN;
const EnvironmentStatus_RoadSurfaceTypeEnum EnvironmentStatus::RoadSurfaceTypeEnum_MAX;
const int EnvironmentStatus::RoadSurfaceTypeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvironmentStatus::kTimeStampUTCMsFieldNumber;
const int EnvironmentStatus::kLightConditionsFieldNumber;
const int EnvironmentStatus::kExternalAirTemperatureDegCFieldNumber;
const int EnvironmentStatus::kExternalAirTemperatureAccuracyDegCFieldNumber;
const int EnvironmentStatus::kPrecipitationFieldNumber;
const int EnvironmentStatus::kVisibleDistanceMFieldNumber;
const int EnvironmentStatus::kRoadSurfaceTemperatureDegCFieldNumber;
const int EnvironmentStatus::kRoadSurfaceTemperatureAccuracyDegCFieldNumber;
const int EnvironmentStatus::kRoadSurfaceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvironmentStatus::EnvironmentStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnvironmentStatus)
}

void EnvironmentStatus::InitAsDefaultInstance() {
}

EnvironmentStatus::EnvironmentStatus(const EnvironmentStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EnvironmentStatus)
}

void EnvironmentStatus::SharedCtor() {
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  lightconditions_ = 1;
  externalairtemperature_degc_ = 0;
  externalairtemperatureaccuracy_degc_ = 0;
  precipitation_ = 1;
  visibledistance_m_ = 0;
  roadsurfacetemperature_degc_ = 0;
  roadsurfacetemperatureaccuracy_degc_ = 0;
  roadsurfacetype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvironmentStatus::~EnvironmentStatus() {
  // @@protoc_insertion_point(destructor:EnvironmentStatus)
  SharedDtor();
}

void EnvironmentStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnvironmentStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvironmentStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentStatus_descriptor_;
}

const EnvironmentStatus& EnvironmentStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

EnvironmentStatus* EnvironmentStatus::default_instance_ = NULL;

EnvironmentStatus* EnvironmentStatus::New(::google::protobuf::Arena* arena) const {
  EnvironmentStatus* n = new EnvironmentStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnvironmentStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:EnvironmentStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EnvironmentStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnvironmentStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(timestamputc_ms_, externalairtemperature_degc_);
    ZR_(externalairtemperatureaccuracy_degc_, roadsurfacetemperatureaccuracy_degc_);
    lightconditions_ = 1;
    precipitation_ = 1;
  }
  roadsurfacetype_ = 1;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EnvironmentStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnvironmentStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lightConditions;
        break;
      }

      // optional .EnvironmentStatus.LightConditionsEnum lightConditions = 2;
      case 2: {
        if (tag == 16) {
         parse_lightConditions:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EnvironmentStatus_LightConditionsEnum_IsValid(value)) {
            set_lightconditions(static_cast< ::EnvironmentStatus_LightConditionsEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_externalAirTemperature_DegC;
        break;
      }

      // optional double externalAirTemperature_DegC = 3;
      case 3: {
        if (tag == 25) {
         parse_externalAirTemperature_DegC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &externalairtemperature_degc_)));
          set_has_externalairtemperature_degc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_externalAirTemperatureAccuracy_DegC;
        break;
      }

      // optional double externalAirTemperatureAccuracy_DegC = 4;
      case 4: {
        if (tag == 33) {
         parse_externalAirTemperatureAccuracy_DegC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &externalairtemperatureaccuracy_degc_)));
          set_has_externalairtemperatureaccuracy_degc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_precipitation;
        break;
      }

      // optional .EnvironmentStatus.PrecipitationEnum precipitation = 5;
      case 5: {
        if (tag == 40) {
         parse_precipitation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EnvironmentStatus_PrecipitationEnum_IsValid(value)) {
            set_precipitation(static_cast< ::EnvironmentStatus_PrecipitationEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_visibleDistance_m;
        break;
      }

      // optional double visibleDistance_m = 6;
      case 6: {
        if (tag == 49) {
         parse_visibleDistance_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &visibledistance_m_)));
          set_has_visibledistance_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_roadSurfaceTemperature_DegC;
        break;
      }

      // optional double roadSurfaceTemperature_DegC = 7;
      case 7: {
        if (tag == 57) {
         parse_roadSurfaceTemperature_DegC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roadsurfacetemperature_degc_)));
          set_has_roadsurfacetemperature_degc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_roadSurfaceTemperatureAccuracy_DegC;
        break;
      }

      // optional double roadSurfaceTemperatureAccuracy_DegC = 8;
      case 8: {
        if (tag == 65) {
         parse_roadSurfaceTemperatureAccuracy_DegC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roadsurfacetemperatureaccuracy_degc_)));
          set_has_roadsurfacetemperatureaccuracy_degc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_roadSurfaceType;
        break;
      }

      // optional .EnvironmentStatus.RoadSurfaceTypeEnum roadSurfaceType = 9;
      case 9: {
        if (tag == 72) {
         parse_roadSurfaceType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EnvironmentStatus_RoadSurfaceTypeEnum_IsValid(value)) {
            set_roadsurfacetype(static_cast< ::EnvironmentStatus_RoadSurfaceTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnvironmentStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnvironmentStatus)
  return false;
#undef DO_
}

void EnvironmentStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnvironmentStatus)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // optional .EnvironmentStatus.LightConditionsEnum lightConditions = 2;
  if (has_lightconditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lightconditions(), output);
  }

  // optional double externalAirTemperature_DegC = 3;
  if (has_externalairtemperature_degc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->externalairtemperature_degc(), output);
  }

  // optional double externalAirTemperatureAccuracy_DegC = 4;
  if (has_externalairtemperatureaccuracy_degc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->externalairtemperatureaccuracy_degc(), output);
  }

  // optional .EnvironmentStatus.PrecipitationEnum precipitation = 5;
  if (has_precipitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->precipitation(), output);
  }

  // optional double visibleDistance_m = 6;
  if (has_visibledistance_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->visibledistance_m(), output);
  }

  // optional double roadSurfaceTemperature_DegC = 7;
  if (has_roadsurfacetemperature_degc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->roadsurfacetemperature_degc(), output);
  }

  // optional double roadSurfaceTemperatureAccuracy_DegC = 8;
  if (has_roadsurfacetemperatureaccuracy_degc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->roadsurfacetemperatureaccuracy_degc(), output);
  }

  // optional .EnvironmentStatus.RoadSurfaceTypeEnum roadSurfaceType = 9;
  if (has_roadsurfacetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->roadsurfacetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnvironmentStatus)
}

::google::protobuf::uint8* EnvironmentStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnvironmentStatus)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // optional .EnvironmentStatus.LightConditionsEnum lightConditions = 2;
  if (has_lightconditions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lightconditions(), target);
  }

  // optional double externalAirTemperature_DegC = 3;
  if (has_externalairtemperature_degc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->externalairtemperature_degc(), target);
  }

  // optional double externalAirTemperatureAccuracy_DegC = 4;
  if (has_externalairtemperatureaccuracy_degc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->externalairtemperatureaccuracy_degc(), target);
  }

  // optional .EnvironmentStatus.PrecipitationEnum precipitation = 5;
  if (has_precipitation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->precipitation(), target);
  }

  // optional double visibleDistance_m = 6;
  if (has_visibledistance_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->visibledistance_m(), target);
  }

  // optional double roadSurfaceTemperature_DegC = 7;
  if (has_roadsurfacetemperature_degc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->roadsurfacetemperature_degc(), target);
  }

  // optional double roadSurfaceTemperatureAccuracy_DegC = 8;
  if (has_roadsurfacetemperatureaccuracy_degc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->roadsurfacetemperatureaccuracy_degc(), target);
  }

  // optional .EnvironmentStatus.RoadSurfaceTypeEnum roadSurfaceType = 9;
  if (has_roadsurfacetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->roadsurfacetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnvironmentStatus)
  return target;
}

int EnvironmentStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:EnvironmentStatus)
  int total_size = 0;

  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional .EnvironmentStatus.LightConditionsEnum lightConditions = 2;
    if (has_lightconditions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lightconditions());
    }

    // optional double externalAirTemperature_DegC = 3;
    if (has_externalairtemperature_degc()) {
      total_size += 1 + 8;
    }

    // optional double externalAirTemperatureAccuracy_DegC = 4;
    if (has_externalairtemperatureaccuracy_degc()) {
      total_size += 1 + 8;
    }

    // optional .EnvironmentStatus.PrecipitationEnum precipitation = 5;
    if (has_precipitation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->precipitation());
    }

    // optional double visibleDistance_m = 6;
    if (has_visibledistance_m()) {
      total_size += 1 + 8;
    }

    // optional double roadSurfaceTemperature_DegC = 7;
    if (has_roadsurfacetemperature_degc()) {
      total_size += 1 + 8;
    }

    // optional double roadSurfaceTemperatureAccuracy_DegC = 8;
    if (has_roadsurfacetemperatureaccuracy_degc()) {
      total_size += 1 + 8;
    }

  }
  // optional .EnvironmentStatus.RoadSurfaceTypeEnum roadSurfaceType = 9;
  if (has_roadsurfacetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->roadsurfacetype());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvironmentStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnvironmentStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnvironmentStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvironmentStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnvironmentStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnvironmentStatus)
    MergeFrom(*source);
  }
}

void EnvironmentStatus::MergeFrom(const EnvironmentStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnvironmentStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
    if (from.has_lightconditions()) {
      set_lightconditions(from.lightconditions());
    }
    if (from.has_externalairtemperature_degc()) {
      set_externalairtemperature_degc(from.externalairtemperature_degc());
    }
    if (from.has_externalairtemperatureaccuracy_degc()) {
      set_externalairtemperatureaccuracy_degc(from.externalairtemperatureaccuracy_degc());
    }
    if (from.has_precipitation()) {
      set_precipitation(from.precipitation());
    }
    if (from.has_visibledistance_m()) {
      set_visibledistance_m(from.visibledistance_m());
    }
    if (from.has_roadsurfacetemperature_degc()) {
      set_roadsurfacetemperature_degc(from.roadsurfacetemperature_degc());
    }
    if (from.has_roadsurfacetemperatureaccuracy_degc()) {
      set_roadsurfacetemperatureaccuracy_degc(from.roadsurfacetemperatureaccuracy_degc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roadsurfacetype()) {
      set_roadsurfacetype(from.roadsurfacetype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EnvironmentStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnvironmentStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentStatus::CopyFrom(const EnvironmentStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnvironmentStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnvironmentStatus::Swap(EnvironmentStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvironmentStatus::InternalSwap(EnvironmentStatus* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  std::swap(lightconditions_, other->lightconditions_);
  std::swap(externalairtemperature_degc_, other->externalairtemperature_degc_);
  std::swap(externalairtemperatureaccuracy_degc_, other->externalairtemperatureaccuracy_degc_);
  std::swap(precipitation_, other->precipitation_);
  std::swap(visibledistance_m_, other->visibledistance_m_);
  std::swap(roadsurfacetemperature_degc_, other->roadsurfacetemperature_degc_);
  std::swap(roadsurfacetemperatureaccuracy_degc_, other->roadsurfacetemperatureaccuracy_degc_);
  std::swap(roadsurfacetype_, other->roadsurfacetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnvironmentStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnvironmentStatus_descriptor_;
  metadata.reflection = EnvironmentStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnvironmentStatus

// required int64 timeStampUTC_ms = 1;
bool EnvironmentStatus::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnvironmentStatus::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void EnvironmentStatus::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnvironmentStatus::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 EnvironmentStatus::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:EnvironmentStatus.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void EnvironmentStatus::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:EnvironmentStatus.timeStampUTC_ms)
}

// optional .EnvironmentStatus.LightConditionsEnum lightConditions = 2;
bool EnvironmentStatus::has_lightconditions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnvironmentStatus::set_has_lightconditions() {
  _has_bits_[0] |= 0x00000002u;
}
void EnvironmentStatus::clear_has_lightconditions() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnvironmentStatus::clear_lightconditions() {
  lightconditions_ = 1;
  clear_has_lightconditions();
}
 ::EnvironmentStatus_LightConditionsEnum EnvironmentStatus::lightconditions() const {
  // @@protoc_insertion_point(field_get:EnvironmentStatus.lightConditions)
  return static_cast< ::EnvironmentStatus_LightConditionsEnum >(lightconditions_);
}
 void EnvironmentStatus::set_lightconditions(::EnvironmentStatus_LightConditionsEnum value) {
  assert(::EnvironmentStatus_LightConditionsEnum_IsValid(value));
  set_has_lightconditions();
  lightconditions_ = value;
  // @@protoc_insertion_point(field_set:EnvironmentStatus.lightConditions)
}

// optional double externalAirTemperature_DegC = 3;
bool EnvironmentStatus::has_externalairtemperature_degc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EnvironmentStatus::set_has_externalairtemperature_degc() {
  _has_bits_[0] |= 0x00000004u;
}
void EnvironmentStatus::clear_has_externalairtemperature_degc() {
  _has_bits_[0] &= ~0x00000004u;
}
void EnvironmentStatus::clear_externalairtemperature_degc() {
  externalairtemperature_degc_ = 0;
  clear_has_externalairtemperature_degc();
}
 double EnvironmentStatus::externalairtemperature_degc() const {
  // @@protoc_insertion_point(field_get:EnvironmentStatus.externalAirTemperature_DegC)
  return externalairtemperature_degc_;
}
 void EnvironmentStatus::set_externalairtemperature_degc(double value) {
  set_has_externalairtemperature_degc();
  externalairtemperature_degc_ = value;
  // @@protoc_insertion_point(field_set:EnvironmentStatus.externalAirTemperature_DegC)
}

// optional double externalAirTemperatureAccuracy_DegC = 4;
bool EnvironmentStatus::has_externalairtemperatureaccuracy_degc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EnvironmentStatus::set_has_externalairtemperatureaccuracy_degc() {
  _has_bits_[0] |= 0x00000008u;
}
void EnvironmentStatus::clear_has_externalairtemperatureaccuracy_degc() {
  _has_bits_[0] &= ~0x00000008u;
}
void EnvironmentStatus::clear_externalairtemperatureaccuracy_degc() {
  externalairtemperatureaccuracy_degc_ = 0;
  clear_has_externalairtemperatureaccuracy_degc();
}
 double EnvironmentStatus::externalairtemperatureaccuracy_degc() const {
  // @@protoc_insertion_point(field_get:EnvironmentStatus.externalAirTemperatureAccuracy_DegC)
  return externalairtemperatureaccuracy_degc_;
}
 void EnvironmentStatus::set_externalairtemperatureaccuracy_degc(double value) {
  set_has_externalairtemperatureaccuracy_degc();
  externalairtemperatureaccuracy_degc_ = value;
  // @@protoc_insertion_point(field_set:EnvironmentStatus.externalAirTemperatureAccuracy_DegC)
}

// optional .EnvironmentStatus.PrecipitationEnum precipitation = 5;
bool EnvironmentStatus::has_precipitation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EnvironmentStatus::set_has_precipitation() {
  _has_bits_[0] |= 0x00000010u;
}
void EnvironmentStatus::clear_has_precipitation() {
  _has_bits_[0] &= ~0x00000010u;
}
void EnvironmentStatus::clear_precipitation() {
  precipitation_ = 1;
  clear_has_precipitation();
}
 ::EnvironmentStatus_PrecipitationEnum EnvironmentStatus::precipitation() const {
  // @@protoc_insertion_point(field_get:EnvironmentStatus.precipitation)
  return static_cast< ::EnvironmentStatus_PrecipitationEnum >(precipitation_);
}
 void EnvironmentStatus::set_precipitation(::EnvironmentStatus_PrecipitationEnum value) {
  assert(::EnvironmentStatus_PrecipitationEnum_IsValid(value));
  set_has_precipitation();
  precipitation_ = value;
  // @@protoc_insertion_point(field_set:EnvironmentStatus.precipitation)
}

// optional double visibleDistance_m = 6;
bool EnvironmentStatus::has_visibledistance_m() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EnvironmentStatus::set_has_visibledistance_m() {
  _has_bits_[0] |= 0x00000020u;
}
void EnvironmentStatus::clear_has_visibledistance_m() {
  _has_bits_[0] &= ~0x00000020u;
}
void EnvironmentStatus::clear_visibledistance_m() {
  visibledistance_m_ = 0;
  clear_has_visibledistance_m();
}
 double EnvironmentStatus::visibledistance_m() const {
  // @@protoc_insertion_point(field_get:EnvironmentStatus.visibleDistance_m)
  return visibledistance_m_;
}
 void EnvironmentStatus::set_visibledistance_m(double value) {
  set_has_visibledistance_m();
  visibledistance_m_ = value;
  // @@protoc_insertion_point(field_set:EnvironmentStatus.visibleDistance_m)
}

// optional double roadSurfaceTemperature_DegC = 7;
bool EnvironmentStatus::has_roadsurfacetemperature_degc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EnvironmentStatus::set_has_roadsurfacetemperature_degc() {
  _has_bits_[0] |= 0x00000040u;
}
void EnvironmentStatus::clear_has_roadsurfacetemperature_degc() {
  _has_bits_[0] &= ~0x00000040u;
}
void EnvironmentStatus::clear_roadsurfacetemperature_degc() {
  roadsurfacetemperature_degc_ = 0;
  clear_has_roadsurfacetemperature_degc();
}
 double EnvironmentStatus::roadsurfacetemperature_degc() const {
  // @@protoc_insertion_point(field_get:EnvironmentStatus.roadSurfaceTemperature_DegC)
  return roadsurfacetemperature_degc_;
}
 void EnvironmentStatus::set_roadsurfacetemperature_degc(double value) {
  set_has_roadsurfacetemperature_degc();
  roadsurfacetemperature_degc_ = value;
  // @@protoc_insertion_point(field_set:EnvironmentStatus.roadSurfaceTemperature_DegC)
}

// optional double roadSurfaceTemperatureAccuracy_DegC = 8;
bool EnvironmentStatus::has_roadsurfacetemperatureaccuracy_degc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EnvironmentStatus::set_has_roadsurfacetemperatureaccuracy_degc() {
  _has_bits_[0] |= 0x00000080u;
}
void EnvironmentStatus::clear_has_roadsurfacetemperatureaccuracy_degc() {
  _has_bits_[0] &= ~0x00000080u;
}
void EnvironmentStatus::clear_roadsurfacetemperatureaccuracy_degc() {
  roadsurfacetemperatureaccuracy_degc_ = 0;
  clear_has_roadsurfacetemperatureaccuracy_degc();
}
 double EnvironmentStatus::roadsurfacetemperatureaccuracy_degc() const {
  // @@protoc_insertion_point(field_get:EnvironmentStatus.roadSurfaceTemperatureAccuracy_DegC)
  return roadsurfacetemperatureaccuracy_degc_;
}
 void EnvironmentStatus::set_roadsurfacetemperatureaccuracy_degc(double value) {
  set_has_roadsurfacetemperatureaccuracy_degc();
  roadsurfacetemperatureaccuracy_degc_ = value;
  // @@protoc_insertion_point(field_set:EnvironmentStatus.roadSurfaceTemperatureAccuracy_DegC)
}

// optional .EnvironmentStatus.RoadSurfaceTypeEnum roadSurfaceType = 9;
bool EnvironmentStatus::has_roadsurfacetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EnvironmentStatus::set_has_roadsurfacetype() {
  _has_bits_[0] |= 0x00000100u;
}
void EnvironmentStatus::clear_has_roadsurfacetype() {
  _has_bits_[0] &= ~0x00000100u;
}
void EnvironmentStatus::clear_roadsurfacetype() {
  roadsurfacetype_ = 1;
  clear_has_roadsurfacetype();
}
 ::EnvironmentStatus_RoadSurfaceTypeEnum EnvironmentStatus::roadsurfacetype() const {
  // @@protoc_insertion_point(field_get:EnvironmentStatus.roadSurfaceType)
  return static_cast< ::EnvironmentStatus_RoadSurfaceTypeEnum >(roadsurfacetype_);
}
 void EnvironmentStatus::set_roadsurfacetype(::EnvironmentStatus_RoadSurfaceTypeEnum value) {
  assert(::EnvironmentStatus_RoadSurfaceTypeEnum_IsValid(value));
  set_has_roadsurfacetype();
  roadsurfacetype_ = value;
  // @@protoc_insertion_point(field_set:EnvironmentStatus.roadSurfaceType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TrafficLightStatus_LightStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLightStatus_LightStatus_descriptor_;
}
bool TrafficLightStatus_LightStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLightStatus_LightStatus TrafficLightStatus::OFF;
const TrafficLightStatus_LightStatus TrafficLightStatus::ON;
const TrafficLightStatus_LightStatus TrafficLightStatus::BLINKING;
const TrafficLightStatus_LightStatus TrafficLightStatus::LightStatus_MIN;
const TrafficLightStatus_LightStatus TrafficLightStatus::LightStatus_MAX;
const int TrafficLightStatus::LightStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightStatus::kGreenFieldNumber;
const int TrafficLightStatus::kYellowFieldNumber;
const int TrafficLightStatus::kRedFieldNumber;
const int TrafficLightStatus::kOtherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightStatus::TrafficLightStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrafficLightStatus)
}

void TrafficLightStatus::InitAsDefaultInstance() {
}

TrafficLightStatus::TrafficLightStatus(const TrafficLightStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TrafficLightStatus)
}

void TrafficLightStatus::SharedCtor() {
  _cached_size_ = 0;
  green_ = 1;
  yellow_ = 1;
  red_ = 1;
  other_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficLightStatus::~TrafficLightStatus() {
  // @@protoc_insertion_point(destructor:TrafficLightStatus)
  SharedDtor();
}

void TrafficLightStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrafficLightStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLightStatus_descriptor_;
}

const TrafficLightStatus& TrafficLightStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

TrafficLightStatus* TrafficLightStatus::default_instance_ = NULL;

TrafficLightStatus* TrafficLightStatus::New(::google::protobuf::Arena* arena) const {
  TrafficLightStatus* n = new TrafficLightStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:TrafficLightStatus)
  if (_has_bits_[0 / 32] & 15u) {
    green_ = 1;
    yellow_ = 1;
    red_ = 1;
    other_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrafficLightStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrafficLightStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TrafficLightStatus.LightStatus green = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TrafficLightStatus_LightStatus_IsValid(value)) {
            set_green(static_cast< ::TrafficLightStatus_LightStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_yellow;
        break;
      }

      // optional .TrafficLightStatus.LightStatus yellow = 2;
      case 2: {
        if (tag == 16) {
         parse_yellow:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TrafficLightStatus_LightStatus_IsValid(value)) {
            set_yellow(static_cast< ::TrafficLightStatus_LightStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_red;
        break;
      }

      // optional .TrafficLightStatus.LightStatus red = 3;
      case 3: {
        if (tag == 24) {
         parse_red:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TrafficLightStatus_LightStatus_IsValid(value)) {
            set_red(static_cast< ::TrafficLightStatus_LightStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_other;
        break;
      }

      // optional .TrafficLightStatus.LightStatus other = 4;
      case 4: {
        if (tag == 32) {
         parse_other:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TrafficLightStatus_LightStatus_IsValid(value)) {
            set_other(static_cast< ::TrafficLightStatus_LightStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrafficLightStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrafficLightStatus)
  return false;
#undef DO_
}

void TrafficLightStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrafficLightStatus)
  // optional .TrafficLightStatus.LightStatus green = 1;
  if (has_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->green(), output);
  }

  // optional .TrafficLightStatus.LightStatus yellow = 2;
  if (has_yellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->yellow(), output);
  }

  // optional .TrafficLightStatus.LightStatus red = 3;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->red(), output);
  }

  // optional .TrafficLightStatus.LightStatus other = 4;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->other(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrafficLightStatus)
}

::google::protobuf::uint8* TrafficLightStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrafficLightStatus)
  // optional .TrafficLightStatus.LightStatus green = 1;
  if (has_green()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->green(), target);
  }

  // optional .TrafficLightStatus.LightStatus yellow = 2;
  if (has_yellow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->yellow(), target);
  }

  // optional .TrafficLightStatus.LightStatus red = 3;
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->red(), target);
  }

  // optional .TrafficLightStatus.LightStatus other = 4;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->other(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrafficLightStatus)
  return target;
}

int TrafficLightStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TrafficLightStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .TrafficLightStatus.LightStatus green = 1;
    if (has_green()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->green());
    }

    // optional .TrafficLightStatus.LightStatus yellow = 2;
    if (has_yellow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->yellow());
    }

    // optional .TrafficLightStatus.LightStatus red = 3;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->red());
    }

    // optional .TrafficLightStatus.LightStatus other = 4;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->other());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrafficLightStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficLightStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrafficLightStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrafficLightStatus)
    MergeFrom(*source);
  }
}

void TrafficLightStatus::MergeFrom(const TrafficLightStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrafficLightStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_green()) {
      set_green(from.green());
    }
    if (from.has_yellow()) {
      set_yellow(from.yellow());
    }
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_other()) {
      set_other(from.other());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrafficLightStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrafficLightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightStatus::CopyFrom(const TrafficLightStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrafficLightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightStatus::IsInitialized() const {

  return true;
}

void TrafficLightStatus::Swap(TrafficLightStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightStatus::InternalSwap(TrafficLightStatus* other) {
  std::swap(green_, other->green_);
  std::swap(yellow_, other->yellow_);
  std::swap(red_, other->red_);
  std::swap(other_, other->other_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLightStatus_descriptor_;
  metadata.reflection = TrafficLightStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightStatus

// optional .TrafficLightStatus.LightStatus green = 1;
bool TrafficLightStatus::has_green() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLightStatus::set_has_green() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLightStatus::clear_has_green() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLightStatus::clear_green() {
  green_ = 1;
  clear_has_green();
}
 ::TrafficLightStatus_LightStatus TrafficLightStatus::green() const {
  // @@protoc_insertion_point(field_get:TrafficLightStatus.green)
  return static_cast< ::TrafficLightStatus_LightStatus >(green_);
}
 void TrafficLightStatus::set_green(::TrafficLightStatus_LightStatus value) {
  assert(::TrafficLightStatus_LightStatus_IsValid(value));
  set_has_green();
  green_ = value;
  // @@protoc_insertion_point(field_set:TrafficLightStatus.green)
}

// optional .TrafficLightStatus.LightStatus yellow = 2;
bool TrafficLightStatus::has_yellow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLightStatus::set_has_yellow() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLightStatus::clear_has_yellow() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLightStatus::clear_yellow() {
  yellow_ = 1;
  clear_has_yellow();
}
 ::TrafficLightStatus_LightStatus TrafficLightStatus::yellow() const {
  // @@protoc_insertion_point(field_get:TrafficLightStatus.yellow)
  return static_cast< ::TrafficLightStatus_LightStatus >(yellow_);
}
 void TrafficLightStatus::set_yellow(::TrafficLightStatus_LightStatus value) {
  assert(::TrafficLightStatus_LightStatus_IsValid(value));
  set_has_yellow();
  yellow_ = value;
  // @@protoc_insertion_point(field_set:TrafficLightStatus.yellow)
}

// optional .TrafficLightStatus.LightStatus red = 3;
bool TrafficLightStatus::has_red() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLightStatus::set_has_red() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLightStatus::clear_has_red() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLightStatus::clear_red() {
  red_ = 1;
  clear_has_red();
}
 ::TrafficLightStatus_LightStatus TrafficLightStatus::red() const {
  // @@protoc_insertion_point(field_get:TrafficLightStatus.red)
  return static_cast< ::TrafficLightStatus_LightStatus >(red_);
}
 void TrafficLightStatus::set_red(::TrafficLightStatus_LightStatus value) {
  assert(::TrafficLightStatus_LightStatus_IsValid(value));
  set_has_red();
  red_ = value;
  // @@protoc_insertion_point(field_set:TrafficLightStatus.red)
}

// optional .TrafficLightStatus.LightStatus other = 4;
bool TrafficLightStatus::has_other() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLightStatus::set_has_other() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLightStatus::clear_has_other() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLightStatus::clear_other() {
  other_ = 1;
  clear_has_other();
}
 ::TrafficLightStatus_LightStatus TrafficLightStatus::other() const {
  // @@protoc_insertion_point(field_get:TrafficLightStatus.other)
  return static_cast< ::TrafficLightStatus_LightStatus >(other_);
}
 void TrafficLightStatus::set_other(::TrafficLightStatus_LightStatus value) {
  assert(::TrafficLightStatus_LightStatus_IsValid(value));
  set_has_other();
  other_ = value;
  // @@protoc_insertion_point(field_set:TrafficLightStatus.other)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ObjectDetection_ObjectTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDetection_ObjectTypeEnum_descriptor_;
}
bool ObjectDetection_ObjectTypeEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjectDetection_ObjectTypeEnum ObjectDetection::MOVING_GENERAL;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_GENERAL;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_GENERAL_VERTICAL;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_GENERAL_TRANSVERSAL;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_GENERAL_LATERAL;
const ObjectDetection_ObjectTypeEnum ObjectDetection::MOVING_VEHICLE;
const ObjectDetection_ObjectTypeEnum ObjectDetection::MOVING_TRUCK;
const ObjectDetection_ObjectTypeEnum ObjectDetection::MOVING_BIKE;
const ObjectDetection_ObjectTypeEnum ObjectDetection::MOVING_PERSON;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_BRIDGE;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_TUNNEL;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_POLE;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_BAR;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_TREE;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_WALL;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_BOLLARD;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_GUIDERAIL;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_TRAFFICISLAND;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_SIGN;
const ObjectDetection_ObjectTypeEnum ObjectDetection::STATIC_TRAFFIC_LIGHT;
const ObjectDetection_ObjectTypeEnum ObjectDetection::ObjectTypeEnum_MIN;
const ObjectDetection_ObjectTypeEnum ObjectDetection::ObjectTypeEnum_MAX;
const int ObjectDetection::ObjectTypeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDetection::kTimeStampUTCMsFieldNumber;
const int ObjectDetection::kDetectedObjectIDFieldNumber;
const int ObjectDetection::kPositionOffsetFieldNumber;
const int ObjectDetection::kMovingVectorMpsFieldNumber;
const int ObjectDetection::kObjectTypeFieldNumber;
const int ObjectDetection::kObjectSizeVectorMFieldNumber;
const int ObjectDetection::kObjectSizeAccuracyVectorMFieldNumber;
const int ObjectDetection::kMediaIDFieldNumber;
const int ObjectDetection::kTrafficLightStatusFieldNumber;
const int ObjectDetection::kObjectDetectionConfidencePercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDetection::ObjectDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ObjectDetection)
}

void ObjectDetection::InitAsDefaultInstance() {
  positionoffset_ = const_cast< ::PositionOffset*>(&::PositionOffset::default_instance());
  movingvector_mps_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
  objectsizevector_m_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
  objectsizeaccuracyvector_m_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
  trafficlightstatus_ = const_cast< ::TrafficLightStatus*>(&::TrafficLightStatus::default_instance());
}

ObjectDetection::ObjectDetection(const ObjectDetection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ObjectDetection)
}

void ObjectDetection::SharedCtor() {
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  detectedobjectid_ = GOOGLE_LONGLONG(0);
  positionoffset_ = NULL;
  movingvector_mps_ = NULL;
  objecttype_ = 1;
  objectsizevector_m_ = NULL;
  objectsizeaccuracyvector_m_ = NULL;
  mediaid_ = GOOGLE_LONGLONG(0);
  trafficlightstatus_ = NULL;
  objectdetectionconfidence_percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectDetection::~ObjectDetection() {
  // @@protoc_insertion_point(destructor:ObjectDetection)
  SharedDtor();
}

void ObjectDetection::SharedDtor() {
  if (this != default_instance_) {
    delete positionoffset_;
    delete movingvector_mps_;
    delete objectsizevector_m_;
    delete objectsizeaccuracyvector_m_;
    delete trafficlightstatus_;
  }
}

void ObjectDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDetection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDetection_descriptor_;
}

const ObjectDetection& ObjectDetection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

ObjectDetection* ObjectDetection::default_instance_ = NULL;

ObjectDetection* ObjectDetection::New(::google::protobuf::Arena* arena) const {
  ObjectDetection* n = new ObjectDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:ObjectDetection)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ObjectDetection, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ObjectDetection*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(timestamputc_ms_, detectedobjectid_);
    if (has_positionoffset()) {
      if (positionoffset_ != NULL) positionoffset_->::PositionOffset::Clear();
    }
    if (has_movingvector_mps()) {
      if (movingvector_mps_ != NULL) movingvector_mps_->::Vector3D::Clear();
    }
    objecttype_ = 1;
    if (has_objectsizevector_m()) {
      if (objectsizevector_m_ != NULL) objectsizevector_m_->::Vector3D::Clear();
    }
    if (has_objectsizeaccuracyvector_m()) {
      if (objectsizeaccuracyvector_m_ != NULL) objectsizeaccuracyvector_m_->::Vector3D::Clear();
    }
    mediaid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_trafficlightstatus()) {
      if (trafficlightstatus_ != NULL) trafficlightstatus_->::TrafficLightStatus::Clear();
    }
    objectdetectionconfidence_percent_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObjectDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ObjectDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_detectedObjectID;
        break;
      }

      // optional int64 detectedObjectID = 2;
      case 2: {
        if (tag == 16) {
         parse_detectedObjectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &detectedobjectid_)));
          set_has_detectedobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_positionOffset;
        break;
      }

      // optional .PositionOffset positionOffset = 3;
      case 3: {
        if (tag == 26) {
         parse_positionOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionoffset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_movingVector_mps;
        break;
      }

      // optional .Vector3D movingVector_mps = 4;
      case 4: {
        if (tag == 34) {
         parse_movingVector_mps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movingvector_mps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_objectType;
        break;
      }

      // optional .ObjectDetection.ObjectTypeEnum objectType = 5;
      case 5: {
        if (tag == 40) {
         parse_objectType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ObjectDetection_ObjectTypeEnum_IsValid(value)) {
            set_objecttype(static_cast< ::ObjectDetection_ObjectTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_objectSizeVector_m;
        break;
      }

      // optional .Vector3D objectSizeVector_m = 6;
      case 6: {
        if (tag == 50) {
         parse_objectSizeVector_m:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objectsizevector_m()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_objectSizeAccuracyVector_m;
        break;
      }

      // optional .Vector3D objectSizeAccuracyVector_m = 7;
      case 7: {
        if (tag == 58) {
         parse_objectSizeAccuracyVector_m:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objectsizeaccuracyvector_m()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mediaID;
        break;
      }

      // optional int64 mediaID = 8;
      case 8: {
        if (tag == 64) {
         parse_mediaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mediaid_)));
          set_has_mediaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_trafficLightStatus;
        break;
      }

      // optional .TrafficLightStatus trafficLightStatus = 1000;
      case 1000: {
        if (tag == 8002) {
         parse_trafficLightStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trafficlightstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8008)) goto parse_objectDetectionConfidence_percent;
        break;
      }

      // optional uint32 objectDetectionConfidence_percent = 1001;
      case 1001: {
        if (tag == 8008) {
         parse_objectDetectionConfidence_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectdetectionconfidence_percent_)));
          set_has_objectdetectionconfidence_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ObjectDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ObjectDetection)
  return false;
#undef DO_
}

void ObjectDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ObjectDetection)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // optional int64 detectedObjectID = 2;
  if (has_detectedobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->detectedobjectid(), output);
  }

  // optional .PositionOffset positionOffset = 3;
  if (has_positionoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->positionoffset_, output);
  }

  // optional .Vector3D movingVector_mps = 4;
  if (has_movingvector_mps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->movingvector_mps_, output);
  }

  // optional .ObjectDetection.ObjectTypeEnum objectType = 5;
  if (has_objecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->objecttype(), output);
  }

  // optional .Vector3D objectSizeVector_m = 6;
  if (has_objectsizevector_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->objectsizevector_m_, output);
  }

  // optional .Vector3D objectSizeAccuracyVector_m = 7;
  if (has_objectsizeaccuracyvector_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->objectsizeaccuracyvector_m_, output);
  }

  // optional int64 mediaID = 8;
  if (has_mediaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->mediaid(), output);
  }

  // optional .TrafficLightStatus trafficLightStatus = 1000;
  if (has_trafficlightstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *this->trafficlightstatus_, output);
  }

  // optional uint32 objectDetectionConfidence_percent = 1001;
  if (has_objectdetectionconfidence_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1001, this->objectdetectionconfidence_percent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ObjectDetection)
}

::google::protobuf::uint8* ObjectDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObjectDetection)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // optional int64 detectedObjectID = 2;
  if (has_detectedobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->detectedobjectid(), target);
  }

  // optional .PositionOffset positionOffset = 3;
  if (has_positionoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->positionoffset_, false, target);
  }

  // optional .Vector3D movingVector_mps = 4;
  if (has_movingvector_mps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->movingvector_mps_, false, target);
  }

  // optional .ObjectDetection.ObjectTypeEnum objectType = 5;
  if (has_objecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->objecttype(), target);
  }

  // optional .Vector3D objectSizeVector_m = 6;
  if (has_objectsizevector_m()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->objectsizevector_m_, false, target);
  }

  // optional .Vector3D objectSizeAccuracyVector_m = 7;
  if (has_objectsizeaccuracyvector_m()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->objectsizeaccuracyvector_m_, false, target);
  }

  // optional int64 mediaID = 8;
  if (has_mediaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->mediaid(), target);
  }

  // optional .TrafficLightStatus trafficLightStatus = 1000;
  if (has_trafficlightstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1000, *this->trafficlightstatus_, false, target);
  }

  // optional uint32 objectDetectionConfidence_percent = 1001;
  if (has_objectdetectionconfidence_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1001, this->objectdetectionconfidence_percent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObjectDetection)
  return target;
}

int ObjectDetection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ObjectDetection)
  int total_size = 0;

  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional int64 detectedObjectID = 2;
    if (has_detectedobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->detectedobjectid());
    }

    // optional .PositionOffset positionOffset = 3;
    if (has_positionoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->positionoffset_);
    }

    // optional .Vector3D movingVector_mps = 4;
    if (has_movingvector_mps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->movingvector_mps_);
    }

    // optional .ObjectDetection.ObjectTypeEnum objectType = 5;
    if (has_objecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->objecttype());
    }

    // optional .Vector3D objectSizeVector_m = 6;
    if (has_objectsizevector_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->objectsizevector_m_);
    }

    // optional .Vector3D objectSizeAccuracyVector_m = 7;
    if (has_objectsizeaccuracyvector_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->objectsizeaccuracyvector_m_);
    }

    // optional int64 mediaID = 8;
    if (has_mediaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mediaid());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .TrafficLightStatus trafficLightStatus = 1000;
    if (has_trafficlightstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trafficlightstatus_);
    }

    // optional uint32 objectDetectionConfidence_percent = 1001;
    if (has_objectdetectionconfidence_percent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objectdetectionconfidence_percent());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ObjectDetection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectDetection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ObjectDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ObjectDetection)
    MergeFrom(*source);
  }
}

void ObjectDetection::MergeFrom(const ObjectDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ObjectDetection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
    if (from.has_detectedobjectid()) {
      set_detectedobjectid(from.detectedobjectid());
    }
    if (from.has_positionoffset()) {
      mutable_positionoffset()->::PositionOffset::MergeFrom(from.positionoffset());
    }
    if (from.has_movingvector_mps()) {
      mutable_movingvector_mps()->::Vector3D::MergeFrom(from.movingvector_mps());
    }
    if (from.has_objecttype()) {
      set_objecttype(from.objecttype());
    }
    if (from.has_objectsizevector_m()) {
      mutable_objectsizevector_m()->::Vector3D::MergeFrom(from.objectsizevector_m());
    }
    if (from.has_objectsizeaccuracyvector_m()) {
      mutable_objectsizeaccuracyvector_m()->::Vector3D::MergeFrom(from.objectsizeaccuracyvector_m());
    }
    if (from.has_mediaid()) {
      set_mediaid(from.mediaid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_trafficlightstatus()) {
      mutable_trafficlightstatus()->::TrafficLightStatus::MergeFrom(from.trafficlightstatus());
    }
    if (from.has_objectdetectionconfidence_percent()) {
      set_objectdetectionconfidence_percent(from.objectdetectionconfidence_percent());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObjectDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ObjectDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetection::CopyFrom(const ObjectDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ObjectDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_movingvector_mps()) {
    if (!this->movingvector_mps_->IsInitialized()) return false;
  }
  if (has_objectsizevector_m()) {
    if (!this->objectsizevector_m_->IsInitialized()) return false;
  }
  if (has_objectsizeaccuracyvector_m()) {
    if (!this->objectsizeaccuracyvector_m_->IsInitialized()) return false;
  }
  return true;
}

void ObjectDetection::Swap(ObjectDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDetection::InternalSwap(ObjectDetection* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  std::swap(detectedobjectid_, other->detectedobjectid_);
  std::swap(positionoffset_, other->positionoffset_);
  std::swap(movingvector_mps_, other->movingvector_mps_);
  std::swap(objecttype_, other->objecttype_);
  std::swap(objectsizevector_m_, other->objectsizevector_m_);
  std::swap(objectsizeaccuracyvector_m_, other->objectsizeaccuracyvector_m_);
  std::swap(mediaid_, other->mediaid_);
  std::swap(trafficlightstatus_, other->trafficlightstatus_);
  std::swap(objectdetectionconfidence_percent_, other->objectdetectionconfidence_percent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDetection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDetection_descriptor_;
  metadata.reflection = ObjectDetection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDetection

// required int64 timeStampUTC_ms = 1;
bool ObjectDetection::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectDetection::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectDetection::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectDetection::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 ObjectDetection::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:ObjectDetection.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void ObjectDetection::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:ObjectDetection.timeStampUTC_ms)
}

// optional int64 detectedObjectID = 2;
bool ObjectDetection::has_detectedobjectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectDetection::set_has_detectedobjectid() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectDetection::clear_has_detectedobjectid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectDetection::clear_detectedobjectid() {
  detectedobjectid_ = GOOGLE_LONGLONG(0);
  clear_has_detectedobjectid();
}
 ::google::protobuf::int64 ObjectDetection::detectedobjectid() const {
  // @@protoc_insertion_point(field_get:ObjectDetection.detectedObjectID)
  return detectedobjectid_;
}
 void ObjectDetection::set_detectedobjectid(::google::protobuf::int64 value) {
  set_has_detectedobjectid();
  detectedobjectid_ = value;
  // @@protoc_insertion_point(field_set:ObjectDetection.detectedObjectID)
}

// optional .PositionOffset positionOffset = 3;
bool ObjectDetection::has_positionoffset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObjectDetection::set_has_positionoffset() {
  _has_bits_[0] |= 0x00000004u;
}
void ObjectDetection::clear_has_positionoffset() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObjectDetection::clear_positionoffset() {
  if (positionoffset_ != NULL) positionoffset_->::PositionOffset::Clear();
  clear_has_positionoffset();
}
const ::PositionOffset& ObjectDetection::positionoffset() const {
  // @@protoc_insertion_point(field_get:ObjectDetection.positionOffset)
  return positionoffset_ != NULL ? *positionoffset_ : *default_instance_->positionoffset_;
}
::PositionOffset* ObjectDetection::mutable_positionoffset() {
  set_has_positionoffset();
  if (positionoffset_ == NULL) {
    positionoffset_ = new ::PositionOffset;
  }
  // @@protoc_insertion_point(field_mutable:ObjectDetection.positionOffset)
  return positionoffset_;
}
::PositionOffset* ObjectDetection::release_positionoffset() {
  // @@protoc_insertion_point(field_release:ObjectDetection.positionOffset)
  clear_has_positionoffset();
  ::PositionOffset* temp = positionoffset_;
  positionoffset_ = NULL;
  return temp;
}
void ObjectDetection::set_allocated_positionoffset(::PositionOffset* positionoffset) {
  delete positionoffset_;
  positionoffset_ = positionoffset;
  if (positionoffset) {
    set_has_positionoffset();
  } else {
    clear_has_positionoffset();
  }
  // @@protoc_insertion_point(field_set_allocated:ObjectDetection.positionOffset)
}

// optional .Vector3D movingVector_mps = 4;
bool ObjectDetection::has_movingvector_mps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObjectDetection::set_has_movingvector_mps() {
  _has_bits_[0] |= 0x00000008u;
}
void ObjectDetection::clear_has_movingvector_mps() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObjectDetection::clear_movingvector_mps() {
  if (movingvector_mps_ != NULL) movingvector_mps_->::Vector3D::Clear();
  clear_has_movingvector_mps();
}
const ::Vector3D& ObjectDetection::movingvector_mps() const {
  // @@protoc_insertion_point(field_get:ObjectDetection.movingVector_mps)
  return movingvector_mps_ != NULL ? *movingvector_mps_ : *default_instance_->movingvector_mps_;
}
::Vector3D* ObjectDetection::mutable_movingvector_mps() {
  set_has_movingvector_mps();
  if (movingvector_mps_ == NULL) {
    movingvector_mps_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:ObjectDetection.movingVector_mps)
  return movingvector_mps_;
}
::Vector3D* ObjectDetection::release_movingvector_mps() {
  // @@protoc_insertion_point(field_release:ObjectDetection.movingVector_mps)
  clear_has_movingvector_mps();
  ::Vector3D* temp = movingvector_mps_;
  movingvector_mps_ = NULL;
  return temp;
}
void ObjectDetection::set_allocated_movingvector_mps(::Vector3D* movingvector_mps) {
  delete movingvector_mps_;
  movingvector_mps_ = movingvector_mps;
  if (movingvector_mps) {
    set_has_movingvector_mps();
  } else {
    clear_has_movingvector_mps();
  }
  // @@protoc_insertion_point(field_set_allocated:ObjectDetection.movingVector_mps)
}

// optional .ObjectDetection.ObjectTypeEnum objectType = 5;
bool ObjectDetection::has_objecttype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ObjectDetection::set_has_objecttype() {
  _has_bits_[0] |= 0x00000010u;
}
void ObjectDetection::clear_has_objecttype() {
  _has_bits_[0] &= ~0x00000010u;
}
void ObjectDetection::clear_objecttype() {
  objecttype_ = 1;
  clear_has_objecttype();
}
 ::ObjectDetection_ObjectTypeEnum ObjectDetection::objecttype() const {
  // @@protoc_insertion_point(field_get:ObjectDetection.objectType)
  return static_cast< ::ObjectDetection_ObjectTypeEnum >(objecttype_);
}
 void ObjectDetection::set_objecttype(::ObjectDetection_ObjectTypeEnum value) {
  assert(::ObjectDetection_ObjectTypeEnum_IsValid(value));
  set_has_objecttype();
  objecttype_ = value;
  // @@protoc_insertion_point(field_set:ObjectDetection.objectType)
}

// optional .Vector3D objectSizeVector_m = 6;
bool ObjectDetection::has_objectsizevector_m() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ObjectDetection::set_has_objectsizevector_m() {
  _has_bits_[0] |= 0x00000020u;
}
void ObjectDetection::clear_has_objectsizevector_m() {
  _has_bits_[0] &= ~0x00000020u;
}
void ObjectDetection::clear_objectsizevector_m() {
  if (objectsizevector_m_ != NULL) objectsizevector_m_->::Vector3D::Clear();
  clear_has_objectsizevector_m();
}
const ::Vector3D& ObjectDetection::objectsizevector_m() const {
  // @@protoc_insertion_point(field_get:ObjectDetection.objectSizeVector_m)
  return objectsizevector_m_ != NULL ? *objectsizevector_m_ : *default_instance_->objectsizevector_m_;
}
::Vector3D* ObjectDetection::mutable_objectsizevector_m() {
  set_has_objectsizevector_m();
  if (objectsizevector_m_ == NULL) {
    objectsizevector_m_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:ObjectDetection.objectSizeVector_m)
  return objectsizevector_m_;
}
::Vector3D* ObjectDetection::release_objectsizevector_m() {
  // @@protoc_insertion_point(field_release:ObjectDetection.objectSizeVector_m)
  clear_has_objectsizevector_m();
  ::Vector3D* temp = objectsizevector_m_;
  objectsizevector_m_ = NULL;
  return temp;
}
void ObjectDetection::set_allocated_objectsizevector_m(::Vector3D* objectsizevector_m) {
  delete objectsizevector_m_;
  objectsizevector_m_ = objectsizevector_m;
  if (objectsizevector_m) {
    set_has_objectsizevector_m();
  } else {
    clear_has_objectsizevector_m();
  }
  // @@protoc_insertion_point(field_set_allocated:ObjectDetection.objectSizeVector_m)
}

// optional .Vector3D objectSizeAccuracyVector_m = 7;
bool ObjectDetection::has_objectsizeaccuracyvector_m() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ObjectDetection::set_has_objectsizeaccuracyvector_m() {
  _has_bits_[0] |= 0x00000040u;
}
void ObjectDetection::clear_has_objectsizeaccuracyvector_m() {
  _has_bits_[0] &= ~0x00000040u;
}
void ObjectDetection::clear_objectsizeaccuracyvector_m() {
  if (objectsizeaccuracyvector_m_ != NULL) objectsizeaccuracyvector_m_->::Vector3D::Clear();
  clear_has_objectsizeaccuracyvector_m();
}
const ::Vector3D& ObjectDetection::objectsizeaccuracyvector_m() const {
  // @@protoc_insertion_point(field_get:ObjectDetection.objectSizeAccuracyVector_m)
  return objectsizeaccuracyvector_m_ != NULL ? *objectsizeaccuracyvector_m_ : *default_instance_->objectsizeaccuracyvector_m_;
}
::Vector3D* ObjectDetection::mutable_objectsizeaccuracyvector_m() {
  set_has_objectsizeaccuracyvector_m();
  if (objectsizeaccuracyvector_m_ == NULL) {
    objectsizeaccuracyvector_m_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:ObjectDetection.objectSizeAccuracyVector_m)
  return objectsizeaccuracyvector_m_;
}
::Vector3D* ObjectDetection::release_objectsizeaccuracyvector_m() {
  // @@protoc_insertion_point(field_release:ObjectDetection.objectSizeAccuracyVector_m)
  clear_has_objectsizeaccuracyvector_m();
  ::Vector3D* temp = objectsizeaccuracyvector_m_;
  objectsizeaccuracyvector_m_ = NULL;
  return temp;
}
void ObjectDetection::set_allocated_objectsizeaccuracyvector_m(::Vector3D* objectsizeaccuracyvector_m) {
  delete objectsizeaccuracyvector_m_;
  objectsizeaccuracyvector_m_ = objectsizeaccuracyvector_m;
  if (objectsizeaccuracyvector_m) {
    set_has_objectsizeaccuracyvector_m();
  } else {
    clear_has_objectsizeaccuracyvector_m();
  }
  // @@protoc_insertion_point(field_set_allocated:ObjectDetection.objectSizeAccuracyVector_m)
}

// optional int64 mediaID = 8;
bool ObjectDetection::has_mediaid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ObjectDetection::set_has_mediaid() {
  _has_bits_[0] |= 0x00000080u;
}
void ObjectDetection::clear_has_mediaid() {
  _has_bits_[0] &= ~0x00000080u;
}
void ObjectDetection::clear_mediaid() {
  mediaid_ = GOOGLE_LONGLONG(0);
  clear_has_mediaid();
}
 ::google::protobuf::int64 ObjectDetection::mediaid() const {
  // @@protoc_insertion_point(field_get:ObjectDetection.mediaID)
  return mediaid_;
}
 void ObjectDetection::set_mediaid(::google::protobuf::int64 value) {
  set_has_mediaid();
  mediaid_ = value;
  // @@protoc_insertion_point(field_set:ObjectDetection.mediaID)
}

// optional .TrafficLightStatus trafficLightStatus = 1000;
bool ObjectDetection::has_trafficlightstatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ObjectDetection::set_has_trafficlightstatus() {
  _has_bits_[0] |= 0x00000100u;
}
void ObjectDetection::clear_has_trafficlightstatus() {
  _has_bits_[0] &= ~0x00000100u;
}
void ObjectDetection::clear_trafficlightstatus() {
  if (trafficlightstatus_ != NULL) trafficlightstatus_->::TrafficLightStatus::Clear();
  clear_has_trafficlightstatus();
}
const ::TrafficLightStatus& ObjectDetection::trafficlightstatus() const {
  // @@protoc_insertion_point(field_get:ObjectDetection.trafficLightStatus)
  return trafficlightstatus_ != NULL ? *trafficlightstatus_ : *default_instance_->trafficlightstatus_;
}
::TrafficLightStatus* ObjectDetection::mutable_trafficlightstatus() {
  set_has_trafficlightstatus();
  if (trafficlightstatus_ == NULL) {
    trafficlightstatus_ = new ::TrafficLightStatus;
  }
  // @@protoc_insertion_point(field_mutable:ObjectDetection.trafficLightStatus)
  return trafficlightstatus_;
}
::TrafficLightStatus* ObjectDetection::release_trafficlightstatus() {
  // @@protoc_insertion_point(field_release:ObjectDetection.trafficLightStatus)
  clear_has_trafficlightstatus();
  ::TrafficLightStatus* temp = trafficlightstatus_;
  trafficlightstatus_ = NULL;
  return temp;
}
void ObjectDetection::set_allocated_trafficlightstatus(::TrafficLightStatus* trafficlightstatus) {
  delete trafficlightstatus_;
  trafficlightstatus_ = trafficlightstatus;
  if (trafficlightstatus) {
    set_has_trafficlightstatus();
  } else {
    clear_has_trafficlightstatus();
  }
  // @@protoc_insertion_point(field_set_allocated:ObjectDetection.trafficLightStatus)
}

// optional uint32 objectDetectionConfidence_percent = 1001;
bool ObjectDetection::has_objectdetectionconfidence_percent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ObjectDetection::set_has_objectdetectionconfidence_percent() {
  _has_bits_[0] |= 0x00000200u;
}
void ObjectDetection::clear_has_objectdetectionconfidence_percent() {
  _has_bits_[0] &= ~0x00000200u;
}
void ObjectDetection::clear_objectdetectionconfidence_percent() {
  objectdetectionconfidence_percent_ = 0u;
  clear_has_objectdetectionconfidence_percent();
}
 ::google::protobuf::uint32 ObjectDetection::objectdetectionconfidence_percent() const {
  // @@protoc_insertion_point(field_get:ObjectDetection.objectDetectionConfidence_percent)
  return objectdetectionconfidence_percent_;
}
 void ObjectDetection::set_objectdetectionconfidence_percent(::google::protobuf::uint32 value) {
  set_has_objectdetectionconfidence_percent();
  objectdetectionconfidence_percent_ = value;
  // @@protoc_insertion_point(field_set:ObjectDetection.objectDetectionConfidence_percent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADServiceAndSensorState::kTimeStampUTCMsFieldNumber;
const int ADServiceAndSensorState::kAdSpeedControlFieldNumber;
const int ADServiceAndSensorState::kAdBrakeControlFieldNumber;
const int ADServiceAndSensorState::kAdSteeringControlFieldNumber;
const int ADServiceAndSensorState::kAdConnectionAvailableFieldNumber;
const int ADServiceAndSensorState::kSensorObjectRecognitionFieldNumber;
const int ADServiceAndSensorState::kSensorSignRecognitionFieldNumber;
const int ADServiceAndSensorState::kSensorLaneRecognitionFieldNumber;
const int ADServiceAndSensorState::kSensorRoadSurfaceFieldNumber;
const int ADServiceAndSensorState::kSensorEnvironmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADServiceAndSensorState::ADServiceAndSensorState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADServiceAndSensorState)
}

void ADServiceAndSensorState::InitAsDefaultInstance() {
}

ADServiceAndSensorState::ADServiceAndSensorState(const ADServiceAndSensorState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ADServiceAndSensorState)
}

void ADServiceAndSensorState::SharedCtor() {
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  adspeedcontrol_ = false;
  adbrakecontrol_ = false;
  adsteeringcontrol_ = false;
  adconnectionavailable_ = false;
  sensorobjectrecognition_ = false;
  sensorsignrecognition_ = false;
  sensorlanerecognition_ = false;
  sensorroadsurface_ = false;
  sensorenvironment_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADServiceAndSensorState::~ADServiceAndSensorState() {
  // @@protoc_insertion_point(destructor:ADServiceAndSensorState)
  SharedDtor();
}

void ADServiceAndSensorState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ADServiceAndSensorState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADServiceAndSensorState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADServiceAndSensorState_descriptor_;
}

const ADServiceAndSensorState& ADServiceAndSensorState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

ADServiceAndSensorState* ADServiceAndSensorState::default_instance_ = NULL;

ADServiceAndSensorState* ADServiceAndSensorState::New(::google::protobuf::Arena* arena) const {
  ADServiceAndSensorState* n = new ADServiceAndSensorState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADServiceAndSensorState::Clear() {
// @@protoc_insertion_point(message_clear_start:ADServiceAndSensorState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ADServiceAndSensorState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ADServiceAndSensorState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(timestamputc_ms_, sensorlanerecognition_);
  }
  ZR_(sensorroadsurface_, sensorenvironment_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ADServiceAndSensorState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADServiceAndSensorState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adSpeedControl;
        break;
      }

      // optional bool adSpeedControl = 2;
      case 2: {
        if (tag == 16) {
         parse_adSpeedControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adspeedcontrol_)));
          set_has_adspeedcontrol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adBrakeControl;
        break;
      }

      // optional bool adBrakeControl = 3;
      case 3: {
        if (tag == 24) {
         parse_adBrakeControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adbrakecontrol_)));
          set_has_adbrakecontrol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adSteeringControl;
        break;
      }

      // optional bool adSteeringControl = 4;
      case 4: {
        if (tag == 32) {
         parse_adSteeringControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adsteeringcontrol_)));
          set_has_adsteeringcontrol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adConnectionAvailable;
        break;
      }

      // optional bool adConnectionAvailable = 5;
      case 5: {
        if (tag == 40) {
         parse_adConnectionAvailable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adconnectionavailable_)));
          set_has_adconnectionavailable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sensorObjectRecognition;
        break;
      }

      // optional bool sensorObjectRecognition = 6;
      case 6: {
        if (tag == 48) {
         parse_sensorObjectRecognition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensorobjectrecognition_)));
          set_has_sensorobjectrecognition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sensorSignRecognition;
        break;
      }

      // optional bool sensorSignRecognition = 7;
      case 7: {
        if (tag == 56) {
         parse_sensorSignRecognition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensorsignrecognition_)));
          set_has_sensorsignrecognition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sensorLaneRecognition;
        break;
      }

      // optional bool sensorLaneRecognition = 8;
      case 8: {
        if (tag == 64) {
         parse_sensorLaneRecognition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensorlanerecognition_)));
          set_has_sensorlanerecognition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sensorRoadSurface;
        break;
      }

      // optional bool sensorRoadSurface = 9;
      case 9: {
        if (tag == 72) {
         parse_sensorRoadSurface:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensorroadsurface_)));
          set_has_sensorroadsurface();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sensorEnvironment;
        break;
      }

      // optional bool sensorEnvironment = 10;
      case 10: {
        if (tag == 80) {
         parse_sensorEnvironment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensorenvironment_)));
          set_has_sensorenvironment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADServiceAndSensorState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADServiceAndSensorState)
  return false;
#undef DO_
}

void ADServiceAndSensorState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADServiceAndSensorState)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // optional bool adSpeedControl = 2;
  if (has_adspeedcontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->adspeedcontrol(), output);
  }

  // optional bool adBrakeControl = 3;
  if (has_adbrakecontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->adbrakecontrol(), output);
  }

  // optional bool adSteeringControl = 4;
  if (has_adsteeringcontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->adsteeringcontrol(), output);
  }

  // optional bool adConnectionAvailable = 5;
  if (has_adconnectionavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->adconnectionavailable(), output);
  }

  // optional bool sensorObjectRecognition = 6;
  if (has_sensorobjectrecognition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sensorobjectrecognition(), output);
  }

  // optional bool sensorSignRecognition = 7;
  if (has_sensorsignrecognition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sensorsignrecognition(), output);
  }

  // optional bool sensorLaneRecognition = 8;
  if (has_sensorlanerecognition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->sensorlanerecognition(), output);
  }

  // optional bool sensorRoadSurface = 9;
  if (has_sensorroadsurface()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->sensorroadsurface(), output);
  }

  // optional bool sensorEnvironment = 10;
  if (has_sensorenvironment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->sensorenvironment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ADServiceAndSensorState)
}

::google::protobuf::uint8* ADServiceAndSensorState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ADServiceAndSensorState)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // optional bool adSpeedControl = 2;
  if (has_adspeedcontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->adspeedcontrol(), target);
  }

  // optional bool adBrakeControl = 3;
  if (has_adbrakecontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->adbrakecontrol(), target);
  }

  // optional bool adSteeringControl = 4;
  if (has_adsteeringcontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->adsteeringcontrol(), target);
  }

  // optional bool adConnectionAvailable = 5;
  if (has_adconnectionavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->adconnectionavailable(), target);
  }

  // optional bool sensorObjectRecognition = 6;
  if (has_sensorobjectrecognition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sensorobjectrecognition(), target);
  }

  // optional bool sensorSignRecognition = 7;
  if (has_sensorsignrecognition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sensorsignrecognition(), target);
  }

  // optional bool sensorLaneRecognition = 8;
  if (has_sensorlanerecognition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->sensorlanerecognition(), target);
  }

  // optional bool sensorRoadSurface = 9;
  if (has_sensorroadsurface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->sensorroadsurface(), target);
  }

  // optional bool sensorEnvironment = 10;
  if (has_sensorenvironment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->sensorenvironment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADServiceAndSensorState)
  return target;
}

int ADServiceAndSensorState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ADServiceAndSensorState)
  int total_size = 0;

  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional bool adSpeedControl = 2;
    if (has_adspeedcontrol()) {
      total_size += 1 + 1;
    }

    // optional bool adBrakeControl = 3;
    if (has_adbrakecontrol()) {
      total_size += 1 + 1;
    }

    // optional bool adSteeringControl = 4;
    if (has_adsteeringcontrol()) {
      total_size += 1 + 1;
    }

    // optional bool adConnectionAvailable = 5;
    if (has_adconnectionavailable()) {
      total_size += 1 + 1;
    }

    // optional bool sensorObjectRecognition = 6;
    if (has_sensorobjectrecognition()) {
      total_size += 1 + 1;
    }

    // optional bool sensorSignRecognition = 7;
    if (has_sensorsignrecognition()) {
      total_size += 1 + 1;
    }

    // optional bool sensorLaneRecognition = 8;
    if (has_sensorlanerecognition()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool sensorRoadSurface = 9;
    if (has_sensorroadsurface()) {
      total_size += 1 + 1;
    }

    // optional bool sensorEnvironment = 10;
    if (has_sensorenvironment()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADServiceAndSensorState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADServiceAndSensorState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ADServiceAndSensorState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ADServiceAndSensorState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADServiceAndSensorState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADServiceAndSensorState)
    MergeFrom(*source);
  }
}

void ADServiceAndSensorState::MergeFrom(const ADServiceAndSensorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADServiceAndSensorState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
    if (from.has_adspeedcontrol()) {
      set_adspeedcontrol(from.adspeedcontrol());
    }
    if (from.has_adbrakecontrol()) {
      set_adbrakecontrol(from.adbrakecontrol());
    }
    if (from.has_adsteeringcontrol()) {
      set_adsteeringcontrol(from.adsteeringcontrol());
    }
    if (from.has_adconnectionavailable()) {
      set_adconnectionavailable(from.adconnectionavailable());
    }
    if (from.has_sensorobjectrecognition()) {
      set_sensorobjectrecognition(from.sensorobjectrecognition());
    }
    if (from.has_sensorsignrecognition()) {
      set_sensorsignrecognition(from.sensorsignrecognition());
    }
    if (from.has_sensorlanerecognition()) {
      set_sensorlanerecognition(from.sensorlanerecognition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sensorroadsurface()) {
      set_sensorroadsurface(from.sensorroadsurface());
    }
    if (from.has_sensorenvironment()) {
      set_sensorenvironment(from.sensorenvironment());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ADServiceAndSensorState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADServiceAndSensorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADServiceAndSensorState::CopyFrom(const ADServiceAndSensorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADServiceAndSensorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADServiceAndSensorState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ADServiceAndSensorState::Swap(ADServiceAndSensorState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADServiceAndSensorState::InternalSwap(ADServiceAndSensorState* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  std::swap(adspeedcontrol_, other->adspeedcontrol_);
  std::swap(adbrakecontrol_, other->adbrakecontrol_);
  std::swap(adsteeringcontrol_, other->adsteeringcontrol_);
  std::swap(adconnectionavailable_, other->adconnectionavailable_);
  std::swap(sensorobjectrecognition_, other->sensorobjectrecognition_);
  std::swap(sensorsignrecognition_, other->sensorsignrecognition_);
  std::swap(sensorlanerecognition_, other->sensorlanerecognition_);
  std::swap(sensorroadsurface_, other->sensorroadsurface_);
  std::swap(sensorenvironment_, other->sensorenvironment_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADServiceAndSensorState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADServiceAndSensorState_descriptor_;
  metadata.reflection = ADServiceAndSensorState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADServiceAndSensorState

// required int64 timeStampUTC_ms = 1;
bool ADServiceAndSensorState::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ADServiceAndSensorState::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void ADServiceAndSensorState::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void ADServiceAndSensorState::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 ADServiceAndSensorState::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:ADServiceAndSensorState.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void ADServiceAndSensorState::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:ADServiceAndSensorState.timeStampUTC_ms)
}

// optional bool adSpeedControl = 2;
bool ADServiceAndSensorState::has_adspeedcontrol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ADServiceAndSensorState::set_has_adspeedcontrol() {
  _has_bits_[0] |= 0x00000002u;
}
void ADServiceAndSensorState::clear_has_adspeedcontrol() {
  _has_bits_[0] &= ~0x00000002u;
}
void ADServiceAndSensorState::clear_adspeedcontrol() {
  adspeedcontrol_ = false;
  clear_has_adspeedcontrol();
}
 bool ADServiceAndSensorState::adspeedcontrol() const {
  // @@protoc_insertion_point(field_get:ADServiceAndSensorState.adSpeedControl)
  return adspeedcontrol_;
}
 void ADServiceAndSensorState::set_adspeedcontrol(bool value) {
  set_has_adspeedcontrol();
  adspeedcontrol_ = value;
  // @@protoc_insertion_point(field_set:ADServiceAndSensorState.adSpeedControl)
}

// optional bool adBrakeControl = 3;
bool ADServiceAndSensorState::has_adbrakecontrol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ADServiceAndSensorState::set_has_adbrakecontrol() {
  _has_bits_[0] |= 0x00000004u;
}
void ADServiceAndSensorState::clear_has_adbrakecontrol() {
  _has_bits_[0] &= ~0x00000004u;
}
void ADServiceAndSensorState::clear_adbrakecontrol() {
  adbrakecontrol_ = false;
  clear_has_adbrakecontrol();
}
 bool ADServiceAndSensorState::adbrakecontrol() const {
  // @@protoc_insertion_point(field_get:ADServiceAndSensorState.adBrakeControl)
  return adbrakecontrol_;
}
 void ADServiceAndSensorState::set_adbrakecontrol(bool value) {
  set_has_adbrakecontrol();
  adbrakecontrol_ = value;
  // @@protoc_insertion_point(field_set:ADServiceAndSensorState.adBrakeControl)
}

// optional bool adSteeringControl = 4;
bool ADServiceAndSensorState::has_adsteeringcontrol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ADServiceAndSensorState::set_has_adsteeringcontrol() {
  _has_bits_[0] |= 0x00000008u;
}
void ADServiceAndSensorState::clear_has_adsteeringcontrol() {
  _has_bits_[0] &= ~0x00000008u;
}
void ADServiceAndSensorState::clear_adsteeringcontrol() {
  adsteeringcontrol_ = false;
  clear_has_adsteeringcontrol();
}
 bool ADServiceAndSensorState::adsteeringcontrol() const {
  // @@protoc_insertion_point(field_get:ADServiceAndSensorState.adSteeringControl)
  return adsteeringcontrol_;
}
 void ADServiceAndSensorState::set_adsteeringcontrol(bool value) {
  set_has_adsteeringcontrol();
  adsteeringcontrol_ = value;
  // @@protoc_insertion_point(field_set:ADServiceAndSensorState.adSteeringControl)
}

// optional bool adConnectionAvailable = 5;
bool ADServiceAndSensorState::has_adconnectionavailable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ADServiceAndSensorState::set_has_adconnectionavailable() {
  _has_bits_[0] |= 0x00000010u;
}
void ADServiceAndSensorState::clear_has_adconnectionavailable() {
  _has_bits_[0] &= ~0x00000010u;
}
void ADServiceAndSensorState::clear_adconnectionavailable() {
  adconnectionavailable_ = false;
  clear_has_adconnectionavailable();
}
 bool ADServiceAndSensorState::adconnectionavailable() const {
  // @@protoc_insertion_point(field_get:ADServiceAndSensorState.adConnectionAvailable)
  return adconnectionavailable_;
}
 void ADServiceAndSensorState::set_adconnectionavailable(bool value) {
  set_has_adconnectionavailable();
  adconnectionavailable_ = value;
  // @@protoc_insertion_point(field_set:ADServiceAndSensorState.adConnectionAvailable)
}

// optional bool sensorObjectRecognition = 6;
bool ADServiceAndSensorState::has_sensorobjectrecognition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ADServiceAndSensorState::set_has_sensorobjectrecognition() {
  _has_bits_[0] |= 0x00000020u;
}
void ADServiceAndSensorState::clear_has_sensorobjectrecognition() {
  _has_bits_[0] &= ~0x00000020u;
}
void ADServiceAndSensorState::clear_sensorobjectrecognition() {
  sensorobjectrecognition_ = false;
  clear_has_sensorobjectrecognition();
}
 bool ADServiceAndSensorState::sensorobjectrecognition() const {
  // @@protoc_insertion_point(field_get:ADServiceAndSensorState.sensorObjectRecognition)
  return sensorobjectrecognition_;
}
 void ADServiceAndSensorState::set_sensorobjectrecognition(bool value) {
  set_has_sensorobjectrecognition();
  sensorobjectrecognition_ = value;
  // @@protoc_insertion_point(field_set:ADServiceAndSensorState.sensorObjectRecognition)
}

// optional bool sensorSignRecognition = 7;
bool ADServiceAndSensorState::has_sensorsignrecognition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ADServiceAndSensorState::set_has_sensorsignrecognition() {
  _has_bits_[0] |= 0x00000040u;
}
void ADServiceAndSensorState::clear_has_sensorsignrecognition() {
  _has_bits_[0] &= ~0x00000040u;
}
void ADServiceAndSensorState::clear_sensorsignrecognition() {
  sensorsignrecognition_ = false;
  clear_has_sensorsignrecognition();
}
 bool ADServiceAndSensorState::sensorsignrecognition() const {
  // @@protoc_insertion_point(field_get:ADServiceAndSensorState.sensorSignRecognition)
  return sensorsignrecognition_;
}
 void ADServiceAndSensorState::set_sensorsignrecognition(bool value) {
  set_has_sensorsignrecognition();
  sensorsignrecognition_ = value;
  // @@protoc_insertion_point(field_set:ADServiceAndSensorState.sensorSignRecognition)
}

// optional bool sensorLaneRecognition = 8;
bool ADServiceAndSensorState::has_sensorlanerecognition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ADServiceAndSensorState::set_has_sensorlanerecognition() {
  _has_bits_[0] |= 0x00000080u;
}
void ADServiceAndSensorState::clear_has_sensorlanerecognition() {
  _has_bits_[0] &= ~0x00000080u;
}
void ADServiceAndSensorState::clear_sensorlanerecognition() {
  sensorlanerecognition_ = false;
  clear_has_sensorlanerecognition();
}
 bool ADServiceAndSensorState::sensorlanerecognition() const {
  // @@protoc_insertion_point(field_get:ADServiceAndSensorState.sensorLaneRecognition)
  return sensorlanerecognition_;
}
 void ADServiceAndSensorState::set_sensorlanerecognition(bool value) {
  set_has_sensorlanerecognition();
  sensorlanerecognition_ = value;
  // @@protoc_insertion_point(field_set:ADServiceAndSensorState.sensorLaneRecognition)
}

// optional bool sensorRoadSurface = 9;
bool ADServiceAndSensorState::has_sensorroadsurface() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ADServiceAndSensorState::set_has_sensorroadsurface() {
  _has_bits_[0] |= 0x00000100u;
}
void ADServiceAndSensorState::clear_has_sensorroadsurface() {
  _has_bits_[0] &= ~0x00000100u;
}
void ADServiceAndSensorState::clear_sensorroadsurface() {
  sensorroadsurface_ = false;
  clear_has_sensorroadsurface();
}
 bool ADServiceAndSensorState::sensorroadsurface() const {
  // @@protoc_insertion_point(field_get:ADServiceAndSensorState.sensorRoadSurface)
  return sensorroadsurface_;
}
 void ADServiceAndSensorState::set_sensorroadsurface(bool value) {
  set_has_sensorroadsurface();
  sensorroadsurface_ = value;
  // @@protoc_insertion_point(field_set:ADServiceAndSensorState.sensorRoadSurface)
}

// optional bool sensorEnvironment = 10;
bool ADServiceAndSensorState::has_sensorenvironment() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ADServiceAndSensorState::set_has_sensorenvironment() {
  _has_bits_[0] |= 0x00000200u;
}
void ADServiceAndSensorState::clear_has_sensorenvironment() {
  _has_bits_[0] &= ~0x00000200u;
}
void ADServiceAndSensorState::clear_sensorenvironment() {
  sensorenvironment_ = false;
  clear_has_sensorenvironment();
}
 bool ADServiceAndSensorState::sensorenvironment() const {
  // @@protoc_insertion_point(field_get:ADServiceAndSensorState.sensorEnvironment)
  return sensorenvironment_;
}
 void ADServiceAndSensorState::set_sensorenvironment(bool value) {
  set_has_sensorenvironment();
  sensorenvironment_ = value;
  // @@protoc_insertion_point(field_set:ADServiceAndSensorState.sensorEnvironment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgoMotion::kTimeStampUTCMsFieldNumber;
const int EgoMotion::kEgoMotionVariantFieldNumber;
const int EgoMotion::kEgoPositionFieldNumber;
const int EgoMotion::kEgoOrientationFieldNumber;
const int EgoMotion::kMediaIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgoMotion::EgoMotion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EgoMotion)
}

void EgoMotion::InitAsDefaultInstance() {
  egoposition_ = const_cast< ::PositionOffset*>(&::PositionOffset::default_instance());
  egoorientation_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
}

EgoMotion::EgoMotion(const EgoMotion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EgoMotion)
}

void EgoMotion::SharedCtor() {
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  egomotionvariant_ = GOOGLE_LONGLONG(0);
  egoposition_ = NULL;
  egoorientation_ = NULL;
  mediaid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EgoMotion::~EgoMotion() {
  // @@protoc_insertion_point(destructor:EgoMotion)
  SharedDtor();
}

void EgoMotion::SharedDtor() {
  if (this != default_instance_) {
    delete egoposition_;
    delete egoorientation_;
  }
}

void EgoMotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgoMotion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgoMotion_descriptor_;
}

const EgoMotion& EgoMotion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

EgoMotion* EgoMotion::default_instance_ = NULL;

EgoMotion* EgoMotion::New(::google::protobuf::Arena* arena) const {
  EgoMotion* n = new EgoMotion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgoMotion::Clear() {
// @@protoc_insertion_point(message_clear_start:EgoMotion)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EgoMotion, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EgoMotion*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(timestamputc_ms_, egomotionvariant_);
    if (has_egoposition()) {
      if (egoposition_ != NULL) egoposition_->::PositionOffset::Clear();
    }
    if (has_egoorientation()) {
      if (egoorientation_ != NULL) egoorientation_->::Vector3D::Clear();
    }
    mediaid_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgoMotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EgoMotion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_egoMotionVariant;
        break;
      }

      // optional int64 egoMotionVariant = 2;
      case 2: {
        if (tag == 16) {
         parse_egoMotionVariant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &egomotionvariant_)));
          set_has_egomotionvariant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_egoPosition;
        break;
      }

      // optional .PositionOffset egoPosition = 3;
      case 3: {
        if (tag == 26) {
         parse_egoPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_egoposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_egoOrientation;
        break;
      }

      // optional .Vector3D egoOrientation = 4;
      case 4: {
        if (tag == 34) {
         parse_egoOrientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_egoorientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mediaID;
        break;
      }

      // optional int64 mediaID = 8;
      case 8: {
        if (tag == 64) {
         parse_mediaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mediaid_)));
          set_has_mediaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EgoMotion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EgoMotion)
  return false;
#undef DO_
}

void EgoMotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EgoMotion)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // optional int64 egoMotionVariant = 2;
  if (has_egomotionvariant()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->egomotionvariant(), output);
  }

  // optional .PositionOffset egoPosition = 3;
  if (has_egoposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->egoposition_, output);
  }

  // optional .Vector3D egoOrientation = 4;
  if (has_egoorientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->egoorientation_, output);
  }

  // optional int64 mediaID = 8;
  if (has_mediaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->mediaid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EgoMotion)
}

::google::protobuf::uint8* EgoMotion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EgoMotion)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // optional int64 egoMotionVariant = 2;
  if (has_egomotionvariant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->egomotionvariant(), target);
  }

  // optional .PositionOffset egoPosition = 3;
  if (has_egoposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->egoposition_, false, target);
  }

  // optional .Vector3D egoOrientation = 4;
  if (has_egoorientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->egoorientation_, false, target);
  }

  // optional int64 mediaID = 8;
  if (has_mediaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->mediaid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EgoMotion)
  return target;
}

int EgoMotion::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:EgoMotion)
  int total_size = 0;

  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional int64 egoMotionVariant = 2;
    if (has_egomotionvariant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->egomotionvariant());
    }

    // optional .PositionOffset egoPosition = 3;
    if (has_egoposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->egoposition_);
    }

    // optional .Vector3D egoOrientation = 4;
    if (has_egoorientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->egoorientation_);
    }

    // optional int64 mediaID = 8;
    if (has_mediaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mediaid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgoMotion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EgoMotion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EgoMotion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EgoMotion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EgoMotion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EgoMotion)
    MergeFrom(*source);
  }
}

void EgoMotion::MergeFrom(const EgoMotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EgoMotion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
    if (from.has_egomotionvariant()) {
      set_egomotionvariant(from.egomotionvariant());
    }
    if (from.has_egoposition()) {
      mutable_egoposition()->::PositionOffset::MergeFrom(from.egoposition());
    }
    if (from.has_egoorientation()) {
      mutable_egoorientation()->::Vector3D::MergeFrom(from.egoorientation());
    }
    if (from.has_mediaid()) {
      set_mediaid(from.mediaid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EgoMotion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EgoMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgoMotion::CopyFrom(const EgoMotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EgoMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EgoMotion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_egoorientation()) {
    if (!this->egoorientation_->IsInitialized()) return false;
  }
  return true;
}

void EgoMotion::Swap(EgoMotion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgoMotion::InternalSwap(EgoMotion* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  std::swap(egomotionvariant_, other->egomotionvariant_);
  std::swap(egoposition_, other->egoposition_);
  std::swap(egoorientation_, other->egoorientation_);
  std::swap(mediaid_, other->mediaid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgoMotion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgoMotion_descriptor_;
  metadata.reflection = EgoMotion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgoMotion

// required int64 timeStampUTC_ms = 1;
bool EgoMotion::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgoMotion::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void EgoMotion::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgoMotion::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 EgoMotion::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:EgoMotion.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void EgoMotion::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:EgoMotion.timeStampUTC_ms)
}

// optional int64 egoMotionVariant = 2;
bool EgoMotion::has_egomotionvariant() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgoMotion::set_has_egomotionvariant() {
  _has_bits_[0] |= 0x00000002u;
}
void EgoMotion::clear_has_egomotionvariant() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgoMotion::clear_egomotionvariant() {
  egomotionvariant_ = GOOGLE_LONGLONG(0);
  clear_has_egomotionvariant();
}
 ::google::protobuf::int64 EgoMotion::egomotionvariant() const {
  // @@protoc_insertion_point(field_get:EgoMotion.egoMotionVariant)
  return egomotionvariant_;
}
 void EgoMotion::set_egomotionvariant(::google::protobuf::int64 value) {
  set_has_egomotionvariant();
  egomotionvariant_ = value;
  // @@protoc_insertion_point(field_set:EgoMotion.egoMotionVariant)
}

// optional .PositionOffset egoPosition = 3;
bool EgoMotion::has_egoposition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EgoMotion::set_has_egoposition() {
  _has_bits_[0] |= 0x00000004u;
}
void EgoMotion::clear_has_egoposition() {
  _has_bits_[0] &= ~0x00000004u;
}
void EgoMotion::clear_egoposition() {
  if (egoposition_ != NULL) egoposition_->::PositionOffset::Clear();
  clear_has_egoposition();
}
const ::PositionOffset& EgoMotion::egoposition() const {
  // @@protoc_insertion_point(field_get:EgoMotion.egoPosition)
  return egoposition_ != NULL ? *egoposition_ : *default_instance_->egoposition_;
}
::PositionOffset* EgoMotion::mutable_egoposition() {
  set_has_egoposition();
  if (egoposition_ == NULL) {
    egoposition_ = new ::PositionOffset;
  }
  // @@protoc_insertion_point(field_mutable:EgoMotion.egoPosition)
  return egoposition_;
}
::PositionOffset* EgoMotion::release_egoposition() {
  // @@protoc_insertion_point(field_release:EgoMotion.egoPosition)
  clear_has_egoposition();
  ::PositionOffset* temp = egoposition_;
  egoposition_ = NULL;
  return temp;
}
void EgoMotion::set_allocated_egoposition(::PositionOffset* egoposition) {
  delete egoposition_;
  egoposition_ = egoposition;
  if (egoposition) {
    set_has_egoposition();
  } else {
    clear_has_egoposition();
  }
  // @@protoc_insertion_point(field_set_allocated:EgoMotion.egoPosition)
}

// optional .Vector3D egoOrientation = 4;
bool EgoMotion::has_egoorientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EgoMotion::set_has_egoorientation() {
  _has_bits_[0] |= 0x00000008u;
}
void EgoMotion::clear_has_egoorientation() {
  _has_bits_[0] &= ~0x00000008u;
}
void EgoMotion::clear_egoorientation() {
  if (egoorientation_ != NULL) egoorientation_->::Vector3D::Clear();
  clear_has_egoorientation();
}
const ::Vector3D& EgoMotion::egoorientation() const {
  // @@protoc_insertion_point(field_get:EgoMotion.egoOrientation)
  return egoorientation_ != NULL ? *egoorientation_ : *default_instance_->egoorientation_;
}
::Vector3D* EgoMotion::mutable_egoorientation() {
  set_has_egoorientation();
  if (egoorientation_ == NULL) {
    egoorientation_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:EgoMotion.egoOrientation)
  return egoorientation_;
}
::Vector3D* EgoMotion::release_egoorientation() {
  // @@protoc_insertion_point(field_release:EgoMotion.egoOrientation)
  clear_has_egoorientation();
  ::Vector3D* temp = egoorientation_;
  egoorientation_ = NULL;
  return temp;
}
void EgoMotion::set_allocated_egoorientation(::Vector3D* egoorientation) {
  delete egoorientation_;
  egoorientation_ = egoorientation;
  if (egoorientation) {
    set_has_egoorientation();
  } else {
    clear_has_egoorientation();
  }
  // @@protoc_insertion_point(field_set_allocated:EgoMotion.egoOrientation)
}

// optional int64 mediaID = 8;
bool EgoMotion::has_mediaid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EgoMotion::set_has_mediaid() {
  _has_bits_[0] |= 0x00000010u;
}
void EgoMotion::clear_has_mediaid() {
  _has_bits_[0] &= ~0x00000010u;
}
void EgoMotion::clear_mediaid() {
  mediaid_ = GOOGLE_LONGLONG(0);
  clear_has_mediaid();
}
 ::google::protobuf::int64 EgoMotion::mediaid() const {
  // @@protoc_insertion_point(field_get:EgoMotion.mediaID)
  return mediaid_;
}
 void EgoMotion::set_mediaid(::google::protobuf::int64 value) {
  set_has_mediaid();
  mediaid_ = value;
  // @@protoc_insertion_point(field_set:EgoMotion.mediaID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* RawGNSSSatData_RawGNSSSatDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawGNSSSatData_RawGNSSSatDataType_descriptor_;
}
bool RawGNSSSatData_RawGNSSSatDataType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RawGNSSSatData_RawGNSSSatDataType RawGNSSSatData::RINEX;
const RawGNSSSatData_RawGNSSSatDataType RawGNSSSatData::RawGNSSSatDataType_MIN;
const RawGNSSSatData_RawGNSSSatDataType RawGNSSSatData::RawGNSSSatDataType_MAX;
const int RawGNSSSatData::RawGNSSSatDataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawGNSSSatData::kTimeStampUTCMsFieldNumber;
const int RawGNSSSatData::kRawGNSSSatDataTypeFieldNumber;
const int RawGNSSSatData::kRawDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawGNSSSatData::RawGNSSSatData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RawGNSSSatData)
}

void RawGNSSSatData::InitAsDefaultInstance() {
}

RawGNSSSatData::RawGNSSSatData(const RawGNSSSatData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RawGNSSSatData)
}

void RawGNSSSatData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  rawgnsssatdatatype_ = 1;
  rawdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawGNSSSatData::~RawGNSSSatData() {
  // @@protoc_insertion_point(destructor:RawGNSSSatData)
  SharedDtor();
}

void RawGNSSSatData::SharedDtor() {
  rawdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RawGNSSSatData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawGNSSSatData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawGNSSSatData_descriptor_;
}

const RawGNSSSatData& RawGNSSSatData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

RawGNSSSatData* RawGNSSSatData::default_instance_ = NULL;

RawGNSSSatData* RawGNSSSatData::New(::google::protobuf::Arena* arena) const {
  RawGNSSSatData* n = new RawGNSSSatData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawGNSSSatData::Clear() {
// @@protoc_insertion_point(message_clear_start:RawGNSSSatData)
  if (_has_bits_[0 / 32] & 7u) {
    timestamputc_ms_ = GOOGLE_LONGLONG(0);
    rawgnsssatdatatype_ = 1;
    if (has_rawdata()) {
      rawdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RawGNSSSatData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RawGNSSSatData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rawGNSSSatDataType;
        break;
      }

      // required .RawGNSSSatData.RawGNSSSatDataType rawGNSSSatDataType = 2;
      case 2: {
        if (tag == 16) {
         parse_rawGNSSSatDataType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RawGNSSSatData_RawGNSSSatDataType_IsValid(value)) {
            set_rawgnsssatdatatype(static_cast< ::RawGNSSSatData_RawGNSSSatDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rawData;
        break;
      }

      // optional bytes rawData = 3;
      case 3: {
        if (tag == 26) {
         parse_rawData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rawdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RawGNSSSatData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RawGNSSSatData)
  return false;
#undef DO_
}

void RawGNSSSatData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RawGNSSSatData)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // required .RawGNSSSatData.RawGNSSSatDataType rawGNSSSatDataType = 2;
  if (has_rawgnsssatdatatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rawgnsssatdatatype(), output);
  }

  // optional bytes rawData = 3;
  if (has_rawdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->rawdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RawGNSSSatData)
}

::google::protobuf::uint8* RawGNSSSatData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RawGNSSSatData)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // required .RawGNSSSatData.RawGNSSSatDataType rawGNSSSatDataType = 2;
  if (has_rawgnsssatdatatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rawgnsssatdatatype(), target);
  }

  // optional bytes rawData = 3;
  if (has_rawdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->rawdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RawGNSSSatData)
  return target;
}

int RawGNSSSatData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RawGNSSSatData)
  int total_size = 0;

  if (has_timestamputc_ms()) {
    // required int64 timeStampUTC_ms = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }

  if (has_rawgnsssatdatatype()) {
    // required .RawGNSSSatData.RawGNSSSatDataType rawGNSSSatDataType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rawgnsssatdatatype());
  }

  return total_size;
}
int RawGNSSSatData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RawGNSSSatData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 timeStampUTC_ms = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());

    // required .RawGNSSSatData.RawGNSSSatDataType rawGNSSSatDataType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rawgnsssatdatatype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes rawData = 3;
  if (has_rawdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rawdata());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawGNSSSatData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RawGNSSSatData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RawGNSSSatData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RawGNSSSatData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RawGNSSSatData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RawGNSSSatData)
    MergeFrom(*source);
  }
}

void RawGNSSSatData::MergeFrom(const RawGNSSSatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RawGNSSSatData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
    if (from.has_rawgnsssatdatatype()) {
      set_rawgnsssatdatatype(from.rawgnsssatdatatype());
    }
    if (from.has_rawdata()) {
      set_has_rawdata();
      rawdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawdata_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RawGNSSSatData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RawGNSSSatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawGNSSSatData::CopyFrom(const RawGNSSSatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RawGNSSSatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawGNSSSatData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RawGNSSSatData::Swap(RawGNSSSatData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawGNSSSatData::InternalSwap(RawGNSSSatData* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  std::swap(rawgnsssatdatatype_, other->rawgnsssatdatatype_);
  rawdata_.Swap(&other->rawdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawGNSSSatData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawGNSSSatData_descriptor_;
  metadata.reflection = RawGNSSSatData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawGNSSSatData

// required int64 timeStampUTC_ms = 1;
bool RawGNSSSatData::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RawGNSSSatData::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void RawGNSSSatData::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void RawGNSSSatData::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 RawGNSSSatData::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:RawGNSSSatData.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void RawGNSSSatData::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:RawGNSSSatData.timeStampUTC_ms)
}

// required .RawGNSSSatData.RawGNSSSatDataType rawGNSSSatDataType = 2;
bool RawGNSSSatData::has_rawgnsssatdatatype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RawGNSSSatData::set_has_rawgnsssatdatatype() {
  _has_bits_[0] |= 0x00000002u;
}
void RawGNSSSatData::clear_has_rawgnsssatdatatype() {
  _has_bits_[0] &= ~0x00000002u;
}
void RawGNSSSatData::clear_rawgnsssatdatatype() {
  rawgnsssatdatatype_ = 1;
  clear_has_rawgnsssatdatatype();
}
 ::RawGNSSSatData_RawGNSSSatDataType RawGNSSSatData::rawgnsssatdatatype() const {
  // @@protoc_insertion_point(field_get:RawGNSSSatData.rawGNSSSatDataType)
  return static_cast< ::RawGNSSSatData_RawGNSSSatDataType >(rawgnsssatdatatype_);
}
 void RawGNSSSatData::set_rawgnsssatdatatype(::RawGNSSSatData_RawGNSSSatDataType value) {
  assert(::RawGNSSSatData_RawGNSSSatDataType_IsValid(value));
  set_has_rawgnsssatdatatype();
  rawgnsssatdatatype_ = value;
  // @@protoc_insertion_point(field_set:RawGNSSSatData.rawGNSSSatDataType)
}

// optional bytes rawData = 3;
bool RawGNSSSatData::has_rawdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RawGNSSSatData::set_has_rawdata() {
  _has_bits_[0] |= 0x00000004u;
}
void RawGNSSSatData::clear_has_rawdata() {
  _has_bits_[0] &= ~0x00000004u;
}
void RawGNSSSatData::clear_rawdata() {
  rawdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rawdata();
}
 const ::std::string& RawGNSSSatData::rawdata() const {
  // @@protoc_insertion_point(field_get:RawGNSSSatData.rawData)
  return rawdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RawGNSSSatData::set_rawdata(const ::std::string& value) {
  set_has_rawdata();
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RawGNSSSatData.rawData)
}
 void RawGNSSSatData::set_rawdata(const char* value) {
  set_has_rawdata();
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RawGNSSSatData.rawData)
}
 void RawGNSSSatData::set_rawdata(const void* value, size_t size) {
  set_has_rawdata();
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RawGNSSSatData.rawData)
}
 ::std::string* RawGNSSSatData::mutable_rawdata() {
  set_has_rawdata();
  // @@protoc_insertion_point(field_mutable:RawGNSSSatData.rawData)
  return rawdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RawGNSSSatData::release_rawdata() {
  // @@protoc_insertion_point(field_release:RawGNSSSatData.rawData)
  clear_has_rawdata();
  return rawdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RawGNSSSatData::set_allocated_rawdata(::std::string* rawdata) {
  if (rawdata != NULL) {
    set_has_rawdata();
  } else {
    clear_has_rawdata();
  }
  rawdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawdata);
  // @@protoc_insertion_point(field_set_allocated:RawGNSSSatData.rawData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathEvents::kVehicleStatusFieldNumber;
const int PathEvents::kVehicleDynamicsFieldNumber;
const int PathEvents::kSignRecognitionFieldNumber;
const int PathEvents::kLaneBoundaryRecognitionFieldNumber;
const int PathEvents::kExceptionalVehicleStateFieldNumber;
const int PathEvents::kProprietaryInfoFieldNumber;
const int PathEvents::kEnvironmentStatusFieldNumber;
const int PathEvents::kObjectDetectionFieldNumber;
const int PathEvents::kAdServiceAndSensorStateFieldNumber;
const int PathEvents::kEgoMotionFieldNumber;
const int PathEvents::kRawGNSSSatDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathEvents::PathEvents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PathEvents)
}

void PathEvents::InitAsDefaultInstance() {
}

PathEvents::PathEvents(const PathEvents& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PathEvents)
}

void PathEvents::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathEvents::~PathEvents() {
  // @@protoc_insertion_point(destructor:PathEvents)
  SharedDtor();
}

void PathEvents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathEvents_descriptor_;
}

const PathEvents& PathEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

PathEvents* PathEvents::default_instance_ = NULL;

PathEvents* PathEvents::New(::google::protobuf::Arena* arena) const {
  PathEvents* n = new PathEvents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:PathEvents)
  vehiclestatus_.Clear();
  vehicledynamics_.Clear();
  signrecognition_.Clear();
  laneboundaryrecognition_.Clear();
  exceptionalvehiclestate_.Clear();
  proprietaryinfo_.Clear();
  environmentstatus_.Clear();
  objectdetection_.Clear();
  adserviceandsensorstate_.Clear();
  egomotion_.Clear();
  rawgnsssatdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PathEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VehicleStatus vehicleStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_vehicleStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vehiclestatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_vehicleStatus;
        if (input->ExpectTag(18)) goto parse_loop_vehicleDynamics;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .VehicleDynamics vehicleDynamics = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_vehicleDynamics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vehicledynamics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_vehicleDynamics;
        if (input->ExpectTag(26)) goto parse_loop_signRecognition;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SignRecognition signRecognition = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_signRecognition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_signrecognition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_signRecognition;
        if (input->ExpectTag(34)) goto parse_loop_laneBoundaryRecognition;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .LaneBoundaryRecognition laneBoundaryRecognition = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_laneBoundaryRecognition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_laneboundaryrecognition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_laneBoundaryRecognition;
        if (input->ExpectTag(42)) goto parse_loop_exceptionalVehicleState;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ExceptionalVehicleState exceptionalVehicleState = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exceptionalVehicleState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exceptionalvehiclestate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_exceptionalVehicleState;
        if (input->ExpectTag(50)) goto parse_loop_proprietaryInfo;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ProprietaryInfo proprietaryInfo = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_proprietaryInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_proprietaryinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_proprietaryInfo;
        if (input->ExpectTag(58)) goto parse_loop_environmentStatus;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .EnvironmentStatus environmentStatus = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_environmentStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_environmentstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_environmentStatus;
        if (input->ExpectTag(66)) goto parse_loop_objectDetection;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ObjectDetection objectDetection = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_objectDetection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_objectdetection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_objectDetection;
        if (input->ExpectTag(74)) goto parse_loop_adServiceAndSensorState;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ADServiceAndSensorState adServiceAndSensorState = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_adServiceAndSensorState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_adserviceandsensorstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_adServiceAndSensorState;
        if (input->ExpectTag(8002)) goto parse_loop_egoMotion;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .EgoMotion egoMotion = 1000;
      case 1000: {
        if (tag == 8002) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_egoMotion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_egomotion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_loop_egoMotion;
        if (input->ExpectTag(8010)) goto parse_loop_rawGNSSSatData;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .RawGNSSSatData rawGNSSSatData = 1001;
      case 1001: {
        if (tag == 8010) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rawGNSSSatData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rawgnsssatdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_loop_rawGNSSSatData;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PathEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PathEvents)
  return false;
#undef DO_
}

void PathEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PathEvents)
  // repeated .VehicleStatus vehicleStatus = 1;
  for (unsigned int i = 0, n = this->vehiclestatus_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vehiclestatus(i), output);
  }

  // repeated .VehicleDynamics vehicleDynamics = 2;
  for (unsigned int i = 0, n = this->vehicledynamics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vehicledynamics(i), output);
  }

  // repeated .SignRecognition signRecognition = 3;
  for (unsigned int i = 0, n = this->signrecognition_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signrecognition(i), output);
  }

  // repeated .LaneBoundaryRecognition laneBoundaryRecognition = 4;
  for (unsigned int i = 0, n = this->laneboundaryrecognition_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->laneboundaryrecognition(i), output);
  }

  // repeated .ExceptionalVehicleState exceptionalVehicleState = 5;
  for (unsigned int i = 0, n = this->exceptionalvehiclestate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->exceptionalvehiclestate(i), output);
  }

  // repeated .ProprietaryInfo proprietaryInfo = 6;
  for (unsigned int i = 0, n = this->proprietaryinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->proprietaryinfo(i), output);
  }

  // repeated .EnvironmentStatus environmentStatus = 7;
  for (unsigned int i = 0, n = this->environmentstatus_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->environmentstatus(i), output);
  }

  // repeated .ObjectDetection objectDetection = 8;
  for (unsigned int i = 0, n = this->objectdetection_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->objectdetection(i), output);
  }

  // repeated .ADServiceAndSensorState adServiceAndSensorState = 9;
  for (unsigned int i = 0, n = this->adserviceandsensorstate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->adserviceandsensorstate(i), output);
  }

  // repeated .EgoMotion egoMotion = 1000;
  for (unsigned int i = 0, n = this->egomotion_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->egomotion(i), output);
  }

  // repeated .RawGNSSSatData rawGNSSSatData = 1001;
  for (unsigned int i = 0, n = this->rawgnsssatdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->rawgnsssatdata(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PathEvents)
}

::google::protobuf::uint8* PathEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PathEvents)
  // repeated .VehicleStatus vehicleStatus = 1;
  for (unsigned int i = 0, n = this->vehiclestatus_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->vehiclestatus(i), false, target);
  }

  // repeated .VehicleDynamics vehicleDynamics = 2;
  for (unsigned int i = 0, n = this->vehicledynamics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->vehicledynamics(i), false, target);
  }

  // repeated .SignRecognition signRecognition = 3;
  for (unsigned int i = 0, n = this->signrecognition_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->signrecognition(i), false, target);
  }

  // repeated .LaneBoundaryRecognition laneBoundaryRecognition = 4;
  for (unsigned int i = 0, n = this->laneboundaryrecognition_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->laneboundaryrecognition(i), false, target);
  }

  // repeated .ExceptionalVehicleState exceptionalVehicleState = 5;
  for (unsigned int i = 0, n = this->exceptionalvehiclestate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->exceptionalvehiclestate(i), false, target);
  }

  // repeated .ProprietaryInfo proprietaryInfo = 6;
  for (unsigned int i = 0, n = this->proprietaryinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->proprietaryinfo(i), false, target);
  }

  // repeated .EnvironmentStatus environmentStatus = 7;
  for (unsigned int i = 0, n = this->environmentstatus_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->environmentstatus(i), false, target);
  }

  // repeated .ObjectDetection objectDetection = 8;
  for (unsigned int i = 0, n = this->objectdetection_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->objectdetection(i), false, target);
  }

  // repeated .ADServiceAndSensorState adServiceAndSensorState = 9;
  for (unsigned int i = 0, n = this->adserviceandsensorstate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->adserviceandsensorstate(i), false, target);
  }

  // repeated .EgoMotion egoMotion = 1000;
  for (unsigned int i = 0, n = this->egomotion_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1000, this->egomotion(i), false, target);
  }

  // repeated .RawGNSSSatData rawGNSSSatData = 1001;
  for (unsigned int i = 0, n = this->rawgnsssatdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1001, this->rawgnsssatdata(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PathEvents)
  return target;
}

int PathEvents::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PathEvents)
  int total_size = 0;

  // repeated .VehicleStatus vehicleStatus = 1;
  total_size += 1 * this->vehiclestatus_size();
  for (int i = 0; i < this->vehiclestatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehiclestatus(i));
  }

  // repeated .VehicleDynamics vehicleDynamics = 2;
  total_size += 1 * this->vehicledynamics_size();
  for (int i = 0; i < this->vehicledynamics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehicledynamics(i));
  }

  // repeated .SignRecognition signRecognition = 3;
  total_size += 1 * this->signrecognition_size();
  for (int i = 0; i < this->signrecognition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signrecognition(i));
  }

  // repeated .LaneBoundaryRecognition laneBoundaryRecognition = 4;
  total_size += 1 * this->laneboundaryrecognition_size();
  for (int i = 0; i < this->laneboundaryrecognition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->laneboundaryrecognition(i));
  }

  // repeated .ExceptionalVehicleState exceptionalVehicleState = 5;
  total_size += 1 * this->exceptionalvehiclestate_size();
  for (int i = 0; i < this->exceptionalvehiclestate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exceptionalvehiclestate(i));
  }

  // repeated .ProprietaryInfo proprietaryInfo = 6;
  total_size += 1 * this->proprietaryinfo_size();
  for (int i = 0; i < this->proprietaryinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proprietaryinfo(i));
  }

  // repeated .EnvironmentStatus environmentStatus = 7;
  total_size += 1 * this->environmentstatus_size();
  for (int i = 0; i < this->environmentstatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->environmentstatus(i));
  }

  // repeated .ObjectDetection objectDetection = 8;
  total_size += 1 * this->objectdetection_size();
  for (int i = 0; i < this->objectdetection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objectdetection(i));
  }

  // repeated .ADServiceAndSensorState adServiceAndSensorState = 9;
  total_size += 1 * this->adserviceandsensorstate_size();
  for (int i = 0; i < this->adserviceandsensorstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adserviceandsensorstate(i));
  }

  // repeated .EgoMotion egoMotion = 1000;
  total_size += 2 * this->egomotion_size();
  for (int i = 0; i < this->egomotion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->egomotion(i));
  }

  // repeated .RawGNSSSatData rawGNSSSatData = 1001;
  total_size += 2 * this->rawgnsssatdata_size();
  for (int i = 0; i < this->rawgnsssatdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rawgnsssatdata(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PathEvents)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathEvents* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathEvents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PathEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PathEvents)
    MergeFrom(*source);
  }
}

void PathEvents::MergeFrom(const PathEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PathEvents)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  vehiclestatus_.MergeFrom(from.vehiclestatus_);
  vehicledynamics_.MergeFrom(from.vehicledynamics_);
  signrecognition_.MergeFrom(from.signrecognition_);
  laneboundaryrecognition_.MergeFrom(from.laneboundaryrecognition_);
  exceptionalvehiclestate_.MergeFrom(from.exceptionalvehiclestate_);
  proprietaryinfo_.MergeFrom(from.proprietaryinfo_);
  environmentstatus_.MergeFrom(from.environmentstatus_);
  objectdetection_.MergeFrom(from.objectdetection_);
  adserviceandsensorstate_.MergeFrom(from.adserviceandsensorstate_);
  egomotion_.MergeFrom(from.egomotion_);
  rawgnsssatdata_.MergeFrom(from.rawgnsssatdata_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PathEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathEvents::CopyFrom(const PathEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathEvents::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->vehiclestatus())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vehicledynamics())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->signrecognition())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->laneboundaryrecognition())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->exceptionalvehiclestate())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->proprietaryinfo())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->environmentstatus())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->objectdetection())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->adserviceandsensorstate())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->egomotion())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rawgnsssatdata())) return false;
  return true;
}

void PathEvents::Swap(PathEvents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathEvents::InternalSwap(PathEvents* other) {
  vehiclestatus_.UnsafeArenaSwap(&other->vehiclestatus_);
  vehicledynamics_.UnsafeArenaSwap(&other->vehicledynamics_);
  signrecognition_.UnsafeArenaSwap(&other->signrecognition_);
  laneboundaryrecognition_.UnsafeArenaSwap(&other->laneboundaryrecognition_);
  exceptionalvehiclestate_.UnsafeArenaSwap(&other->exceptionalvehiclestate_);
  proprietaryinfo_.UnsafeArenaSwap(&other->proprietaryinfo_);
  environmentstatus_.UnsafeArenaSwap(&other->environmentstatus_);
  objectdetection_.UnsafeArenaSwap(&other->objectdetection_);
  adserviceandsensorstate_.UnsafeArenaSwap(&other->adserviceandsensorstate_);
  egomotion_.UnsafeArenaSwap(&other->egomotion_);
  rawgnsssatdata_.UnsafeArenaSwap(&other->rawgnsssatdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathEvents_descriptor_;
  metadata.reflection = PathEvents_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathEvents

// repeated .VehicleStatus vehicleStatus = 1;
int PathEvents::vehiclestatus_size() const {
  return vehiclestatus_.size();
}
void PathEvents::clear_vehiclestatus() {
  vehiclestatus_.Clear();
}
const ::VehicleStatus& PathEvents::vehiclestatus(int index) const {
  // @@protoc_insertion_point(field_get:PathEvents.vehicleStatus)
  return vehiclestatus_.Get(index);
}
::VehicleStatus* PathEvents::mutable_vehiclestatus(int index) {
  // @@protoc_insertion_point(field_mutable:PathEvents.vehicleStatus)
  return vehiclestatus_.Mutable(index);
}
::VehicleStatus* PathEvents::add_vehiclestatus() {
  // @@protoc_insertion_point(field_add:PathEvents.vehicleStatus)
  return vehiclestatus_.Add();
}
::google::protobuf::RepeatedPtrField< ::VehicleStatus >*
PathEvents::mutable_vehiclestatus() {
  // @@protoc_insertion_point(field_mutable_list:PathEvents.vehicleStatus)
  return &vehiclestatus_;
}
const ::google::protobuf::RepeatedPtrField< ::VehicleStatus >&
PathEvents::vehiclestatus() const {
  // @@protoc_insertion_point(field_list:PathEvents.vehicleStatus)
  return vehiclestatus_;
}

// repeated .VehicleDynamics vehicleDynamics = 2;
int PathEvents::vehicledynamics_size() const {
  return vehicledynamics_.size();
}
void PathEvents::clear_vehicledynamics() {
  vehicledynamics_.Clear();
}
const ::VehicleDynamics& PathEvents::vehicledynamics(int index) const {
  // @@protoc_insertion_point(field_get:PathEvents.vehicleDynamics)
  return vehicledynamics_.Get(index);
}
::VehicleDynamics* PathEvents::mutable_vehicledynamics(int index) {
  // @@protoc_insertion_point(field_mutable:PathEvents.vehicleDynamics)
  return vehicledynamics_.Mutable(index);
}
::VehicleDynamics* PathEvents::add_vehicledynamics() {
  // @@protoc_insertion_point(field_add:PathEvents.vehicleDynamics)
  return vehicledynamics_.Add();
}
::google::protobuf::RepeatedPtrField< ::VehicleDynamics >*
PathEvents::mutable_vehicledynamics() {
  // @@protoc_insertion_point(field_mutable_list:PathEvents.vehicleDynamics)
  return &vehicledynamics_;
}
const ::google::protobuf::RepeatedPtrField< ::VehicleDynamics >&
PathEvents::vehicledynamics() const {
  // @@protoc_insertion_point(field_list:PathEvents.vehicleDynamics)
  return vehicledynamics_;
}

// repeated .SignRecognition signRecognition = 3;
int PathEvents::signrecognition_size() const {
  return signrecognition_.size();
}
void PathEvents::clear_signrecognition() {
  signrecognition_.Clear();
}
const ::SignRecognition& PathEvents::signrecognition(int index) const {
  // @@protoc_insertion_point(field_get:PathEvents.signRecognition)
  return signrecognition_.Get(index);
}
::SignRecognition* PathEvents::mutable_signrecognition(int index) {
  // @@protoc_insertion_point(field_mutable:PathEvents.signRecognition)
  return signrecognition_.Mutable(index);
}
::SignRecognition* PathEvents::add_signrecognition() {
  // @@protoc_insertion_point(field_add:PathEvents.signRecognition)
  return signrecognition_.Add();
}
::google::protobuf::RepeatedPtrField< ::SignRecognition >*
PathEvents::mutable_signrecognition() {
  // @@protoc_insertion_point(field_mutable_list:PathEvents.signRecognition)
  return &signrecognition_;
}
const ::google::protobuf::RepeatedPtrField< ::SignRecognition >&
PathEvents::signrecognition() const {
  // @@protoc_insertion_point(field_list:PathEvents.signRecognition)
  return signrecognition_;
}

// repeated .LaneBoundaryRecognition laneBoundaryRecognition = 4;
int PathEvents::laneboundaryrecognition_size() const {
  return laneboundaryrecognition_.size();
}
void PathEvents::clear_laneboundaryrecognition() {
  laneboundaryrecognition_.Clear();
}
const ::LaneBoundaryRecognition& PathEvents::laneboundaryrecognition(int index) const {
  // @@protoc_insertion_point(field_get:PathEvents.laneBoundaryRecognition)
  return laneboundaryrecognition_.Get(index);
}
::LaneBoundaryRecognition* PathEvents::mutable_laneboundaryrecognition(int index) {
  // @@protoc_insertion_point(field_mutable:PathEvents.laneBoundaryRecognition)
  return laneboundaryrecognition_.Mutable(index);
}
::LaneBoundaryRecognition* PathEvents::add_laneboundaryrecognition() {
  // @@protoc_insertion_point(field_add:PathEvents.laneBoundaryRecognition)
  return laneboundaryrecognition_.Add();
}
::google::protobuf::RepeatedPtrField< ::LaneBoundaryRecognition >*
PathEvents::mutable_laneboundaryrecognition() {
  // @@protoc_insertion_point(field_mutable_list:PathEvents.laneBoundaryRecognition)
  return &laneboundaryrecognition_;
}
const ::google::protobuf::RepeatedPtrField< ::LaneBoundaryRecognition >&
PathEvents::laneboundaryrecognition() const {
  // @@protoc_insertion_point(field_list:PathEvents.laneBoundaryRecognition)
  return laneboundaryrecognition_;
}

// repeated .ExceptionalVehicleState exceptionalVehicleState = 5;
int PathEvents::exceptionalvehiclestate_size() const {
  return exceptionalvehiclestate_.size();
}
void PathEvents::clear_exceptionalvehiclestate() {
  exceptionalvehiclestate_.Clear();
}
const ::ExceptionalVehicleState& PathEvents::exceptionalvehiclestate(int index) const {
  // @@protoc_insertion_point(field_get:PathEvents.exceptionalVehicleState)
  return exceptionalvehiclestate_.Get(index);
}
::ExceptionalVehicleState* PathEvents::mutable_exceptionalvehiclestate(int index) {
  // @@protoc_insertion_point(field_mutable:PathEvents.exceptionalVehicleState)
  return exceptionalvehiclestate_.Mutable(index);
}
::ExceptionalVehicleState* PathEvents::add_exceptionalvehiclestate() {
  // @@protoc_insertion_point(field_add:PathEvents.exceptionalVehicleState)
  return exceptionalvehiclestate_.Add();
}
::google::protobuf::RepeatedPtrField< ::ExceptionalVehicleState >*
PathEvents::mutable_exceptionalvehiclestate() {
  // @@protoc_insertion_point(field_mutable_list:PathEvents.exceptionalVehicleState)
  return &exceptionalvehiclestate_;
}
const ::google::protobuf::RepeatedPtrField< ::ExceptionalVehicleState >&
PathEvents::exceptionalvehiclestate() const {
  // @@protoc_insertion_point(field_list:PathEvents.exceptionalVehicleState)
  return exceptionalvehiclestate_;
}

// repeated .ProprietaryInfo proprietaryInfo = 6;
int PathEvents::proprietaryinfo_size() const {
  return proprietaryinfo_.size();
}
void PathEvents::clear_proprietaryinfo() {
  proprietaryinfo_.Clear();
}
const ::ProprietaryInfo& PathEvents::proprietaryinfo(int index) const {
  // @@protoc_insertion_point(field_get:PathEvents.proprietaryInfo)
  return proprietaryinfo_.Get(index);
}
::ProprietaryInfo* PathEvents::mutable_proprietaryinfo(int index) {
  // @@protoc_insertion_point(field_mutable:PathEvents.proprietaryInfo)
  return proprietaryinfo_.Mutable(index);
}
::ProprietaryInfo* PathEvents::add_proprietaryinfo() {
  // @@protoc_insertion_point(field_add:PathEvents.proprietaryInfo)
  return proprietaryinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::ProprietaryInfo >*
PathEvents::mutable_proprietaryinfo() {
  // @@protoc_insertion_point(field_mutable_list:PathEvents.proprietaryInfo)
  return &proprietaryinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::ProprietaryInfo >&
PathEvents::proprietaryinfo() const {
  // @@protoc_insertion_point(field_list:PathEvents.proprietaryInfo)
  return proprietaryinfo_;
}

// repeated .EnvironmentStatus environmentStatus = 7;
int PathEvents::environmentstatus_size() const {
  return environmentstatus_.size();
}
void PathEvents::clear_environmentstatus() {
  environmentstatus_.Clear();
}
const ::EnvironmentStatus& PathEvents::environmentstatus(int index) const {
  // @@protoc_insertion_point(field_get:PathEvents.environmentStatus)
  return environmentstatus_.Get(index);
}
::EnvironmentStatus* PathEvents::mutable_environmentstatus(int index) {
  // @@protoc_insertion_point(field_mutable:PathEvents.environmentStatus)
  return environmentstatus_.Mutable(index);
}
::EnvironmentStatus* PathEvents::add_environmentstatus() {
  // @@protoc_insertion_point(field_add:PathEvents.environmentStatus)
  return environmentstatus_.Add();
}
::google::protobuf::RepeatedPtrField< ::EnvironmentStatus >*
PathEvents::mutable_environmentstatus() {
  // @@protoc_insertion_point(field_mutable_list:PathEvents.environmentStatus)
  return &environmentstatus_;
}
const ::google::protobuf::RepeatedPtrField< ::EnvironmentStatus >&
PathEvents::environmentstatus() const {
  // @@protoc_insertion_point(field_list:PathEvents.environmentStatus)
  return environmentstatus_;
}

// repeated .ObjectDetection objectDetection = 8;
int PathEvents::objectdetection_size() const {
  return objectdetection_.size();
}
void PathEvents::clear_objectdetection() {
  objectdetection_.Clear();
}
const ::ObjectDetection& PathEvents::objectdetection(int index) const {
  // @@protoc_insertion_point(field_get:PathEvents.objectDetection)
  return objectdetection_.Get(index);
}
::ObjectDetection* PathEvents::mutable_objectdetection(int index) {
  // @@protoc_insertion_point(field_mutable:PathEvents.objectDetection)
  return objectdetection_.Mutable(index);
}
::ObjectDetection* PathEvents::add_objectdetection() {
  // @@protoc_insertion_point(field_add:PathEvents.objectDetection)
  return objectdetection_.Add();
}
::google::protobuf::RepeatedPtrField< ::ObjectDetection >*
PathEvents::mutable_objectdetection() {
  // @@protoc_insertion_point(field_mutable_list:PathEvents.objectDetection)
  return &objectdetection_;
}
const ::google::protobuf::RepeatedPtrField< ::ObjectDetection >&
PathEvents::objectdetection() const {
  // @@protoc_insertion_point(field_list:PathEvents.objectDetection)
  return objectdetection_;
}

// repeated .ADServiceAndSensorState adServiceAndSensorState = 9;
int PathEvents::adserviceandsensorstate_size() const {
  return adserviceandsensorstate_.size();
}
void PathEvents::clear_adserviceandsensorstate() {
  adserviceandsensorstate_.Clear();
}
const ::ADServiceAndSensorState& PathEvents::adserviceandsensorstate(int index) const {
  // @@protoc_insertion_point(field_get:PathEvents.adServiceAndSensorState)
  return adserviceandsensorstate_.Get(index);
}
::ADServiceAndSensorState* PathEvents::mutable_adserviceandsensorstate(int index) {
  // @@protoc_insertion_point(field_mutable:PathEvents.adServiceAndSensorState)
  return adserviceandsensorstate_.Mutable(index);
}
::ADServiceAndSensorState* PathEvents::add_adserviceandsensorstate() {
  // @@protoc_insertion_point(field_add:PathEvents.adServiceAndSensorState)
  return adserviceandsensorstate_.Add();
}
::google::protobuf::RepeatedPtrField< ::ADServiceAndSensorState >*
PathEvents::mutable_adserviceandsensorstate() {
  // @@protoc_insertion_point(field_mutable_list:PathEvents.adServiceAndSensorState)
  return &adserviceandsensorstate_;
}
const ::google::protobuf::RepeatedPtrField< ::ADServiceAndSensorState >&
PathEvents::adserviceandsensorstate() const {
  // @@protoc_insertion_point(field_list:PathEvents.adServiceAndSensorState)
  return adserviceandsensorstate_;
}

// repeated .EgoMotion egoMotion = 1000;
int PathEvents::egomotion_size() const {
  return egomotion_.size();
}
void PathEvents::clear_egomotion() {
  egomotion_.Clear();
}
const ::EgoMotion& PathEvents::egomotion(int index) const {
  // @@protoc_insertion_point(field_get:PathEvents.egoMotion)
  return egomotion_.Get(index);
}
::EgoMotion* PathEvents::mutable_egomotion(int index) {
  // @@protoc_insertion_point(field_mutable:PathEvents.egoMotion)
  return egomotion_.Mutable(index);
}
::EgoMotion* PathEvents::add_egomotion() {
  // @@protoc_insertion_point(field_add:PathEvents.egoMotion)
  return egomotion_.Add();
}
::google::protobuf::RepeatedPtrField< ::EgoMotion >*
PathEvents::mutable_egomotion() {
  // @@protoc_insertion_point(field_mutable_list:PathEvents.egoMotion)
  return &egomotion_;
}
const ::google::protobuf::RepeatedPtrField< ::EgoMotion >&
PathEvents::egomotion() const {
  // @@protoc_insertion_point(field_list:PathEvents.egoMotion)
  return egomotion_;
}

// repeated .RawGNSSSatData rawGNSSSatData = 1001;
int PathEvents::rawgnsssatdata_size() const {
  return rawgnsssatdata_.size();
}
void PathEvents::clear_rawgnsssatdata() {
  rawgnsssatdata_.Clear();
}
const ::RawGNSSSatData& PathEvents::rawgnsssatdata(int index) const {
  // @@protoc_insertion_point(field_get:PathEvents.rawGNSSSatData)
  return rawgnsssatdata_.Get(index);
}
::RawGNSSSatData* PathEvents::mutable_rawgnsssatdata(int index) {
  // @@protoc_insertion_point(field_mutable:PathEvents.rawGNSSSatData)
  return rawgnsssatdata_.Mutable(index);
}
::RawGNSSSatData* PathEvents::add_rawgnsssatdata() {
  // @@protoc_insertion_point(field_add:PathEvents.rawGNSSSatData)
  return rawgnsssatdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::RawGNSSSatData >*
PathEvents::mutable_rawgnsssatdata() {
  // @@protoc_insertion_point(field_mutable_list:PathEvents.rawGNSSSatData)
  return &rawgnsssatdata_;
}
const ::google::protobuf::RepeatedPtrField< ::RawGNSSSatData >&
PathEvents::rawgnsssatdata() const {
  // @@protoc_insertion_point(field_list:PathEvents.rawGNSSSatData)
  return rawgnsssatdata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MediaContainer_MediaTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaContainer_MediaTypeEnum_descriptor_;
}
bool MediaContainer_MediaTypeEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MediaContainer_MediaTypeEnum MediaContainer::OTHER;
const MediaContainer_MediaTypeEnum MediaContainer::IMAGE;
const MediaContainer_MediaTypeEnum MediaContainer::VIDEO;
const MediaContainer_MediaTypeEnum MediaContainer::AUDIO;
const MediaContainer_MediaTypeEnum MediaContainer::MediaTypeEnum_MIN;
const MediaContainer_MediaTypeEnum MediaContainer::MediaTypeEnum_MAX;
const int MediaContainer::MediaTypeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaContainer::kTimeStampUTCMsFieldNumber;
const int MediaContainer::kMediaTypeFieldNumber;
const int MediaContainer::kMediaFormatFieldNumber;
const int MediaContainer::kMediaContentFieldNumber;
const int MediaContainer::kMediaIDFieldNumber;
const int MediaContainer::kSensorOffsetFieldNumber;
const int MediaContainer::kSensorDirectionFieldNumber;
const int MediaContainer::kDurationSFieldNumber;
const int MediaContainer::kVerticalViewingAngleDegFieldNumber;
const int MediaContainer::kHorizontalViewingAngleDegFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaContainer::MediaContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MediaContainer)
}

void MediaContainer::InitAsDefaultInstance() {
  sensoroffset_ = const_cast< ::PositionOffset*>(&::PositionOffset::default_instance());
  sensordirection_ = const_cast< ::Vector3D*>(&::Vector3D::default_instance());
}

MediaContainer::MediaContainer(const MediaContainer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MediaContainer)
}

void MediaContainer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  mediatype_ = 1;
  mediaformat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mediacontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mediaid_ = GOOGLE_LONGLONG(0);
  sensoroffset_ = NULL;
  sensordirection_ = NULL;
  duration_s_ = 0;
  verticalviewingangle_deg_ = 0;
  horizontalviewingangle_deg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaContainer::~MediaContainer() {
  // @@protoc_insertion_point(destructor:MediaContainer)
  SharedDtor();
}

void MediaContainer::SharedDtor() {
  mediaformat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mediacontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete sensoroffset_;
    delete sensordirection_;
  }
}

void MediaContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaContainer_descriptor_;
}

const MediaContainer& MediaContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

MediaContainer* MediaContainer::default_instance_ = NULL;

MediaContainer* MediaContainer::New(::google::protobuf::Arena* arena) const {
  MediaContainer* n = new MediaContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MediaContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:MediaContainer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MediaContainer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MediaContainer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    timestamputc_ms_ = GOOGLE_LONGLONG(0);
    mediatype_ = 1;
    if (has_mediaformat()) {
      mediaformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mediacontent()) {
      mediacontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    mediaid_ = GOOGLE_LONGLONG(0);
    if (has_sensoroffset()) {
      if (sensoroffset_ != NULL) sensoroffset_->::PositionOffset::Clear();
    }
    if (has_sensordirection()) {
      if (sensordirection_ != NULL) sensordirection_->::Vector3D::Clear();
    }
    duration_s_ = 0;
  }
  ZR_(verticalviewingangle_deg_, horizontalviewingangle_deg_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MediaContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MediaContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStampUTC_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamputc_ms_)));
          set_has_timestamputc_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mediaType;
        break;
      }

      // required .MediaContainer.MediaTypeEnum mediaType = 2;
      case 2: {
        if (tag == 16) {
         parse_mediaType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MediaContainer_MediaTypeEnum_IsValid(value)) {
            set_mediatype(static_cast< ::MediaContainer_MediaTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mediaFormat;
        break;
      }

      // required string mediaFormat = 3;
      case 3: {
        if (tag == 26) {
         parse_mediaFormat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediaformat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mediaformat().data(), this->mediaformat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MediaContainer.mediaFormat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mediaContent;
        break;
      }

      // required bytes mediaContent = 4;
      case 4: {
        if (tag == 34) {
         parse_mediaContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mediacontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mediaID;
        break;
      }

      // optional int64 mediaID = 5;
      case 5: {
        if (tag == 40) {
         parse_mediaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mediaid_)));
          set_has_mediaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sensorOffset;
        break;
      }

      // optional .PositionOffset sensorOffset = 6;
      case 6: {
        if (tag == 50) {
         parse_sensorOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensoroffset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sensorDirection;
        break;
      }

      // optional .Vector3D sensorDirection = 7;
      case 7: {
        if (tag == 58) {
         parse_sensorDirection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensordirection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_duration_s;
        break;
      }

      // optional int32 duration_s = 8;
      case 8: {
        if (tag == 64) {
         parse_duration_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_s_)));
          set_has_duration_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_verticalViewingAngle_deg;
        break;
      }

      // optional double verticalViewingAngle_deg = 9;
      case 9: {
        if (tag == 73) {
         parse_verticalViewingAngle_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &verticalviewingangle_deg_)));
          set_has_verticalviewingangle_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_horizontalViewingAngle_deg;
        break;
      }

      // optional double horizontalViewingAngle_deg = 10;
      case 10: {
        if (tag == 81) {
         parse_horizontalViewingAngle_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontalviewingangle_deg_)));
          set_has_horizontalviewingangle_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MediaContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MediaContainer)
  return false;
#undef DO_
}

void MediaContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MediaContainer)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamputc_ms(), output);
  }

  // required .MediaContainer.MediaTypeEnum mediaType = 2;
  if (has_mediatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mediatype(), output);
  }

  // required string mediaFormat = 3;
  if (has_mediaformat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediaformat().data(), this->mediaformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MediaContainer.mediaFormat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mediaformat(), output);
  }

  // required bytes mediaContent = 4;
  if (has_mediacontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->mediacontent(), output);
  }

  // optional int64 mediaID = 5;
  if (has_mediaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->mediaid(), output);
  }

  // optional .PositionOffset sensorOffset = 6;
  if (has_sensoroffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->sensoroffset_, output);
  }

  // optional .Vector3D sensorDirection = 7;
  if (has_sensordirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->sensordirection_, output);
  }

  // optional int32 duration_s = 8;
  if (has_duration_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->duration_s(), output);
  }

  // optional double verticalViewingAngle_deg = 9;
  if (has_verticalviewingangle_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->verticalviewingangle_deg(), output);
  }

  // optional double horizontalViewingAngle_deg = 10;
  if (has_horizontalviewingangle_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->horizontalviewingangle_deg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MediaContainer)
}

::google::protobuf::uint8* MediaContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MediaContainer)
  // required int64 timeStampUTC_ms = 1;
  if (has_timestamputc_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamputc_ms(), target);
  }

  // required .MediaContainer.MediaTypeEnum mediaType = 2;
  if (has_mediatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mediatype(), target);
  }

  // required string mediaFormat = 3;
  if (has_mediaformat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediaformat().data(), this->mediaformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MediaContainer.mediaFormat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mediaformat(), target);
  }

  // required bytes mediaContent = 4;
  if (has_mediacontent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->mediacontent(), target);
  }

  // optional int64 mediaID = 5;
  if (has_mediaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->mediaid(), target);
  }

  // optional .PositionOffset sensorOffset = 6;
  if (has_sensoroffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->sensoroffset_, false, target);
  }

  // optional .Vector3D sensorDirection = 7;
  if (has_sensordirection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->sensordirection_, false, target);
  }

  // optional int32 duration_s = 8;
  if (has_duration_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->duration_s(), target);
  }

  // optional double verticalViewingAngle_deg = 9;
  if (has_verticalviewingangle_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->verticalviewingangle_deg(), target);
  }

  // optional double horizontalViewingAngle_deg = 10;
  if (has_horizontalviewingangle_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->horizontalviewingangle_deg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MediaContainer)
  return target;
}

int MediaContainer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MediaContainer)
  int total_size = 0;

  if (has_timestamputc_ms()) {
    // required int64 timeStampUTC_ms = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());
  }

  if (has_mediatype()) {
    // required .MediaContainer.MediaTypeEnum mediaType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mediatype());
  }

  if (has_mediaformat()) {
    // required string mediaFormat = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mediaformat());
  }

  if (has_mediacontent()) {
    // required bytes mediaContent = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mediacontent());
  }

  return total_size;
}
int MediaContainer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MediaContainer)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 timeStampUTC_ms = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamputc_ms());

    // required .MediaContainer.MediaTypeEnum mediaType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mediatype());

    // required string mediaFormat = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mediaformat());

    // required bytes mediaContent = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mediacontent());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 240u) {
    // optional int64 mediaID = 5;
    if (has_mediaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mediaid());
    }

    // optional .PositionOffset sensorOffset = 6;
    if (has_sensoroffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sensoroffset_);
    }

    // optional .Vector3D sensorDirection = 7;
    if (has_sensordirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sensordirection_);
    }

    // optional int32 duration_s = 8;
    if (has_duration_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration_s());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double verticalViewingAngle_deg = 9;
    if (has_verticalviewingangle_deg()) {
      total_size += 1 + 8;
    }

    // optional double horizontalViewingAngle_deg = 10;
    if (has_horizontalviewingangle_deg()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MediaContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MediaContainer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MediaContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MediaContainer)
    MergeFrom(*source);
  }
}

void MediaContainer::MergeFrom(const MediaContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MediaContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamputc_ms()) {
      set_timestamputc_ms(from.timestamputc_ms());
    }
    if (from.has_mediatype()) {
      set_mediatype(from.mediatype());
    }
    if (from.has_mediaformat()) {
      set_has_mediaformat();
      mediaformat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mediaformat_);
    }
    if (from.has_mediacontent()) {
      set_has_mediacontent();
      mediacontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mediacontent_);
    }
    if (from.has_mediaid()) {
      set_mediaid(from.mediaid());
    }
    if (from.has_sensoroffset()) {
      mutable_sensoroffset()->::PositionOffset::MergeFrom(from.sensoroffset());
    }
    if (from.has_sensordirection()) {
      mutable_sensordirection()->::Vector3D::MergeFrom(from.sensordirection());
    }
    if (from.has_duration_s()) {
      set_duration_s(from.duration_s());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_verticalviewingangle_deg()) {
      set_verticalviewingangle_deg(from.verticalviewingangle_deg());
    }
    if (from.has_horizontalviewingangle_deg()) {
      set_horizontalviewingangle_deg(from.horizontalviewingangle_deg());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MediaContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MediaContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaContainer::CopyFrom(const MediaContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MediaContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_sensordirection()) {
    if (!this->sensordirection_->IsInitialized()) return false;
  }
  return true;
}

void MediaContainer::Swap(MediaContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaContainer::InternalSwap(MediaContainer* other) {
  std::swap(timestamputc_ms_, other->timestamputc_ms_);
  std::swap(mediatype_, other->mediatype_);
  mediaformat_.Swap(&other->mediaformat_);
  mediacontent_.Swap(&other->mediacontent_);
  std::swap(mediaid_, other->mediaid_);
  std::swap(sensoroffset_, other->sensoroffset_);
  std::swap(sensordirection_, other->sensordirection_);
  std::swap(duration_s_, other->duration_s_);
  std::swap(verticalviewingangle_deg_, other->verticalviewingangle_deg_);
  std::swap(horizontalviewingangle_deg_, other->horizontalviewingangle_deg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MediaContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaContainer_descriptor_;
  metadata.reflection = MediaContainer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaContainer

// required int64 timeStampUTC_ms = 1;
bool MediaContainer::has_timestamputc_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MediaContainer::set_has_timestamputc_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void MediaContainer::clear_has_timestamputc_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void MediaContainer::clear_timestamputc_ms() {
  timestamputc_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamputc_ms();
}
 ::google::protobuf::int64 MediaContainer::timestamputc_ms() const {
  // @@protoc_insertion_point(field_get:MediaContainer.timeStampUTC_ms)
  return timestamputc_ms_;
}
 void MediaContainer::set_timestamputc_ms(::google::protobuf::int64 value) {
  set_has_timestamputc_ms();
  timestamputc_ms_ = value;
  // @@protoc_insertion_point(field_set:MediaContainer.timeStampUTC_ms)
}

// required .MediaContainer.MediaTypeEnum mediaType = 2;
bool MediaContainer::has_mediatype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MediaContainer::set_has_mediatype() {
  _has_bits_[0] |= 0x00000002u;
}
void MediaContainer::clear_has_mediatype() {
  _has_bits_[0] &= ~0x00000002u;
}
void MediaContainer::clear_mediatype() {
  mediatype_ = 1;
  clear_has_mediatype();
}
 ::MediaContainer_MediaTypeEnum MediaContainer::mediatype() const {
  // @@protoc_insertion_point(field_get:MediaContainer.mediaType)
  return static_cast< ::MediaContainer_MediaTypeEnum >(mediatype_);
}
 void MediaContainer::set_mediatype(::MediaContainer_MediaTypeEnum value) {
  assert(::MediaContainer_MediaTypeEnum_IsValid(value));
  set_has_mediatype();
  mediatype_ = value;
  // @@protoc_insertion_point(field_set:MediaContainer.mediaType)
}

// required string mediaFormat = 3;
bool MediaContainer::has_mediaformat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MediaContainer::set_has_mediaformat() {
  _has_bits_[0] |= 0x00000004u;
}
void MediaContainer::clear_has_mediaformat() {
  _has_bits_[0] &= ~0x00000004u;
}
void MediaContainer::clear_mediaformat() {
  mediaformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mediaformat();
}
 const ::std::string& MediaContainer::mediaformat() const {
  // @@protoc_insertion_point(field_get:MediaContainer.mediaFormat)
  return mediaformat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaContainer::set_mediaformat(const ::std::string& value) {
  set_has_mediaformat();
  mediaformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MediaContainer.mediaFormat)
}
 void MediaContainer::set_mediaformat(const char* value) {
  set_has_mediaformat();
  mediaformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MediaContainer.mediaFormat)
}
 void MediaContainer::set_mediaformat(const char* value, size_t size) {
  set_has_mediaformat();
  mediaformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MediaContainer.mediaFormat)
}
 ::std::string* MediaContainer::mutable_mediaformat() {
  set_has_mediaformat();
  // @@protoc_insertion_point(field_mutable:MediaContainer.mediaFormat)
  return mediaformat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MediaContainer::release_mediaformat() {
  // @@protoc_insertion_point(field_release:MediaContainer.mediaFormat)
  clear_has_mediaformat();
  return mediaformat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaContainer::set_allocated_mediaformat(::std::string* mediaformat) {
  if (mediaformat != NULL) {
    set_has_mediaformat();
  } else {
    clear_has_mediaformat();
  }
  mediaformat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mediaformat);
  // @@protoc_insertion_point(field_set_allocated:MediaContainer.mediaFormat)
}

// required bytes mediaContent = 4;
bool MediaContainer::has_mediacontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MediaContainer::set_has_mediacontent() {
  _has_bits_[0] |= 0x00000008u;
}
void MediaContainer::clear_has_mediacontent() {
  _has_bits_[0] &= ~0x00000008u;
}
void MediaContainer::clear_mediacontent() {
  mediacontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mediacontent();
}
 const ::std::string& MediaContainer::mediacontent() const {
  // @@protoc_insertion_point(field_get:MediaContainer.mediaContent)
  return mediacontent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaContainer::set_mediacontent(const ::std::string& value) {
  set_has_mediacontent();
  mediacontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MediaContainer.mediaContent)
}
 void MediaContainer::set_mediacontent(const char* value) {
  set_has_mediacontent();
  mediacontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MediaContainer.mediaContent)
}
 void MediaContainer::set_mediacontent(const void* value, size_t size) {
  set_has_mediacontent();
  mediacontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MediaContainer.mediaContent)
}
 ::std::string* MediaContainer::mutable_mediacontent() {
  set_has_mediacontent();
  // @@protoc_insertion_point(field_mutable:MediaContainer.mediaContent)
  return mediacontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MediaContainer::release_mediacontent() {
  // @@protoc_insertion_point(field_release:MediaContainer.mediaContent)
  clear_has_mediacontent();
  return mediacontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaContainer::set_allocated_mediacontent(::std::string* mediacontent) {
  if (mediacontent != NULL) {
    set_has_mediacontent();
  } else {
    clear_has_mediacontent();
  }
  mediacontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mediacontent);
  // @@protoc_insertion_point(field_set_allocated:MediaContainer.mediaContent)
}

// optional int64 mediaID = 5;
bool MediaContainer::has_mediaid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MediaContainer::set_has_mediaid() {
  _has_bits_[0] |= 0x00000010u;
}
void MediaContainer::clear_has_mediaid() {
  _has_bits_[0] &= ~0x00000010u;
}
void MediaContainer::clear_mediaid() {
  mediaid_ = GOOGLE_LONGLONG(0);
  clear_has_mediaid();
}
 ::google::protobuf::int64 MediaContainer::mediaid() const {
  // @@protoc_insertion_point(field_get:MediaContainer.mediaID)
  return mediaid_;
}
 void MediaContainer::set_mediaid(::google::protobuf::int64 value) {
  set_has_mediaid();
  mediaid_ = value;
  // @@protoc_insertion_point(field_set:MediaContainer.mediaID)
}

// optional .PositionOffset sensorOffset = 6;
bool MediaContainer::has_sensoroffset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MediaContainer::set_has_sensoroffset() {
  _has_bits_[0] |= 0x00000020u;
}
void MediaContainer::clear_has_sensoroffset() {
  _has_bits_[0] &= ~0x00000020u;
}
void MediaContainer::clear_sensoroffset() {
  if (sensoroffset_ != NULL) sensoroffset_->::PositionOffset::Clear();
  clear_has_sensoroffset();
}
const ::PositionOffset& MediaContainer::sensoroffset() const {
  // @@protoc_insertion_point(field_get:MediaContainer.sensorOffset)
  return sensoroffset_ != NULL ? *sensoroffset_ : *default_instance_->sensoroffset_;
}
::PositionOffset* MediaContainer::mutable_sensoroffset() {
  set_has_sensoroffset();
  if (sensoroffset_ == NULL) {
    sensoroffset_ = new ::PositionOffset;
  }
  // @@protoc_insertion_point(field_mutable:MediaContainer.sensorOffset)
  return sensoroffset_;
}
::PositionOffset* MediaContainer::release_sensoroffset() {
  // @@protoc_insertion_point(field_release:MediaContainer.sensorOffset)
  clear_has_sensoroffset();
  ::PositionOffset* temp = sensoroffset_;
  sensoroffset_ = NULL;
  return temp;
}
void MediaContainer::set_allocated_sensoroffset(::PositionOffset* sensoroffset) {
  delete sensoroffset_;
  sensoroffset_ = sensoroffset;
  if (sensoroffset) {
    set_has_sensoroffset();
  } else {
    clear_has_sensoroffset();
  }
  // @@protoc_insertion_point(field_set_allocated:MediaContainer.sensorOffset)
}

// optional .Vector3D sensorDirection = 7;
bool MediaContainer::has_sensordirection() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MediaContainer::set_has_sensordirection() {
  _has_bits_[0] |= 0x00000040u;
}
void MediaContainer::clear_has_sensordirection() {
  _has_bits_[0] &= ~0x00000040u;
}
void MediaContainer::clear_sensordirection() {
  if (sensordirection_ != NULL) sensordirection_->::Vector3D::Clear();
  clear_has_sensordirection();
}
const ::Vector3D& MediaContainer::sensordirection() const {
  // @@protoc_insertion_point(field_get:MediaContainer.sensorDirection)
  return sensordirection_ != NULL ? *sensordirection_ : *default_instance_->sensordirection_;
}
::Vector3D* MediaContainer::mutable_sensordirection() {
  set_has_sensordirection();
  if (sensordirection_ == NULL) {
    sensordirection_ = new ::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:MediaContainer.sensorDirection)
  return sensordirection_;
}
::Vector3D* MediaContainer::release_sensordirection() {
  // @@protoc_insertion_point(field_release:MediaContainer.sensorDirection)
  clear_has_sensordirection();
  ::Vector3D* temp = sensordirection_;
  sensordirection_ = NULL;
  return temp;
}
void MediaContainer::set_allocated_sensordirection(::Vector3D* sensordirection) {
  delete sensordirection_;
  sensordirection_ = sensordirection;
  if (sensordirection) {
    set_has_sensordirection();
  } else {
    clear_has_sensordirection();
  }
  // @@protoc_insertion_point(field_set_allocated:MediaContainer.sensorDirection)
}

// optional int32 duration_s = 8;
bool MediaContainer::has_duration_s() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MediaContainer::set_has_duration_s() {
  _has_bits_[0] |= 0x00000080u;
}
void MediaContainer::clear_has_duration_s() {
  _has_bits_[0] &= ~0x00000080u;
}
void MediaContainer::clear_duration_s() {
  duration_s_ = 0;
  clear_has_duration_s();
}
 ::google::protobuf::int32 MediaContainer::duration_s() const {
  // @@protoc_insertion_point(field_get:MediaContainer.duration_s)
  return duration_s_;
}
 void MediaContainer::set_duration_s(::google::protobuf::int32 value) {
  set_has_duration_s();
  duration_s_ = value;
  // @@protoc_insertion_point(field_set:MediaContainer.duration_s)
}

// optional double verticalViewingAngle_deg = 9;
bool MediaContainer::has_verticalviewingangle_deg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MediaContainer::set_has_verticalviewingangle_deg() {
  _has_bits_[0] |= 0x00000100u;
}
void MediaContainer::clear_has_verticalviewingangle_deg() {
  _has_bits_[0] &= ~0x00000100u;
}
void MediaContainer::clear_verticalviewingangle_deg() {
  verticalviewingangle_deg_ = 0;
  clear_has_verticalviewingangle_deg();
}
 double MediaContainer::verticalviewingangle_deg() const {
  // @@protoc_insertion_point(field_get:MediaContainer.verticalViewingAngle_deg)
  return verticalviewingangle_deg_;
}
 void MediaContainer::set_verticalviewingangle_deg(double value) {
  set_has_verticalviewingangle_deg();
  verticalviewingangle_deg_ = value;
  // @@protoc_insertion_point(field_set:MediaContainer.verticalViewingAngle_deg)
}

// optional double horizontalViewingAngle_deg = 10;
bool MediaContainer::has_horizontalviewingangle_deg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MediaContainer::set_has_horizontalviewingangle_deg() {
  _has_bits_[0] |= 0x00000200u;
}
void MediaContainer::clear_has_horizontalviewingangle_deg() {
  _has_bits_[0] &= ~0x00000200u;
}
void MediaContainer::clear_horizontalviewingangle_deg() {
  horizontalviewingangle_deg_ = 0;
  clear_has_horizontalviewingangle_deg();
}
 double MediaContainer::horizontalviewingangle_deg() const {
  // @@protoc_insertion_point(field_get:MediaContainer.horizontalViewingAngle_deg)
  return horizontalviewingangle_deg_;
}
 void MediaContainer::set_horizontalviewingangle_deg(double value) {
  set_has_horizontalviewingangle_deg();
  horizontalviewingangle_deg_ = value;
  // @@protoc_insertion_point(field_set:MediaContainer.horizontalViewingAngle_deg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathMedia::kMediaContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathMedia::PathMedia()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PathMedia)
}

void PathMedia::InitAsDefaultInstance() {
}

PathMedia::PathMedia(const PathMedia& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PathMedia)
}

void PathMedia::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathMedia::~PathMedia() {
  // @@protoc_insertion_point(destructor:PathMedia)
  SharedDtor();
}

void PathMedia::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathMedia::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathMedia::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathMedia_descriptor_;
}

const PathMedia& PathMedia::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

PathMedia* PathMedia::default_instance_ = NULL;

PathMedia* PathMedia::New(::google::protobuf::Arena* arena) const {
  PathMedia* n = new PathMedia;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathMedia::Clear() {
// @@protoc_insertion_point(message_clear_start:PathMedia)
  mediacontainer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathMedia::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PathMedia)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MediaContainer mediaContainer = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mediaContainer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mediacontainer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mediaContainer;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PathMedia)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PathMedia)
  return false;
#undef DO_
}

void PathMedia::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PathMedia)
  // repeated .MediaContainer mediaContainer = 1;
  for (unsigned int i = 0, n = this->mediacontainer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mediacontainer(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PathMedia)
}

::google::protobuf::uint8* PathMedia::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PathMedia)
  // repeated .MediaContainer mediaContainer = 1;
  for (unsigned int i = 0, n = this->mediacontainer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mediacontainer(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PathMedia)
  return target;
}

int PathMedia::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PathMedia)
  int total_size = 0;

  // repeated .MediaContainer mediaContainer = 1;
  total_size += 1 * this->mediacontainer_size();
  for (int i = 0; i < this->mediacontainer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mediacontainer(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathMedia::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PathMedia)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathMedia* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathMedia>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PathMedia)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PathMedia)
    MergeFrom(*source);
  }
}

void PathMedia::MergeFrom(const PathMedia& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PathMedia)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mediacontainer_.MergeFrom(from.mediacontainer_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathMedia::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PathMedia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathMedia::CopyFrom(const PathMedia& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathMedia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathMedia::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->mediacontainer())) return false;
  return true;
}

void PathMedia::Swap(PathMedia* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathMedia::InternalSwap(PathMedia* other) {
  mediacontainer_.UnsafeArenaSwap(&other->mediacontainer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathMedia::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathMedia_descriptor_;
  metadata.reflection = PathMedia_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathMedia

// repeated .MediaContainer mediaContainer = 1;
int PathMedia::mediacontainer_size() const {
  return mediacontainer_.size();
}
void PathMedia::clear_mediacontainer() {
  mediacontainer_.Clear();
}
const ::MediaContainer& PathMedia::mediacontainer(int index) const {
  // @@protoc_insertion_point(field_get:PathMedia.mediaContainer)
  return mediacontainer_.Get(index);
}
::MediaContainer* PathMedia::mutable_mediacontainer(int index) {
  // @@protoc_insertion_point(field_mutable:PathMedia.mediaContainer)
  return mediacontainer_.Mutable(index);
}
::MediaContainer* PathMedia::add_mediacontainer() {
  // @@protoc_insertion_point(field_add:PathMedia.mediaContainer)
  return mediacontainer_.Add();
}
::google::protobuf::RepeatedPtrField< ::MediaContainer >*
PathMedia::mutable_mediacontainer() {
  // @@protoc_insertion_point(field_mutable_list:PathMedia.mediaContainer)
  return &mediacontainer_;
}
const ::google::protobuf::RepeatedPtrField< ::MediaContainer >&
PathMedia::mediacontainer() const {
  // @@protoc_insertion_point(field_list:PathMedia.mediaContainer)
  return mediacontainer_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kEnvelopeFieldNumber;
const int Message::kPathFieldNumber;
const int Message::kPathEventsFieldNumber;
const int Message::kPathMediaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message)
}

void Message::InitAsDefaultInstance() {
  envelope_ = const_cast< ::Envelope*>(&::Envelope::default_instance());
  path_ = const_cast< ::Path*>(&::Path::default_instance());
  pathevents_ = const_cast< ::PathEvents*>(&::PathEvents::default_instance());
  pathmedia_ = const_cast< ::PathMedia*>(&::PathMedia::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  envelope_ = NULL;
  path_ = NULL;
  pathevents_ = NULL;
  pathmedia_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete envelope_;
    delete path_;
    delete pathevents_;
    delete pathmedia_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensoris_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Message)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_envelope()) {
      if (envelope_ != NULL) envelope_->::Envelope::Clear();
    }
    if (has_path()) {
      if (path_ != NULL) path_->::Path::Clear();
    }
    if (has_pathevents()) {
      if (pathevents_ != NULL) pathevents_->::PathEvents::Clear();
    }
    if (has_pathmedia()) {
      if (pathmedia_ != NULL) pathmedia_->::PathMedia::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Envelope envelope = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required .Path path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pathEvents;
        break;
      }

      // optional .PathEvents pathEvents = 3;
      case 3: {
        if (tag == 26) {
         parse_pathEvents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pathevents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pathMedia;
        break;
      }

      // optional .PathMedia pathMedia = 4;
      case 4: {
        if (tag == 34) {
         parse_pathMedia:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pathmedia()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message)
  // required .Envelope envelope = 1;
  if (has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->envelope_, output);
  }

  // required .Path path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->path_, output);
  }

  // optional .PathEvents pathEvents = 3;
  if (has_pathevents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pathevents_, output);
  }

  // optional .PathMedia pathMedia = 4;
  if (has_pathmedia()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pathmedia_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Message)
  // required .Envelope envelope = 1;
  if (has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->envelope_, false, target);
  }

  // required .Path path = 2;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->path_, false, target);
  }

  // optional .PathEvents pathEvents = 3;
  if (has_pathevents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pathevents_, false, target);
  }

  // optional .PathMedia pathMedia = 4;
  if (has_pathmedia()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pathmedia_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message)
  return target;
}

int Message::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Message)
  int total_size = 0;

  if (has_envelope()) {
    // required .Envelope envelope = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->envelope_);
  }

  if (has_path()) {
    // required .Path path = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  return total_size;
}
int Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Message)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Envelope envelope = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->envelope_);

    // required .Path path = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional .PathEvents pathEvents = 3;
    if (has_pathevents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pathevents_);
    }

    // optional .PathMedia pathMedia = 4;
    if (has_pathmedia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pathmedia_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_envelope()) {
      mutable_envelope()->::Envelope::MergeFrom(from.envelope());
    }
    if (from.has_path()) {
      mutable_path()->::Path::MergeFrom(from.path());
    }
    if (from.has_pathevents()) {
      mutable_pathevents()->::PathEvents::MergeFrom(from.pathevents());
    }
    if (from.has_pathmedia()) {
      mutable_pathmedia()->::PathMedia::MergeFrom(from.pathmedia());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_envelope()) {
    if (!this->envelope_->IsInitialized()) return false;
  }
  if (has_path()) {
    if (!this->path_->IsInitialized()) return false;
  }
  if (has_pathevents()) {
    if (!this->pathevents_->IsInitialized()) return false;
  }
  if (has_pathmedia()) {
    if (!this->pathmedia_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(envelope_, other->envelope_);
  std::swap(path_, other->path_);
  std::swap(pathevents_, other->pathevents_);
  std::swap(pathmedia_, other->pathmedia_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// required .Envelope envelope = 1;
bool Message::has_envelope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_envelope() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_envelope() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_envelope() {
  if (envelope_ != NULL) envelope_->::Envelope::Clear();
  clear_has_envelope();
}
const ::Envelope& Message::envelope() const {
  // @@protoc_insertion_point(field_get:Message.envelope)
  return envelope_ != NULL ? *envelope_ : *default_instance_->envelope_;
}
::Envelope* Message::mutable_envelope() {
  set_has_envelope();
  if (envelope_ == NULL) {
    envelope_ = new ::Envelope;
  }
  // @@protoc_insertion_point(field_mutable:Message.envelope)
  return envelope_;
}
::Envelope* Message::release_envelope() {
  // @@protoc_insertion_point(field_release:Message.envelope)
  clear_has_envelope();
  ::Envelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
void Message::set_allocated_envelope(::Envelope* envelope) {
  delete envelope_;
  envelope_ = envelope;
  if (envelope) {
    set_has_envelope();
  } else {
    clear_has_envelope();
  }
  // @@protoc_insertion_point(field_set_allocated:Message.envelope)
}

// required .Path path = 2;
bool Message::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_path() {
  if (path_ != NULL) path_->::Path::Clear();
  clear_has_path();
}
const ::Path& Message::path() const {
  // @@protoc_insertion_point(field_get:Message.path)
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
::Path* Message::mutable_path() {
  set_has_path();
  if (path_ == NULL) {
    path_ = new ::Path;
  }
  // @@protoc_insertion_point(field_mutable:Message.path)
  return path_;
}
::Path* Message::release_path() {
  // @@protoc_insertion_point(field_release:Message.path)
  clear_has_path();
  ::Path* temp = path_;
  path_ = NULL;
  return temp;
}
void Message::set_allocated_path(::Path* path) {
  delete path_;
  path_ = path;
  if (path) {
    set_has_path();
  } else {
    clear_has_path();
  }
  // @@protoc_insertion_point(field_set_allocated:Message.path)
}

// optional .PathEvents pathEvents = 3;
bool Message::has_pathevents() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message::set_has_pathevents() {
  _has_bits_[0] |= 0x00000004u;
}
void Message::clear_has_pathevents() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_pathevents() {
  if (pathevents_ != NULL) pathevents_->::PathEvents::Clear();
  clear_has_pathevents();
}
const ::PathEvents& Message::pathevents() const {
  // @@protoc_insertion_point(field_get:Message.pathEvents)
  return pathevents_ != NULL ? *pathevents_ : *default_instance_->pathevents_;
}
::PathEvents* Message::mutable_pathevents() {
  set_has_pathevents();
  if (pathevents_ == NULL) {
    pathevents_ = new ::PathEvents;
  }
  // @@protoc_insertion_point(field_mutable:Message.pathEvents)
  return pathevents_;
}
::PathEvents* Message::release_pathevents() {
  // @@protoc_insertion_point(field_release:Message.pathEvents)
  clear_has_pathevents();
  ::PathEvents* temp = pathevents_;
  pathevents_ = NULL;
  return temp;
}
void Message::set_allocated_pathevents(::PathEvents* pathevents) {
  delete pathevents_;
  pathevents_ = pathevents;
  if (pathevents) {
    set_has_pathevents();
  } else {
    clear_has_pathevents();
  }
  // @@protoc_insertion_point(field_set_allocated:Message.pathEvents)
}

// optional .PathMedia pathMedia = 4;
bool Message::has_pathmedia() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Message::set_has_pathmedia() {
  _has_bits_[0] |= 0x00000008u;
}
void Message::clear_has_pathmedia() {
  _has_bits_[0] &= ~0x00000008u;
}
void Message::clear_pathmedia() {
  if (pathmedia_ != NULL) pathmedia_->::PathMedia::Clear();
  clear_has_pathmedia();
}
const ::PathMedia& Message::pathmedia() const {
  // @@protoc_insertion_point(field_get:Message.pathMedia)
  return pathmedia_ != NULL ? *pathmedia_ : *default_instance_->pathmedia_;
}
::PathMedia* Message::mutable_pathmedia() {
  set_has_pathmedia();
  if (pathmedia_ == NULL) {
    pathmedia_ = new ::PathMedia;
  }
  // @@protoc_insertion_point(field_mutable:Message.pathMedia)
  return pathmedia_;
}
::PathMedia* Message::release_pathmedia() {
  // @@protoc_insertion_point(field_release:Message.pathMedia)
  clear_has_pathmedia();
  ::PathMedia* temp = pathmedia_;
  pathmedia_ = NULL;
  return temp;
}
void Message::set_allocated_pathmedia(::PathMedia* pathmedia) {
  delete pathmedia_;
  pathmedia_ = pathmedia;
  if (pathmedia) {
    set_has_pathmedia();
  } else {
    clear_has_pathmedia();
  }
  // @@protoc_insertion_point(field_set_allocated:Message.pathMedia)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
